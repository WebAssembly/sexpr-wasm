;;; TOOL: run-wasm-link
;;; FLAGS: 
(module
  (import "__extern" "bar" (global i32))
  (global i32 (i32.const 1))
  (global i32 (i32.const 2))
  (func (param i32)
     get_global 2
     get_global 1
     i32.add
     get_global 0
     i32.add
     call 0)
)
(module
  (import "__extern" "baz" (global i64))
  (global i64 (i64.const 2))
  (func (param i64) (param i64)
     get_global 0
     get_global 1
     call 0)
)
(;; STDOUT ;;;
linked.wasm:	file format wasm 0x00000d

Sections:
     TYPE start=0x0000000a end=0x00000014 (size=0x0000000a) count: 2
   IMPORT start=0x0000001a end=0x0000003b (size=0x00000021) count: 2
 FUNCTION start=0x00000041 end=0x00000044 (size=0x00000003) count: 2
   GLOBAL start=0x00000046 end=0x00000056 (size=0x00000010) count: 3
     CODE start=0x00000058 end=0x0000008b (size=0x00000033) count: 2
   CUSTOM start=0x00000091 end=0x000000ac (size=0x0000001b) "reloc.CODE"

Section Details:
TYPE:
 - [0] (i32) -> nil
 - [1] (i64, i64) -> nil
IMPORT:
 - global[0] i32 mutable=0 <- __extern.bar
 - global[1] i64 mutable=0 <- __extern.baz
FUNCTION:
 - func[0] sig=0
 - func[1] sig=1
GLOBAL:
 - global[2] i32 mutable=0 - init i32=1
 - global[3] i32 mutable=0 - init i32=2
 - global[4] i64 mutable=0 - init i64=2
CODE:
 - func 0
 - func 1
CUSTOM:
 - name: "reloc.CODE"
  - section: CODE
   - R_GLOBAL_INDEX_LEB offset=0x5c (0x4)
   - R_GLOBAL_INDEX_LEB offset=0x62 (0xa)
   - R_GLOBAL_INDEX_LEB offset=0x69 (0x11)
   - R_FUNC_INDEX_LEB   offset=0x70 (0x18)
   - R_GLOBAL_INDEX_LEB offset=0x79 (0x21)
   - R_GLOBAL_INDEX_LEB offset=0x7f (0x27)
   - R_FUNC_INDEX_LEB   offset=0x85 (0x2d)

Code Disassembly:
func 0
 00005b: 23 83 80 80 80 00          | get_global 0x3
 000061: 23 82 80 80 80 00          | get_global 0x2
 000067: 6a                         | i32.add
 000068: 23 80 80 80 80 00          | get_global 0
 00006e: 6a                         | i32.add
 00006f: 10 80 80 80 80 00          | call 0
func 1
 000078: 23 81 80 80 80 00          | get_global 0x1
 00007e: 23 84 80 80 80 00          | get_global 0x4
 000084: 10 81 80 80 80 00          | call 0x1
;;; STDOUT ;;)
