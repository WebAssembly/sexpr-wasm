;;; TOOL: run-interp
;;; ARGS*: --enable-simd
(module
  ;; i8x16 eq
  (func (export "i8x16_eq_0") (result v128)
    v128.const i32 0xff000001 0xe0000002 0x00000003 0x00000004
    v128.const i32 0xff000001 0xe0000002 0x00000003 0x00000004
    i8x16.eq)
  (func (export "i8x16_eq_1") (result v128)
    v128.const i32 0xff000001 0xe0000002 0x00000003 0x77000004
    v128.const i32 0x05000001 0x0e002002 0x44000003 0x00000004
    i8x16.eq)

  ;; i16x8 eq
  (func (export "i16x8_eq_0") (result v128)
    v128.const i32 0xff000001 0xe0000002 0x00000003 0x00000004
    v128.const i32 0xff000001 0xe0000002 0x00000003 0x00000004
    i16x8.eq)
  (func (export "i16x8_eq_1") (result v128)
    v128.const i32 0xff000001 0xe0000002 0x00000003 0x77000004
    v128.const i32 0x05000001 0x0e002002 0x44000003 0x00000004
    i16x8.eq)

  ;; i32x4 eq
  (func (export "i32x4_eq_0") (result v128)
    v128.const i32 0xff000001 0xe0000002 0x00000003 0x00000004
    v128.const i32 0xff000001 0xe0000002 0x00000003 0x00000004
    i32x4.eq)
  (func (export "i32x4_eq_1") (result v128)
    v128.const i32 0xff000001 0xe0000002 0x00000003 0x77000004
    v128.const i32 0x05000001 0x0e002002 0x44000003 0x00000004
    i32x4.eq)

  ;; f32x4 eq
  ;; For Floating num:
  ;; +0.0 = 0x00000000, -0.0 = 0x80000000, 0xffc00000 is a NaN
  ;; 1.5 = 0x449a5000, 1.0 = 0x3f800000
  (func (export "f32x4_eq_0") (result v128)
    v128.const i32 0x00000000 0xffc00000 0x449a5000 0x449a5000
    v128.const i32 0x80000000 0xffc00000 0x449a5000 0x3f800000
    f32x4.eq)

  ;; f64x2 eq
  ;; For Double num:
  ;; +0.0 = 0x0000000000000000, -0.0 = 0x8000000000000000
  ;; fff8000000000000 is a NaN
  ;; 1.5 = 3ff8000000000000, 1.0 = 0x3ff0000000000000
  (func (export "f64x2_eq_0") (result v128)
    v128.const i32 0x00000000 0x00000000 0x00000000 0xfff80000
    v128.const i32 0x00000000 0x80000000 0x00000000 0xfff80000
    f64x2.eq)
  (func (export "f64x2_eq_1") (result v128)
    v128.const i32 0x00000000 0x3ff80000 0x00000000 0x3ff80000
    v128.const i32 0x00000000 0x3ff80000 0x00000000 0x3ff00000
    f64x2.eq)
)
(;; STDOUT ;;;
i8x16_eq_0() => v128:0x01010101 0x01010101 0x01010101 0x01010101
i8x16_eq_1() => v128:0x00010101 0x00010001 0x00010101 0x00010101
i16x8_eq_0() => v128:0x00010001 0x00010001 0x00010001 0x00010001
i16x8_eq_1() => v128:0x00000001 0x00000000 0x00000001 0x00000001
i32x4_eq_0() => v128:0x00000001 0x00000001 0x00000001 0x00000001
i32x4_eq_1() => v128:0x00000000 0x00000000 0x00000000 0x00000000
f32x4_eq_0() => v128:0x00000001 0x00000000 0x00000001 0x00000000
f64x2_eq_0() => v128:0x00000001 0x00000000 0x00000000 0x00000000
f64x2_eq_1() => v128:0x00000001 0x00000000 0x00000000 0x00000000
;;; STDOUT ;;)
