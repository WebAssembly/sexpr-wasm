;;; TOOL: run-interp
;;; ARGS*: --enable-threads --enable-saturating-float-to-int --enable-sign-extension --enable-simd --enable-tail-call
;;; ARGS1: --trace --host-print

(module
  (import "host" "print" (func $print (param i32)))

  (type $empty (func))
  (func $empty)
  (memory 1 1 shared)
  (table anyfunc (elem $empty $empty))
  (global $g (mut i32) (i32.const 0))

  (; 0x00 ;) (func (export "unreachable") unreachable)
  (; 0x01 ;) ;; nop       -- not generated in interpreter
  (; 0x02 ;) ;; block     -- not generated in interpreter
  (; 0x03 ;) ;; loop      -- not generated in interpreter
  (; 0x04 ;) ;; if        -- not generated in interpreter
  (; 0x05 ;) ;; else      -- not generated in interpreter
  (; 0x06 ;) ;; try       -- not implemented
  (; 0x07 ;) ;; catch     -- not implemented
  (; 0x08 ;) ;; throw     -- not implemented
  (; 0x09 ;) ;; rethrow   -- not implemented
  (; 0x0a ;) ;; catch_all -- not implemented
  (; 0x0b ;) ;; end       -- not generated in interpreter
  (; 0x0c ;) (func (export "br") br 0)
  (; 0x0d ;) ;; 0x0d br_if  ;; not generated in interpreter
  (; 0x0e ;) (func (export "br_table") i32.const 1 br_table 0)
  (; 0x0f ;) (func (export "return") return)
  (; 0x10 ;) (func (export "call") call $empty)
  (; 0x11 ;) (func (export "call_indirect") i32.const 1 call_indirect (type $empty))

  ;; --enable-tail-call
  (; 0x12 ;) (func (export "return_call") return_call $empty)
  (; 0x13 ;) (func (export "return_call_indirect") i32.const 1 return_call_indirect (type $empty))

  (; 0x1a ;) (func (export "drop") i32.const 1 drop)
  (; 0x1b ;) (func (export "select") i32.const 1 i32.const 2 i32.const 3 select drop)
  (; 0x20 ;) (func (export "get_local") (local i32) get_local 0 drop)
  (; 0x21 ;) (func (export "set_local") (local i32) i32.const 1 set_local 0)
  (; 0x22 ;) (func (export "tee_local") (local i32) i32.const 1 tee_local 0 drop)
  (; 0x23 ;) (func (export "get_global") get_global 0 drop)
  (; 0x24 ;) (func (export "set_global") i32.const 1 set_global 0)
  (; 0x28 ;) (func (export "i32.load") i32.const 1 i32.load offset=2 drop)
  (; 0x29 ;) (func (export "i64.load") i32.const 1 i64.load offset=2 drop)
  (; 0x2a ;) (func (export "f32.load") i32.const 1 f32.load offset=2 drop)
  (; 0x2b ;) (func (export "f64.load") i32.const 1 f64.load offset=2 drop)
  (; 0x2c ;) (func (export "i32.load8_s") i32.const 1 i32.load8_s offset=2 drop)
  (; 0x2d ;) (func (export "i32.load8_u") i32.const 1 i32.load8_u offset=2 drop)
  (; 0x2e ;) (func (export "i32.load16_s") i32.const 1 i32.load16_s offset=2 drop)
  (; 0x2f ;) (func (export "i32.load16_u") i32.const 1 i32.load16_u offset=2 drop)
  (; 0x30 ;) (func (export "i64.load8_s") i32.const 1 i64.load8_s offset=2 drop)
  (; 0x31 ;) (func (export "i64.load8_u") i32.const 1 i64.load8_u offset=2 drop)
  (; 0x32 ;) (func (export "i64.load16_s") i32.const 1 i64.load16_s offset=2 drop)
  (; 0x33 ;) (func (export "i64.load16_u") i32.const 1 i64.load16_u offset=2 drop)
  (; 0x34 ;) (func (export "i64.load32_s") i32.const 1 i64.load32_s offset=2 drop)
  (; 0x35 ;) (func (export "i64.load32_u") i32.const 1 i64.load32_u offset=2 drop)
  (; 0x36 ;) (func (export "i32.store") i32.const 1 i32.const 2 i32.store offset=2)
  (; 0x37 ;) (func (export "i64.store") i32.const 1 i64.const 2 i64.store offset=2)
  (; 0x38 ;) (func (export "f32.store") i32.const 1 f32.const 2 f32.store offset=2)
  (; 0x39 ;) (func (export "f64.store") i32.const 1 f64.const 2 f64.store offset=2)
  (; 0x3a ;) (func (export "i32.store8") i32.const 1 i32.const 2 i32.store8 offset=2)
  (; 0x3b ;) (func (export "i32.store16") i32.const 1 i32.const 2 i32.store16 offset=2)
  (; 0x3c ;) (func (export "i64.store8") i32.const 1 i64.const 2 i64.store8 offset=2)
  (; 0x3d ;) (func (export "i64.store16") i32.const 1 i64.const 2 i64.store16 offset=2)
  (; 0x3e ;) (func (export "i64.store32") i32.const 1 i64.const 2 i64.store32 offset=2)
  (; 0x3f ;) (func (export "current_memory") current_memory drop)
  (; 0x40 ;) (func (export "grow_memory") i32.const 1 grow_memory drop)
  (; 0x41 ;) (func (export "i32.const") i32.const 1 drop)
  (; 0x42 ;) (func (export "i64.const") i64.const 1 drop)
  (; 0x43 ;) (func (export "f32.const") f32.const 1 drop)
  (; 0x44 ;) (func (export "f64.const") f64.const 1 drop)
  (; 0x45 ;) (func (export "i32.eqz") i32.const 1 i32.eqz drop)
  (; 0x46 ;) (func (export "i32.eq") i32.const 1 i32.const 2 i32.eq drop)
  (; 0x47 ;) (func (export "i32.ne") i32.const 1 i32.const 2 i32.ne drop)
  (; 0x48 ;) (func (export "i32.lt_s") i32.const 1 i32.const 2 i32.lt_s drop)
  (; 0x49 ;) (func (export "i32.lt_u") i32.const 1 i32.const 2 i32.lt_u drop)
  (; 0x4a ;) (func (export "i32.gt_s") i32.const 1 i32.const 2 i32.gt_s drop)
  (; 0x4b ;) (func (export "i32.gt_u") i32.const 1 i32.const 2 i32.gt_u drop)
  (; 0x4c ;) (func (export "i32.le_s") i32.const 1 i32.const 2 i32.le_s drop)
  (; 0x4d ;) (func (export "i32.le_u") i32.const 1 i32.const 2 i32.le_u drop)
  (; 0x4e ;) (func (export "i32.ge_s") i32.const 1 i32.const 2 i32.ge_s drop)
  (; 0x4f ;) (func (export "i32.ge_u") i32.const 1 i32.const 2 i32.ge_u drop)
  (; 0x50 ;) (func (export "i64.eqz") i64.const 1 i64.eqz drop)
  (; 0x51 ;) (func (export "i64.eq") i64.const 1 i64.const 2 i64.eq drop)
  (; 0x52 ;) (func (export "i64.ne") i64.const 1 i64.const 2 i64.ne drop)
  (; 0x53 ;) (func (export "i64.lt_s") i64.const 1 i64.const 2 i64.lt_s drop)
  (; 0x54 ;) (func (export "i64.lt_u") i64.const 1 i64.const 2 i64.lt_u drop)
  (; 0x55 ;) (func (export "i64.gt_s") i64.const 1 i64.const 2 i64.gt_s drop)
  (; 0x56 ;) (func (export "i64.gt_u") i64.const 1 i64.const 2 i64.gt_u drop)
  (; 0x57 ;) (func (export "i64.le_s") i64.const 1 i64.const 2 i64.le_s drop)
  (; 0x58 ;) (func (export "i64.le_u") i64.const 1 i64.const 2 i64.le_u drop)
  (; 0x59 ;) (func (export "i64.ge_s") i64.const 1 i64.const 2 i64.ge_s drop)
  (; 0x5a ;) (func (export "i64.ge_u") i64.const 1 i64.const 2 i64.ge_u drop)
  (; 0x5b ;) (func (export "f32.eq") f32.const 1 f32.const 2 f32.eq drop)
  (; 0x5c ;) (func (export "f32.ne") f32.const 1 f32.const 2 f32.ne drop)
  (; 0x5d ;) (func (export "f32.lt") f32.const 1 f32.const 2 f32.lt drop)
  (; 0x5e ;) (func (export "f32.gt") f32.const 1 f32.const 2 f32.gt drop)
  (; 0x5f ;) (func (export "f32.le") f32.const 1 f32.const 2 f32.le drop)
  (; 0x60 ;) (func (export "f32.ge") f32.const 1 f32.const 2 f32.ge drop)
  (; 0x61 ;) (func (export "f64.eq") f64.const 1 f64.const 2 f64.eq drop)
  (; 0x62 ;) (func (export "f64.ne") f64.const 1 f64.const 2 f64.ne drop)
  (; 0x63 ;) (func (export "f64.lt") f64.const 1 f64.const 2 f64.lt drop)
  (; 0x64 ;) (func (export "f64.gt") f64.const 1 f64.const 2 f64.gt drop)
  (; 0x65 ;) (func (export "f64.le") f64.const 1 f64.const 2 f64.le drop)
  (; 0x66 ;) (func (export "f64.ge") f64.const 1 f64.const 2 f64.ge drop)
  (; 0x67 ;) (func (export "i32.clz") i32.const 1 i32.clz drop)
  (; 0x68 ;) (func (export "i32.ctz") i32.const 1 i32.ctz drop)
  (; 0x69 ;) (func (export "i32.popcnt") i32.const 1 i32.popcnt drop)
  (; 0x6a ;) (func (export "i32.add") i32.const 1 i32.const 2 i32.add drop)
  (; 0x6b ;) (func (export "i32.sub") i32.const 1 i32.const 2 i32.sub drop)
  (; 0x6c ;) (func (export "i32.mul") i32.const 1 i32.const 2 i32.mul drop)
  (; 0x6d ;) (func (export "i32.div_s") i32.const 1 i32.const 2 i32.div_s drop)
  (; 0x6e ;) (func (export "i32.div_u") i32.const 1 i32.const 2 i32.div_u drop)
  (; 0x6f ;) (func (export "i32.rem_s") i32.const 1 i32.const 2 i32.rem_s drop)
  (; 0x70 ;) (func (export "i32.rem_u") i32.const 1 i32.const 2 i32.rem_u drop)
  (; 0x71 ;) (func (export "i32.and") i32.const 1 i32.const 2 i32.and drop)
  (; 0x72 ;) (func (export "i32.or") i32.const 1 i32.const 2 i32.or drop)
  (; 0x73 ;) (func (export "i32.xor") i32.const 1 i32.const 2 i32.xor drop)
  (; 0x74 ;) (func (export "i32.shl") i32.const 1 i32.const 2 i32.shl drop)
  (; 0x75 ;) (func (export "i32.shr_s") i32.const 1 i32.const 2 i32.shr_s drop)
  (; 0x76 ;) (func (export "i32.shr_u") i32.const 1 i32.const 2 i32.shr_u drop)
  (; 0x77 ;) (func (export "i32.rotl") i32.const 1 i32.const 2 i32.rotl drop)
  (; 0x78 ;) (func (export "i32.rotr") i32.const 1 i32.const 2 i32.rotr drop)
  (; 0x79 ;) (func (export "i64.clz") i64.const 1 i64.clz drop)
  (; 0x7a ;) (func (export "i64.ctz") i64.const 1 i64.ctz drop)
  (; 0x7b ;) (func (export "i64.popcnt") i64.const 1 i64.popcnt drop)
  (; 0x7c ;) (func (export "i64.add") i64.const 1 i64.const 2 i64.add drop)
  (; 0x7d ;) (func (export "i64.sub") i64.const 1 i64.const 2 i64.sub drop)
  (; 0x7e ;) (func (export "i64.mul") i64.const 1 i64.const 2 i64.mul drop)
  (; 0x7f ;) (func (export "i64.div_s") i64.const 1 i64.const 2 i64.div_s drop)
  (; 0x80 ;) (func (export "i64.div_u") i64.const 1 i64.const 2 i64.div_u drop)
  (; 0x81 ;) (func (export "i64.rem_s") i64.const 1 i64.const 2 i64.rem_s drop)
  (; 0x82 ;) (func (export "i64.rem_u") i64.const 1 i64.const 2 i64.rem_u drop)
  (; 0x83 ;) (func (export "i64.and") i64.const 1 i64.const 2 i64.and drop)
  (; 0x84 ;) (func (export "i64.or") i64.const 1 i64.const 2 i64.or drop)
  (; 0x85 ;) (func (export "i64.xor") i64.const 1 i64.const 2 i64.xor drop)
  (; 0x86 ;) (func (export "i64.shl") i64.const 1 i64.const 2 i64.shl drop)
  (; 0x87 ;) (func (export "i64.shr_s") i64.const 1 i64.const 2 i64.shr_s drop)
  (; 0x88 ;) (func (export "i64.shr_u") i64.const 1 i64.const 2 i64.shr_u drop)
  (; 0x89 ;) (func (export "i64.rotl") i64.const 1 i64.const 2 i64.rotl drop)
  (; 0x8a ;) (func (export "i64.rotr") i64.const 1 i64.const 2 i64.rotr drop)
  (; 0x8b ;) (func (export "f32.abs") f32.const 1 f32.abs drop)
  (; 0x8c ;) (func (export "f32.neg") f32.const 1 f32.neg drop)
  (; 0x8d ;) (func (export "f32.ceil") f32.const 1 f32.ceil drop)
  (; 0x8e ;) (func (export "f32.floor") f32.const 1 f32.floor drop)
  (; 0x8f ;) (func (export "f32.trunc") f32.const 1 f32.trunc drop)
  (; 0x90 ;) (func (export "f32.nearest") f32.const 1 f32.nearest drop)
  (; 0x91 ;) (func (export "f32.sqrt") f32.const 1 f32.sqrt drop)
  (; 0x92 ;) (func (export "f32.add") f32.const 1 f32.const 2 f32.add drop)
  (; 0x93 ;) (func (export "f32.sub") f32.const 1 f32.const 2 f32.sub drop)
  (; 0x94 ;) (func (export "f32.mul") f32.const 1 f32.const 2 f32.mul drop)
  (; 0x95 ;) (func (export "f32.div") f32.const 1 f32.const 2 f32.div drop)
  (; 0x96 ;) (func (export "f32.min") f32.const 1 f32.const 2 f32.min drop)
  (; 0x97 ;) (func (export "f32.max") f32.const 1 f32.const 2 f32.max drop)
  (; 0x98 ;) (func (export "f32.copysign") f32.const 1 f32.const 2 f32.copysign drop)
  (; 0x99 ;) (func (export "f64.abs") f64.const 1 f64.abs drop)
  (; 0x9a ;) (func (export "f64.neg") f64.const 1 f64.neg drop)
  (; 0x9b ;) (func (export "f64.ceil") f64.const 1 f64.ceil drop)
  (; 0x9c ;) (func (export "f64.floor") f64.const 1 f64.floor drop)
  (; 0x9d ;) (func (export "f64.trunc") f64.const 1 f64.trunc drop)
  (; 0x9e ;) (func (export "f64.nearest") f64.const 1 f64.nearest drop)
  (; 0x9f ;) (func (export "f64.sqrt") f64.const 1 f64.sqrt drop)
  (; 0xa0 ;) (func (export "f64.add") f64.const 1 f64.const 2 f64.add drop)
  (; 0xa1 ;) (func (export "f64.sub") f64.const 1 f64.const 2 f64.sub drop)
  (; 0xa2 ;) (func (export "f64.mul") f64.const 1 f64.const 2 f64.mul drop)
  (; 0xa3 ;) (func (export "f64.div") f64.const 1 f64.const 2 f64.div drop)
  (; 0xa4 ;) (func (export "f64.min") f64.const 1 f64.const 2 f64.min drop)
  (; 0xa5 ;) (func (export "f64.max") f64.const 1 f64.const 2 f64.max drop)
  (; 0xa6 ;) (func (export "f64.copysign") f64.const 1 f64.const 2 f64.copysign drop)
  (; 0xa7 ;) (func (export "i32.wrap/i64") i64.const 1 i32.wrap/i64 drop)
  (; 0xa8 ;) (func (export "i32.trunc_s/f32") f32.const 1 i32.trunc_s/f32 drop)
  (; 0xa9 ;) (func (export "i32.trunc_u/f32") f32.const 1 i32.trunc_u/f32 drop)
  (; 0xaa ;) (func (export "i32.trunc_s/f64") f64.const 1 i32.trunc_s/f64 drop)
  (; 0xab ;) (func (export "i32.trunc_u/f64") f64.const 1 i32.trunc_u/f64 drop)
  (; 0xac ;) (func (export "i64.extend_s/i32") i32.const 1 i64.extend_s/i32 drop)
  (; 0xad ;) (func (export "i64.extend_u/i32") i32.const 1 i64.extend_u/i32 drop)
  (; 0xae ;) (func (export "i64.trunc_s/f32") f32.const 1 i64.trunc_s/f32 drop)
  (; 0xaf ;) (func (export "i64.trunc_u/f32") f32.const 1 i64.trunc_u/f32 drop)
  (; 0xb0 ;) (func (export "i64.trunc_s/f64") f64.const 1 i64.trunc_s/f64 drop)
  (; 0xb1 ;) (func (export "i64.trunc_u/f64") f64.const 1 i64.trunc_u/f64 drop)
  (; 0xb2 ;) (func (export "f32.convert_s/i32") i32.const 1 f32.convert_s/i32 drop)
  (; 0xb3 ;) (func (export "f32.convert_u/i32") i32.const 1 f32.convert_u/i32 drop)
  (; 0xb4 ;) (func (export "f32.convert_s/i64") i64.const 1 f32.convert_s/i64 drop)
  (; 0xb5 ;) (func (export "f32.convert_u/i64") i64.const 1 f32.convert_u/i64 drop)
  (; 0xb6 ;) (func (export "f32.demote/f64") f64.const 1 f32.demote/f64 drop)
  (; 0xb7 ;) (func (export "f64.convert_s/i32") i32.const 1 f64.convert_s/i32 drop)
  (; 0xb8 ;) (func (export "f64.convert_u/i32") i32.const 1 f64.convert_u/i32 drop)
  (; 0xb9 ;) (func (export "f64.convert_s/i64") i64.const 1 f64.convert_s/i64 drop)
  (; 0xba ;) (func (export "f64.convert_u/i64") i64.const 1 f64.convert_u/i64 drop)
  (; 0xbb ;) (func (export "f64.promote/f32") f32.const 1 f64.promote/f32 drop)
  (; 0xbc ;) (func (export "i32.reinterpret/f32") i32.const 1 f32.reinterpret/i32 drop)
  (; 0xbd ;) (func (export "f32.reinterpret/i32") f32.const 1 i32.reinterpret/f32 drop)
  (; 0xbe ;) (func (export "i64.reinterpret/f64") i64.const 1 f64.reinterpret/i64 drop)
  (; 0xbf ;) (func (export "f64.reinterpret/i64") f64.const 1 i64.reinterpret/f64 drop)

  ;; --enable-sign-extension
  (; 0xc0 ;) (func (export "i32.extend8_s") i32.const 1 i32.extend8_s drop)
  (; 0xc1 ;) (func (export "i32.extend16_s") i32.const 1 i32.extend16_s drop)
  (; 0xc2 ;) (func (export "i64.extend8_s") i64.const 1 i64.extend8_s drop)
  (; 0xc3 ;) (func (export "i64.extend16_s") i64.const 1 i64.extend16_s drop)
  (; 0xc4 ;) (func (export "i64.extend32_s") i64.const 1 i64.extend32_s drop)

  ;; Interpreter opcodes
  (; 0xe0 ;) (func (export "alloca") (local i32))
  (; 0xe1 ;) (func (export "br_unless") i32.const 1 br_if 0)
  (; 0xe2 ;) (func (export "call_host") i32.const 1 call $print)
  (; 0xe3 ;) ;; data  -- never executed
  (; 0xe4 ;) (func (export "drop_keep") block (result i32) i32.const 1 i32.const 2 br 0 end drop)

  ;; --enable-saturating-float-to-int
  (; 0xfc 0x00 ;) (func (export "i32.trunc_s:sat/f32") f32.const 1 i32.trunc_s:sat/f32 drop)
  (; 0xfc 0x01 ;) (func (export "i32.trunc_u:sat/f32") f32.const 1 i32.trunc_u:sat/f32 drop)
  (; 0xfc 0x02 ;) (func (export "i32.trunc_s:sat/f64") f64.const 1 i32.trunc_s:sat/f64 drop)
  (; 0xfc 0x03 ;) (func (export "i32.trunc_u:sat/f64") f64.const 1 i32.trunc_u:sat/f64 drop)
  (; 0xfc 0x04 ;) (func (export "i64.trunc_s:sat/f32") f32.const 1 i64.trunc_s:sat/f32 drop)
  (; 0xfc 0x05 ;) (func (export "i64.trunc_u:sat/f32") f32.const 1 i64.trunc_u:sat/f32 drop)
  (; 0xfc 0x06 ;) (func (export "i64.trunc_s:sat/f64") f64.const 1 i64.trunc_s:sat/f64 drop)
  (; 0xfc 0x07 ;) (func (export "i64.trunc_u:sat/f64") f64.const 1 i64.trunc_u:sat/f64 drop)

  ;; --enable-simd
  (; 0xfd 0x00 ;) (func (export "v128.load") i32.const 1 v128.load offset=3 drop)
  (; 0xfd 0x01 ;) (func (export "v128.store") i32.const 1 v128.const i32 1 1 1 1 v128.store offset=3)
  (; 0xfd 0x02 ;) (func (export "v128.const") v128.const i32 1 1 1 1 drop)
  (; 0xfd 0x03 ;) (func (export "v8x16.shuffle") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 v8x16.shuffle 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 drop)
  (; 0xfd 0x04 ;) (func (export "i8x16.splat") i32.const 1 i8x16.splat drop)
  (; 0xfd 0x05 ;) (func (export "i8x16.extract_lane_s") v128.const i32 1 1 1 1 i8x16.extract_lane_s 15 drop)
  (; 0xfd 0x06 ;) (func (export "i8x16.extract_lane_u") v128.const i32 1 1 1 1 i8x16.extract_lane_u 15 drop)
  (; 0xfd 0x07 ;) (func (export "i8x16.replace_lane") v128.const i32 1 1 1 1 i32.const 0 i8x16.replace_lane 15 drop)
  (; 0xfd 0x08 ;) (func (export "i16x8.splat") i32.const 1 i16x8.splat drop)
  (; 0xfd 0x09 ;) (func (export "i16x8.extract_lane_s") v128.const i32 1 1 1 1 i16x8.extract_lane_s 7 drop)
  (; 0xfd 0x0a ;) (func (export "i16x8.extract_lane_u") v128.const i32 1 1 1 1 i16x8.extract_lane_u 7 drop)
  (; 0xfd 0x0b ;) (func (export "i16x8.replace_lane") v128.const i32 1 1 1 1 i32.const 0 i16x8.replace_lane 7 drop)
  (; 0xfd 0x0c ;) (func (export "i32x4.splat") i32.const 1 i32x4.splat drop)
  (; 0xfd 0x0d ;) (func (export "i32x4.extract_lane") v128.const i32 1 1 1 1 i32x4.extract_lane 3 drop)
  (; 0xfd 0x0e ;) (func (export "i32x4.replace_lane") v128.const i32 1 1 1 1 i32.const 0 i32x4.replace_lane 3 drop)
  (; 0xfd 0x0f ;) (func (export "i64x2.splat") i64.const 1 i64x2.splat drop)
  (; 0xfd 0x10 ;) (func (export "i64x2.extract_lane") v128.const i32 1 1 1 1 i64x2.extract_lane 1 drop)
  (; 0xfd 0x11 ;) (func (export "i64x2.replace_lane") v128.const i32 1 1 1 1 i64.const 0 i64x2.replace_lane 1 drop)
  (; 0xfd 0x12 ;) (func (export "f32x4.splat") f32.const 1 f32x4.splat drop)
  (; 0xfd 0x13 ;) (func (export "f32x4.extract_lane") v128.const i32 1 1 1 1 f32x4.extract_lane 3 drop)
  (; 0xfd 0x14 ;) (func (export "f32x4.replace_lane") v128.const i32 1 1 1 1 f32.const 0 f32x4.replace_lane 3 drop)
  (; 0xfd 0x15 ;) (func (export "f64x2.splat") f64.const 1 f64x2.splat drop)
  (; 0xfd 0x16 ;) (func (export "f64x2.extract_lane") v128.const i32 1 1 1 1 f64x2.extract_lane 1 drop)
  (; 0xfd 0x17 ;) (func (export "f64x2.replace_lane") v128.const i32 1 1 1 1 f64.const 0 f64x2.replace_lane 1 drop)
  (; 0xfd 0x18 ;) (func (export "i8x16.eq") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.eq drop)
  (; 0xfd 0x19 ;) (func (export "i8x16.ne") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.ne drop)
  (; 0xfd 0x1a ;) (func (export "i8x16.lt_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.lt_s drop)
  (; 0xfd 0x1b ;) (func (export "i8x16.lt_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.lt_u drop)
  (; 0xfd 0x1c ;) (func (export "i8x16.gt_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.gt_s drop)
  (; 0xfd 0x1d ;) (func (export "i8x16.gt_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.gt_u drop)
  (; 0xfd 0x1e ;) (func (export "i8x16.le_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.le_s drop)
  (; 0xfd 0x1f ;) (func (export "i8x16.le_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.le_u drop)
  (; 0xfd 0x20 ;) (func (export "i8x16.ge_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.ge_s drop)
  (; 0xfd 0x21 ;) (func (export "i8x16.ge_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.ge_u drop)
  (; 0xfd 0x22 ;) (func (export "i16x8.eq") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.eq drop)
  (; 0xfd 0x23 ;) (func (export "i16x8.ne") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.ne drop)
  (; 0xfd 0x24 ;) (func (export "i16x8.lt_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.lt_s drop)
  (; 0xfd 0x25 ;) (func (export "i16x8.lt_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.lt_u drop)
  (; 0xfd 0x26 ;) (func (export "i16x8.gt_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.gt_s drop)
  (; 0xfd 0x27 ;) (func (export "i16x8.gt_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.gt_u drop)
  (; 0xfd 0x28 ;) (func (export "i16x8.le_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.le_s drop)
  (; 0xfd 0x29 ;) (func (export "i16x8.le_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.le_u drop)
  (; 0xfd 0x2a ;) (func (export "i16x8.ge_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.ge_s drop)
  (; 0xfd 0x2b ;) (func (export "i16x8.ge_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.ge_u drop)
  (; 0xfd 0x2c ;) (func (export "i32x4.eq") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.eq drop)
  (; 0xfd 0x2d ;) (func (export "i32x4.ne") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.ne drop)
  (; 0xfd 0x2e ;) (func (export "i32x4.lt_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.lt_s drop)
  (; 0xfd 0x2f ;) (func (export "i32x4.lt_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.lt_u drop)
  (; 0xfd 0x30 ;) (func (export "i32x4.gt_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.gt_s drop)
  (; 0xfd 0x31 ;) (func (export "i32x4.gt_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.gt_u drop)
  (; 0xfd 0x32 ;) (func (export "i32x4.le_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.le_s drop)
  (; 0xfd 0x33 ;) (func (export "i32x4.le_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.le_u drop)
  (; 0xfd 0x34 ;) (func (export "i32x4.ge_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.ge_s drop)
  (; 0xfd 0x35 ;) (func (export "i32x4.ge_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.ge_u drop)
  (; 0xfd 0x40 ;) (func (export "f32x4.eq") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.eq drop)
  (; 0xfd 0x41 ;) (func (export "f32x4.ne") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.ne drop)
  (; 0xfd 0x42 ;) (func (export "f32x4.lt") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.lt drop)
  (; 0xfd 0x43 ;) (func (export "f32x4.gt") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.gt drop)
  (; 0xfd 0x44 ;) (func (export "f32x4.le") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.le drop)
  (; 0xfd 0x45 ;) (func (export "f32x4.ge") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.ge drop)
  (; 0xfd 0x46 ;) (func (export "f64x2.eq") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.eq drop)
  (; 0xfd 0x47 ;) (func (export "f64x2.ne") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.ne drop)
  (; 0xfd 0x48 ;) (func (export "f64x2.lt") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.lt drop)
  (; 0xfd 0x49 ;) (func (export "f64x2.gt") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.gt drop)
  (; 0xfd 0x4a ;) (func (export "f64x2.le") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.le drop)
  (; 0xfd 0x4b ;) (func (export "f64x2.ge") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.ge drop)
  (; 0xfd 0x4c ;) (func (export "v128.not") v128.const i32 1 1 1 1 v128.not drop)
  (; 0xfd 0x4d ;) (func (export "v128.and") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 v128.and drop)
  (; 0xfd 0x4e ;) (func (export "v128.or") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 v128.or drop)
  (; 0xfd 0x4f ;) (func (export "v128.xor") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 v128.xor drop)
  (; 0xfd 0x50 ;) (func (export "v128.bitselect") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 v128.const i32 3 3 3 3 v128.bitselect drop)
  (; 0xfd 0x51 ;) (func (export "i8x16.neg") v128.const i32 1 1 1 1 i8x16.neg drop)
  (; 0xfd 0x52 ;) (func (export "i8x16.any_true") v128.const i32 1 1 1 1 i8x16.any_true drop)
  (; 0xfd 0x53 ;) (func (export "i8x16.all_true") v128.const i32 1 1 1 1 i8x16.all_true drop)
  (; 0xfd 0x54 ;) (func (export "i8x16.shl") v128.const i32 1 1 1 1 i32.const 0 i8x16.shl drop)
  (; 0xfd 0x55 ;) (func (export "i8x16.shr_s") v128.const i32 1 1 1 1 i32.const 0 i8x16.shr_s drop)
  (; 0xfd 0x56 ;) (func (export "i8x16.shr_u") v128.const i32 1 1 1 1 i32.const 0 i8x16.shr_u drop)
  (; 0xfd 0x57 ;) (func (export "i8x16.add") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.add drop)
  (; 0xfd 0x58 ;) (func (export "i8x16.add_saturate_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.add_saturate_s drop)
  (; 0xfd 0x59 ;) (func (export "i8x16.add_saturate_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.add_saturate_u drop)
  (; 0xfd 0x5a ;) (func (export "i8x16.sub") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.sub drop)
  (; 0xfd 0x5b ;) (func (export "i8x16.sub_saturate_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.sub_saturate_s drop)
  (; 0xfd 0x5c ;) (func (export "i8x16.sub_saturate_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.sub_saturate_u drop)
  (; 0xfd 0x5d ;) (func (export "i8x16.mul") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.mul drop)
  (; 0xfd 0x62 ;) (func (export "i16x8.neg") v128.const i32 1 1 1 1 i16x8.neg drop)
  (; 0xfd 0x63 ;) (func (export "i16x8.any_true") v128.const i32 1 1 1 1 i16x8.any_true drop)
  (; 0xfd 0x64 ;) (func (export "i16x8.all_true") v128.const i32 1 1 1 1 i16x8.all_true drop)
  (; 0xfd 0x65 ;) (func (export "i16x8.shl") v128.const i32 1 1 1 1 i32.const 0 i16x8.shl drop)
  (; 0xfd 0x66 ;) (func (export "i16x8.shr_s") v128.const i32 1 1 1 1 i32.const 0 i16x8.shr_s drop)
  (; 0xfd 0x67 ;) (func (export "i16x8.shr_u") v128.const i32 1 1 1 1 i32.const 0 i16x8.shr_u drop)
  (; 0xfd 0x68 ;) (func (export "i16x8.add") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.add drop)
  (; 0xfd 0x69 ;) (func (export "i16x8.add_saturate_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.add_saturate_s drop)
  (; 0xfd 0x6a ;) (func (export "i16x8.add_saturate_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.add_saturate_u drop)
  (; 0xfd 0x6b ;) (func (export "i16x8.sub") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.sub drop)
  (; 0xfd 0x6c ;) (func (export "i16x8.sub_saturate_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.sub_saturate_s drop)
  (; 0xfd 0x6d ;) (func (export "i16x8.sub_saturate_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.sub_saturate_u drop)
  (; 0xfd 0x6e ;) (func (export "i16x8.mul") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.mul drop)
  (; 0xfd 0x73 ;) (func (export "i32x4.neg") v128.const i32 1 1 1 1 i32x4.neg drop)
  (; 0xfd 0x74 ;) (func (export "i32x4.any_true") v128.const i32 1 1 1 1 i32x4.any_true drop)
  (; 0xfd 0x75 ;) (func (export "i32x4.all_true") v128.const i32 1 1 1 1 i32x4.all_true drop)
  (; 0xfd 0x76 ;) (func (export "i32x4.shl") v128.const i32 1 1 1 1 i32.const 0 i32x4.shl drop)
  (; 0xfd 0x77 ;) (func (export "i32x4.shr_s") v128.const i32 1 1 1 1 i32.const 0 i32x4.shr_s drop)
  (; 0xfd 0x78 ;) (func (export "i32x4.shr_u") v128.const i32 1 1 1 1 i32.const 0 i32x4.shr_u drop)
  (; 0xfd 0x79 ;) (func (export "i32x4.add") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.add drop)
  (; 0xfd 0x7c ;) (func (export "i32x4.sub") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.sub drop)
  (; 0xfd 0x7f ;) (func (export "i32x4.mul") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.mul drop)
  (; 0xfd 0x84 ;) (func (export "i64x2.neg") v128.const i32 1 1 1 1 i64x2.neg drop)
  (; 0xfd 0x85 ;) (func (export "i64x2.any_true") v128.const i32 1 1 1 1 i64x2.any_true drop)
  (; 0xfd 0x86 ;) (func (export "i64x2.all_true") v128.const i32 1 1 1 1 i64x2.all_true drop)
  (; 0xfd 0x87 ;) (func (export "i64x2.shl") v128.const i32 1 1 1 1 i32.const 0 i64x2.shl drop)
  (; 0xfd 0x88 ;) (func (export "i64x2.shr_s") v128.const i32 1 1 1 1 i32.const 0 i64x2.shr_s drop)
  (; 0xfd 0x89 ;) (func (export "i64x2.shr_u") v128.const i32 1 1 1 1 i32.const 0 i64x2.shr_u drop)
  (; 0xfd 0x8a ;) (func (export "i64x2.add") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i64x2.add drop)
  (; 0xfd 0x8d ;) (func (export "i64x2.sub") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i64x2.sub drop)
  (; 0xfd 0x95 ;) (func (export "f32x4.abs") v128.const i32 1 1 1 1 f32x4.abs drop)
  (; 0xfd 0x96 ;) (func (export "f32x4.neg") v128.const i32 1 1 1 1 f32x4.neg drop)
  (; 0xfd 0x97 ;) (func (export "f32x4.sqrt") v128.const i32 1 1 1 1 f32x4.sqrt drop)
  (; 0xfd 0x9a ;) (func (export "f32x4.add") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.add drop)
  (; 0xfd 0x9b ;) (func (export "f32x4.sub") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.sub drop)
  (; 0xfd 0x9c ;) (func (export "f32x4.mul") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.mul drop)
  (; 0xfd 0x9d ;) (func (export "f32x4.div") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.div drop)
  (; 0xfd 0x9e ;) (func (export "f32x4.min") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.min drop)
  (; 0xfd 0x9f ;) (func (export "f32x4.max") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.max drop)
  (; 0xfd 0xa0 ;) (func (export "f64x2.abs") v128.const i32 1 1 1 1 f64x2.abs drop)
  (; 0xfd 0xa1 ;) (func (export "f64x2.neg") v128.const i32 1 1 1 1 f64x2.neg drop)
  (; 0xfd 0xa2 ;) (func (export "f64x2.sqrt") v128.const i32 1 1 1 1 f64x2.sqrt drop)
  (; 0xfd 0xa5 ;) (func (export "f64x2.add") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.add drop)
  (; 0xfd 0xa6 ;) (func (export "f64x2.sub") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.sub drop)
  (; 0xfd 0xa7 ;) (func (export "f64x2.mul") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.mul drop)
  (; 0xfd 0xa8 ;) (func (export "f64x2.div") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.div drop)
  (; 0xfd 0xa9 ;) (func (export "f64x2.min") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.min drop)
  (; 0xfd 0xaa ;) (func (export "f64x2.max") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.max drop)
  (; 0xfd 0xab ;) (func (export "i32x4.trunc_sat_f32x4_s") v128.const i32 1 1 1 1 i32x4.trunc_sat_f32x4_s drop)
  (; 0xfd 0xac ;) (func (export "i32x4.trunc_sat_f32x4_u") v128.const i32 1 1 1 1 i32x4.trunc_sat_f32x4_u drop)
  (; 0xfd 0xad ;) (func (export "i64x2.trunc_sat_f64x2_s") v128.const i32 1 1 1 1 i64x2.trunc_sat_f64x2_s drop)
  (; 0xfd 0xae ;) (func (export "i64x2.trunc_sat_f64x2_u") v128.const i32 1 1 1 1 i64x2.trunc_sat_f64x2_u drop)
  (; 0xfd 0xaf ;) (func (export "f32x4.convert_i32x4_s") v128.const i32 1 1 1 1 f32x4.convert_i32x4_s drop)
  (; 0xfd 0xb0 ;) (func (export "f32x4.convert_i32x4_u") v128.const i32 1 1 1 1 f32x4.convert_i32x4_u drop)
  (; 0xfd 0xb1 ;) (func (export "f64x2.convert_i64x2_s") v128.const i32 1 1 1 1 f64x2.convert_i64x2_s drop)
  (; 0xfd 0xb2 ;) (func (export "f64x2.convert_i64x2_u") v128.const i32 1 1 1 1 f64x2.convert_i64x2_u drop)

  ;; --enable-threads
  (; 0xfe 0x00 ;) (func (export "atomic.notify") i32.const 1 i32.const 2 atomic.notify offset=3 drop)
  (; 0xfe 0x01 ;) (func (export "i32.atomic.wait") i32.const 1 i32.const 2 i64.const 3 i32.atomic.wait offset=3 drop)
  (; 0xfe 0x02 ;) (func (export "i64.atomic.wait") i32.const 1 i64.const 2 i64.const 3 i64.atomic.wait offset=3 drop)
  (; 0xfe 0x10 ;) (func (export "i32.atomic.load") i32.const 1 i32.atomic.load offset=3 drop)
  (; 0xfe 0x11 ;) (func (export "i64.atomic.load") i32.const 1 i64.atomic.load offset=7 drop)
  (; 0xfe 0x12 ;) (func (export "i32.atomic.load8_u") i32.const 1 i32.atomic.load8_u offset=3 drop)
  (; 0xfe 0x13 ;) (func (export "i32.atomic.load16_u") i32.const 1 i32.atomic.load16_u offset=3 drop)
  (; 0xfe 0x14 ;) (func (export "i64.atomic.load8_u") i32.const 1 i64.atomic.load8_u offset=3 drop)
  (; 0xfe 0x15 ;) (func (export "i64.atomic.load16_u") i32.const 1 i64.atomic.load16_u offset=3 drop)
  (; 0xfe 0x16 ;) (func (export "i64.atomic.load32_u") i32.const 1 i64.atomic.load32_u offset=3 drop)
  (; 0xfe 0x17 ;) (func (export "i32.atomic.store") i32.const 1 i32.const 2 i32.atomic.store offset=3)
  (; 0xfe 0x18 ;) (func (export "i64.atomic.store") i32.const 1 i64.const 2 i64.atomic.store offset=7)
  (; 0xfe 0x19 ;) (func (export "i32.atomic.store8") i32.const 1 i32.const 2 i32.atomic.store8 offset=3)
  (; 0xfe 0x1a ;) (func (export "i32.atomic.store16") i32.const 1 i32.const 2 i32.atomic.store16 offset=3)
  (; 0xfe 0x1b ;) (func (export "i64.atomic.store8") i32.const 1 i64.const 2 i64.atomic.store8 offset=3)
  (; 0xfe 0x1c ;) (func (export "i64.atomic.store16") i32.const 1 i64.const 2 i64.atomic.store16 offset=3)
  (; 0xfe 0x1d ;) (func (export "i64.atomic.store32") i32.const 1 i64.const 2 i64.atomic.store32 offset=3)
  (; 0xfe 0x1e ;) (func (export "i32.atomic.rmw.add") i32.const 1 i32.const 2 i32.atomic.rmw.add offset=3 drop)
  (; 0xfe 0x1f ;) (func (export "i64.atomic.rmw.add") i32.const 1 i64.const 2 i64.atomic.rmw.add offset=7 drop)
  (; 0xfe 0x20 ;) (func (export "i32.atomic.rmw8.add_u") i32.const 1 i32.const 2 i32.atomic.rmw8.add_u offset=3 drop)
  (; 0xfe 0x21 ;) (func (export "i32.atomic.rmw16.add_u") i32.const 1 i32.const 2 i32.atomic.rmw16.add_u offset=3 drop)
  (; 0xfe 0x22 ;) (func (export "i64.atomic.rmw8.add_u") i32.const 1 i64.const 2 i64.atomic.rmw8.add_u offset=3 drop)
  (; 0xfe 0x23 ;) (func (export "i64.atomic.rmw16.add_u") i32.const 1 i64.const 2 i64.atomic.rmw16.add_u offset=3 drop)
  (; 0xfe 0x24 ;) (func (export "i64.atomic.rmw32.add_u") i32.const 1 i64.const 2 i64.atomic.rmw32.add_u offset=3 drop)
  (; 0xfe 0x25 ;) (func (export "i32.atomic.rmw.sub") i32.const 1 i32.const 2 i32.atomic.rmw.sub offset=3 drop)
  (; 0xfe 0x26 ;) (func (export "i64.atomic.rmw.sub") i32.const 1 i64.const 2 i64.atomic.rmw.sub offset=7 drop)
  (; 0xfe 0x27 ;) (func (export "i32.atomic.rmw8.sub_u") i32.const 1 i32.const 2 i32.atomic.rmw8.sub_u offset=3 drop)
  (; 0xfe 0x28 ;) (func (export "i32.atomic.rmw16.sub_u") i32.const 1 i32.const 2 i32.atomic.rmw16.sub_u offset=3 drop)
  (; 0xfe 0x29 ;) (func (export "i64.atomic.rmw8.sub_u") i32.const 1 i64.const 2 i64.atomic.rmw8.sub_u offset=3 drop)
  (; 0xfe 0x2a ;) (func (export "i64.atomic.rmw16.sub_u") i32.const 1 i64.const 2 i64.atomic.rmw16.sub_u offset=3 drop)
  (; 0xfe 0x2b ;) (func (export "i64.atomic.rmw32.sub_u") i32.const 1 i64.const 2 i64.atomic.rmw32.sub_u offset=3 drop)
  (; 0xfe 0x2c ;) (func (export "i32.atomic.rmw.and") i32.const 1 i32.const 2 i32.atomic.rmw.and offset=3 drop)
  (; 0xfe 0x2d ;) (func (export "i64.atomic.rmw.and") i32.const 1 i64.const 2 i64.atomic.rmw.and offset=7 drop)
  (; 0xfe 0x2e ;) (func (export "i32.atomic.rmw8.and_u") i32.const 1 i32.const 2 i32.atomic.rmw8.and_u offset=3 drop)
  (; 0xfe 0x2f ;) (func (export "i32.atomic.rmw16.and_u") i32.const 1 i32.const 2 i32.atomic.rmw16.and_u offset=3 drop)
  (; 0xfe 0x30 ;) (func (export "i64.atomic.rmw8.and_u") i32.const 1 i64.const 2 i64.atomic.rmw8.and_u offset=3 drop)
  (; 0xfe 0x31 ;) (func (export "i64.atomic.rmw16.and_u") i32.const 1 i64.const 2 i64.atomic.rmw16.and_u offset=3 drop)
  (; 0xfe 0x32 ;) (func (export "i64.atomic.rmw32.and_u") i32.const 1 i64.const 2 i64.atomic.rmw32.and_u offset=3 drop)
  (; 0xfe 0x33 ;) (func (export "i32.atomic.rmw.or") i32.const 1 i32.const 2 i32.atomic.rmw.or offset=3 drop)
  (; 0xfe 0x34 ;) (func (export "i64.atomic.rmw.or") i32.const 1 i64.const 2 i64.atomic.rmw.or offset=7 drop)
  (; 0xfe 0x35 ;) (func (export "i32.atomic.rmw8.or_u") i32.const 1 i32.const 2 i32.atomic.rmw8.or_u offset=3 drop)
  (; 0xfe 0x36 ;) (func (export "i32.atomic.rmw16.or_u") i32.const 1 i32.const 2 i32.atomic.rmw16.or_u offset=3 drop)
  (; 0xfe 0x37 ;) (func (export "i64.atomic.rmw8.or_u") i32.const 1 i64.const 2 i64.atomic.rmw8.or_u offset=3 drop)
  (; 0xfe 0x38 ;) (func (export "i64.atomic.rmw16.or_u") i32.const 1 i64.const 2 i64.atomic.rmw16.or_u offset=3 drop)
  (; 0xfe 0x39 ;) (func (export "i64.atomic.rmw32.or_u") i32.const 1 i64.const 2 i64.atomic.rmw32.or_u offset=3 drop)
  (; 0xfe 0x3a ;) (func (export "i32.atomic.rmw.xor") i32.const 1 i32.const 2 i32.atomic.rmw.xor offset=3 drop)
  (; 0xfe 0x3b ;) (func (export "i64.atomic.rmw.xor") i32.const 1 i64.const 2 i64.atomic.rmw.xor offset=7 drop)
  (; 0xfe 0x3c ;) (func (export "i32.atomic.rmw8.xor_u") i32.const 1 i32.const 2 i32.atomic.rmw8.xor_u offset=3 drop)
  (; 0xfe 0x3d ;) (func (export "i32.atomic.rmw16.xor_u") i32.const 1 i32.const 2 i32.atomic.rmw16.xor_u offset=3 drop)
  (; 0xfe 0x3e ;) (func (export "i64.atomic.rmw8.xor_u") i32.const 1 i64.const 2 i64.atomic.rmw8.xor_u offset=3 drop)
  (; 0xfe 0x3f ;) (func (export "i64.atomic.rmw16.xor_u") i32.const 1 i64.const 2 i64.atomic.rmw16.xor_u offset=3 drop)
  (; 0xfe 0x40 ;) (func (export "i64.atomic.rmw32.xor_u") i32.const 1 i64.const 2 i64.atomic.rmw32.xor_u offset=3 drop)
  (; 0xfe 0x41 ;) (func (export "i32.atomic.rmw.xchg") i32.const 1 i32.const 2 i32.atomic.rmw.xchg offset=3 drop)
  (; 0xfe 0x42 ;) (func (export "i64.atomic.rmw.xchg") i32.const 1 i64.const 2 i64.atomic.rmw.xchg offset=7 drop)
  (; 0xfe 0x43 ;) (func (export "i32.atomic.rmw8.xchg_u") i32.const 1 i32.const 2 i32.atomic.rmw8.xchg_u offset=3 drop)
  (; 0xfe 0x44 ;) (func (export "i32.atomic.rmw16.xchg_u") i32.const 1 i32.const 2 i32.atomic.rmw16.xchg_u offset=3 drop)
  (; 0xfe 0x45 ;) (func (export "i64.atomic.rmw8.xchg_u") i32.const 1 i64.const 2 i64.atomic.rmw8.xchg_u offset=3 drop)
  (; 0xfe 0x46 ;) (func (export "i64.atomic.rmw16.xchg_u") i32.const 1 i64.const 2 i64.atomic.rmw16.xchg_u offset=3 drop)
  (; 0xfe 0x47 ;) (func (export "i64.atomic.rmw32.xchg_u") i32.const 1 i64.const 2 i64.atomic.rmw32.xchg_u offset=3 drop)

  (; 0xfe 0x48 ;) (func (export "i32.atomic.rmw.cmpxchg") i32.const 1 i32.const 2 i32.const 3 i32.atomic.rmw.cmpxchg offset=3 drop)
  (; 0xfe 0x49 ;) (func (export "i64.atomic.rmw.cmpxchg") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw.cmpxchg offset=7 drop)
  (; 0xfe 0x4a ;) (func (export "i32.atomic.rmw8.cmpxchg_u") i32.const 1 i32.const 2 i32.const 3 i32.atomic.rmw8.cmpxchg_u offset=3 drop)
  (; 0xfe 0x4b ;) (func (export "i32.atomic.rmw16.cmpxchg_u") i32.const 1 i32.const 2 i32.const 3 i32.atomic.rmw16.cmpxchg_u offset=3 drop)
  (; 0xfe 0x4c ;) (func (export "i64.atomic.rmw8.cmpxchg_u") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw8.cmpxchg_u offset=3 drop)
  (; 0xfe 0x4d ;) (func (export "i64.atomic.rmw16.cmpxchg_u") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw16.cmpxchg_u offset=3 drop)
  (; 0xfe 0x4e ;) (func (export "i64.atomic.rmw32.cmpxchg_u") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw32.cmpxchg_u offset=3 drop)
)
(;; STDOUT ;;;
>>> running export "unreachable":
#0.    4: V:0  | unreachable
unreachable() => error: unreachable executed
>>> running export "br":
#0.   12: V:0  | br @20
#0.   20: V:0  | return
br() =>
>>> running export "br_table":
#0.   24: V:0  | i32.const 1
#0.   32: V:1  | br_table 1, $#0, table:$52
#0.   64: V:0  | return
br_table() =>
>>> running export "return":
#0.   68: V:0  | return
return() =>
>>> running export "call":
#0.   76: V:0  | call @0
#1.    0: V:0  | return
#0.   84: V:0  | return
call() =>
>>> running export "call_indirect":
#0.   88: V:0  | i32.const 1
#0.   96: V:1  | call_indirect $0, 1
#1.    0: V:0  | return
#0.  108: V:0  | return
call_indirect() =>
>>> running export "return_call":
#0.  112: V:0  | return_call @0
#0.    0: V:0  | return
return_call() =>
>>> running export "return_call_indirect":
#0.  124: V:0  | i32.const 1
#0.  132: V:1  | return_call_indirect $0, 1
#0.    0: V:0  | return
return_call_indirect() =>
>>> running export "drop":
#0.  148: V:0  | i32.const 1
#0.  156: V:1  | drop
#0.  160: V:0  | return
drop() =>
>>> running export "select":
#0.  164: V:0  | i32.const 1
#0.  172: V:1  | i32.const 2
#0.  180: V:2  | i32.const 3
#0.  188: V:3  | select 1, %[-2], %[-1]
#0.  192: V:1  | drop
#0.  196: V:0  | return
select() =>
>>> running export "get_local":
#0.  200: V:0  | alloca $1
#0.  208: V:1  | local.get $1
#0.  216: V:2  | drop
#0.  220: V:1  | drop
#0.  224: V:0  | return
get_local() =>
>>> running export "set_local":
#0.  228: V:0  | alloca $1
#0.  236: V:1  | i32.const 1
#0.  244: V:2  | local.set $1, 1
#0.  252: V:1  | drop
#0.  256: V:0  | return
set_local() =>
>>> running export "tee_local":
#0.  260: V:0  | alloca $1
#0.  268: V:1  | i32.const 1
#0.  276: V:2  | local.tee $2, 1
#0.  284: V:2  | drop
#0.  288: V:1  | drop
#0.  292: V:0  | return
tee_local() =>
>>> running export "get_global":
#0.  296: V:0  | global.get $0
#0.  304: V:1  | drop
#0.  308: V:0  | return
get_global() =>
>>> running export "set_global":
#0.  312: V:0  | i32.const 1
#0.  320: V:1  | global.set $0, 1
#0.  328: V:0  | return
set_global() =>
>>> running export "i32.load":
#0.  332: V:0  | i32.const 1
#0.  340: V:1  | i32.load $0:1+$2
#0.  352: V:1  | drop
#0.  356: V:0  | return
i32.load() =>
>>> running export "i64.load":
#0.  360: V:0  | i32.const 1
#0.  368: V:1  | i64.load $0:1+$2
#0.  380: V:1  | drop
#0.  384: V:0  | return
i64.load() =>
>>> running export "f32.load":
#0.  388: V:0  | i32.const 1
#0.  396: V:1  | f32.load $0:1+$2
#0.  408: V:1  | drop
#0.  412: V:0  | return
f32.load() =>
>>> running export "f64.load":
#0.  416: V:0  | i32.const 1
#0.  424: V:1  | f64.load $0:1+$2
#0.  436: V:1  | drop
#0.  440: V:0  | return
f64.load() =>
>>> running export "i32.load8_s":
#0.  444: V:0  | i32.const 1
#0.  452: V:1  | i32.load8_s $0:1+$2
#0.  464: V:1  | drop
#0.  468: V:0  | return
i32.load8_s() =>
>>> running export "i32.load8_u":
#0.  472: V:0  | i32.const 1
#0.  480: V:1  | i32.load8_u $0:1+$2
#0.  492: V:1  | drop
#0.  496: V:0  | return
i32.load8_u() =>
>>> running export "i32.load16_s":
#0.  500: V:0  | i32.const 1
#0.  508: V:1  | i32.load16_s $0:1+$2
#0.  520: V:1  | drop
#0.  524: V:0  | return
i32.load16_s() =>
>>> running export "i32.load16_u":
#0.  528: V:0  | i32.const 1
#0.  536: V:1  | i32.load16_u $0:1+$2
#0.  548: V:1  | drop
#0.  552: V:0  | return
i32.load16_u() =>
>>> running export "i64.load8_s":
#0.  556: V:0  | i32.const 1
#0.  564: V:1  | i64.load8_s $0:1+$2
#0.  576: V:1  | drop
#0.  580: V:0  | return
i64.load8_s() =>
>>> running export "i64.load8_u":
#0.  584: V:0  | i32.const 1
#0.  592: V:1  | i64.load8_u $0:1+$2
#0.  604: V:1  | drop
#0.  608: V:0  | return
i64.load8_u() =>
>>> running export "i64.load16_s":
#0.  612: V:0  | i32.const 1
#0.  620: V:1  | i64.load16_s $0:1+$2
#0.  632: V:1  | drop
#0.  636: V:0  | return
i64.load16_s() =>
>>> running export "i64.load16_u":
#0.  640: V:0  | i32.const 1
#0.  648: V:1  | i64.load16_u $0:1+$2
#0.  660: V:1  | drop
#0.  664: V:0  | return
i64.load16_u() =>
>>> running export "i64.load32_s":
#0.  668: V:0  | i32.const 1
#0.  676: V:1  | i64.load32_s $0:1+$2
#0.  688: V:1  | drop
#0.  692: V:0  | return
i64.load32_s() =>
>>> running export "i64.load32_u":
#0.  696: V:0  | i32.const 1
#0.  704: V:1  | i64.load32_u $0:1+$2
#0.  716: V:1  | drop
#0.  720: V:0  | return
i64.load32_u() =>
>>> running export "i32.store":
#0.  724: V:0  | i32.const 1
#0.  732: V:1  | i32.const 2
#0.  740: V:2  | i32.store $0:1+$2, 2
#0.  752: V:0  | return
i32.store() =>
>>> running export "i64.store":
#0.  756: V:0  | i32.const 1
#0.  764: V:1  | i64.const 2
#0.  776: V:2  | i64.store $0:1+$2, 2
#0.  788: V:0  | return
i64.store() =>
>>> running export "f32.store":
#0.  792: V:0  | i32.const 1
#0.  800: V:1  | f32.const 2
#0.  808: V:2  | f32.store $0:1+$2, 2
#0.  820: V:0  | return
f32.store() =>
>>> running export "f64.store":
#0.  824: V:0  | i32.const 1
#0.  832: V:1  | f64.const 2
#0.  844: V:2  | f64.store $0:1+$2, 2
#0.  856: V:0  | return
f64.store() =>
>>> running export "i32.store8":
#0.  860: V:0  | i32.const 1
#0.  868: V:1  | i32.const 2
#0.  876: V:2  | i32.store8 $0:1+$2, 2
#0.  888: V:0  | return
i32.store8() =>
>>> running export "i32.store16":
#0.  892: V:0  | i32.const 1
#0.  900: V:1  | i32.const 2
#0.  908: V:2  | i32.store16 $0:1+$2, 2
#0.  920: V:0  | return
i32.store16() =>
>>> running export "i64.store8":
#0.  924: V:0  | i32.const 1
#0.  932: V:1  | i64.const 2
#0.  944: V:2  | i64.store8 $0:1+$2, 2
#0.  956: V:0  | return
i64.store8() =>
>>> running export "i64.store16":
#0.  960: V:0  | i32.const 1
#0.  968: V:1  | i64.const 2
#0.  980: V:2  | i64.store16 $0:1+$2, 2
#0.  992: V:0  | return
i64.store16() =>
>>> running export "i64.store32":
#0.  996: V:0  | i32.const 1
#0. 1004: V:1  | i64.const 2
#0. 1016: V:2  | i64.store32 $0:1+$2, 2
#0. 1028: V:0  | return
i64.store32() =>
>>> running export "current_memory":
#0. 1032: V:0  | memory.size $0
#0. 1040: V:1  | drop
#0. 1044: V:0  | return
current_memory() =>
>>> running export "grow_memory":
#0. 1048: V:0  | i32.const 1
#0. 1056: V:1  | memory.grow $0:1
#0. 1064: V:1  | drop
#0. 1068: V:0  | return
grow_memory() =>
>>> running export "i32.const":
#0. 1072: V:0  | i32.const 1
#0. 1080: V:1  | drop
#0. 1084: V:0  | return
i32.const() =>
>>> running export "i64.const":
#0. 1088: V:0  | i64.const 1
#0. 1100: V:1  | drop
#0. 1104: V:0  | return
i64.const() =>
>>> running export "f32.const":
#0. 1108: V:0  | f32.const 1
#0. 1116: V:1  | drop
#0. 1120: V:0  | return
f32.const() =>
>>> running export "f64.const":
#0. 1124: V:0  | f64.const 1
#0. 1136: V:1  | drop
#0. 1140: V:0  | return
f64.const() =>
>>> running export "i32.eqz":
#0. 1144: V:0  | i32.const 1
#0. 1152: V:1  | i32.eqz 1
#0. 1156: V:1  | drop
#0. 1160: V:0  | return
i32.eqz() =>
>>> running export "i32.eq":
#0. 1164: V:0  | i32.const 1
#0. 1172: V:1  | i32.const 2
#0. 1180: V:2  | i32.eq 1, 2
#0. 1184: V:1  | drop
#0. 1188: V:0  | return
i32.eq() =>
>>> running export "i32.ne":
#0. 1192: V:0  | i32.const 1
#0. 1200: V:1  | i32.const 2
#0. 1208: V:2  | i32.ne 1, 2
#0. 1212: V:1  | drop
#0. 1216: V:0  | return
i32.ne() =>
>>> running export "i32.lt_s":
#0. 1220: V:0  | i32.const 1
#0. 1228: V:1  | i32.const 2
#0. 1236: V:2  | i32.lt_s 1, 2
#0. 1240: V:1  | drop
#0. 1244: V:0  | return
i32.lt_s() =>
>>> running export "i32.lt_u":
#0. 1248: V:0  | i32.const 1
#0. 1256: V:1  | i32.const 2
#0. 1264: V:2  | i32.lt_u 1, 2
#0. 1268: V:1  | drop
#0. 1272: V:0  | return
i32.lt_u() =>
>>> running export "i32.gt_s":
#0. 1276: V:0  | i32.const 1
#0. 1284: V:1  | i32.const 2
#0. 1292: V:2  | i32.gt_s 1, 2
#0. 1296: V:1  | drop
#0. 1300: V:0  | return
i32.gt_s() =>
>>> running export "i32.gt_u":
#0. 1304: V:0  | i32.const 1
#0. 1312: V:1  | i32.const 2
#0. 1320: V:2  | i32.gt_u 1, 2
#0. 1324: V:1  | drop
#0. 1328: V:0  | return
i32.gt_u() =>
>>> running export "i32.le_s":
#0. 1332: V:0  | i32.const 1
#0. 1340: V:1  | i32.const 2
#0. 1348: V:2  | i32.le_s 1, 2
#0. 1352: V:1  | drop
#0. 1356: V:0  | return
i32.le_s() =>
>>> running export "i32.le_u":
#0. 1360: V:0  | i32.const 1
#0. 1368: V:1  | i32.const 2
#0. 1376: V:2  | i32.le_u 1, 2
#0. 1380: V:1  | drop
#0. 1384: V:0  | return
i32.le_u() =>
>>> running export "i32.ge_s":
#0. 1388: V:0  | i32.const 1
#0. 1396: V:1  | i32.const 2
#0. 1404: V:2  | i32.ge_s 1, 2
#0. 1408: V:1  | drop
#0. 1412: V:0  | return
i32.ge_s() =>
>>> running export "i32.ge_u":
#0. 1416: V:0  | i32.const 1
#0. 1424: V:1  | i32.const 2
#0. 1432: V:2  | i32.ge_u 1, 2
#0. 1436: V:1  | drop
#0. 1440: V:0  | return
i32.ge_u() =>
>>> running export "i64.eqz":
#0. 1444: V:0  | i64.const 1
#0. 1456: V:1  | i64.eqz 1
#0. 1460: V:1  | drop
#0. 1464: V:0  | return
i64.eqz() =>
>>> running export "i64.eq":
#0. 1468: V:0  | i64.const 1
#0. 1480: V:1  | i64.const 2
#0. 1492: V:2  | i64.eq 1, 2
#0. 1496: V:1  | drop
#0. 1500: V:0  | return
i64.eq() =>
>>> running export "i64.ne":
#0. 1504: V:0  | i64.const 1
#0. 1516: V:1  | i64.const 2
#0. 1528: V:2  | i64.ne 1, 2
#0. 1532: V:1  | drop
#0. 1536: V:0  | return
i64.ne() =>
>>> running export "i64.lt_s":
#0. 1540: V:0  | i64.const 1
#0. 1552: V:1  | i64.const 2
#0. 1564: V:2  | i64.lt_s 1, 2
#0. 1568: V:1  | drop
#0. 1572: V:0  | return
i64.lt_s() =>
>>> running export "i64.lt_u":
#0. 1576: V:0  | i64.const 1
#0. 1588: V:1  | i64.const 2
#0. 1600: V:2  | i64.lt_u 1, 2
#0. 1604: V:1  | drop
#0. 1608: V:0  | return
i64.lt_u() =>
>>> running export "i64.gt_s":
#0. 1612: V:0  | i64.const 1
#0. 1624: V:1  | i64.const 2
#0. 1636: V:2  | i64.gt_s 1, 2
#0. 1640: V:1  | drop
#0. 1644: V:0  | return
i64.gt_s() =>
>>> running export "i64.gt_u":
#0. 1648: V:0  | i64.const 1
#0. 1660: V:1  | i64.const 2
#0. 1672: V:2  | i64.gt_u 1, 2
#0. 1676: V:1  | drop
#0. 1680: V:0  | return
i64.gt_u() =>
>>> running export "i64.le_s":
#0. 1684: V:0  | i64.const 1
#0. 1696: V:1  | i64.const 2
#0. 1708: V:2  | i64.le_s 1, 2
#0. 1712: V:1  | drop
#0. 1716: V:0  | return
i64.le_s() =>
>>> running export "i64.le_u":
#0. 1720: V:0  | i64.const 1
#0. 1732: V:1  | i64.const 2
#0. 1744: V:2  | i64.le_u 1, 2
#0. 1748: V:1  | drop
#0. 1752: V:0  | return
i64.le_u() =>
>>> running export "i64.ge_s":
#0. 1756: V:0  | i64.const 1
#0. 1768: V:1  | i64.const 2
#0. 1780: V:2  | i64.ge_s 1, 2
#0. 1784: V:1  | drop
#0. 1788: V:0  | return
i64.ge_s() =>
>>> running export "i64.ge_u":
#0. 1792: V:0  | i64.const 1
#0. 1804: V:1  | i64.const 2
#0. 1816: V:2  | i64.ge_u 1, 2
#0. 1820: V:1  | drop
#0. 1824: V:0  | return
i64.ge_u() =>
>>> running export "f32.eq":
#0. 1828: V:0  | f32.const 1
#0. 1836: V:1  | f32.const 2
#0. 1844: V:2  | f32.eq 1, 2
#0. 1848: V:1  | drop
#0. 1852: V:0  | return
f32.eq() =>
>>> running export "f32.ne":
#0. 1856: V:0  | f32.const 1
#0. 1864: V:1  | f32.const 2
#0. 1872: V:2  | f32.ne 1, 2
#0. 1876: V:1  | drop
#0. 1880: V:0  | return
f32.ne() =>
>>> running export "f32.lt":
#0. 1884: V:0  | f32.const 1
#0. 1892: V:1  | f32.const 2
#0. 1900: V:2  | f32.lt 1, 2
#0. 1904: V:1  | drop
#0. 1908: V:0  | return
f32.lt() =>
>>> running export "f32.gt":
#0. 1912: V:0  | f32.const 1
#0. 1920: V:1  | f32.const 2
#0. 1928: V:2  | f32.gt 1, 2
#0. 1932: V:1  | drop
#0. 1936: V:0  | return
f32.gt() =>
>>> running export "f32.le":
#0. 1940: V:0  | f32.const 1
#0. 1948: V:1  | f32.const 2
#0. 1956: V:2  | f32.le 1, 2
#0. 1960: V:1  | drop
#0. 1964: V:0  | return
f32.le() =>
>>> running export "f32.ge":
#0. 1968: V:0  | f32.const 1
#0. 1976: V:1  | f32.const 2
#0. 1984: V:2  | f32.ge 1, 2
#0. 1988: V:1  | drop
#0. 1992: V:0  | return
f32.ge() =>
>>> running export "f64.eq":
#0. 1996: V:0  | f64.const 1
#0. 2008: V:1  | f64.const 2
#0. 2020: V:2  | f64.eq 1, 2
#0. 2024: V:1  | drop
#0. 2028: V:0  | return
f64.eq() =>
>>> running export "f64.ne":
#0. 2032: V:0  | f64.const 1
#0. 2044: V:1  | f64.const 2
#0. 2056: V:2  | f64.ne 1, 2
#0. 2060: V:1  | drop
#0. 2064: V:0  | return
f64.ne() =>
>>> running export "f64.lt":
#0. 2068: V:0  | f64.const 1
#0. 2080: V:1  | f64.const 2
#0. 2092: V:2  | f64.lt 1, 2
#0. 2096: V:1  | drop
#0. 2100: V:0  | return
f64.lt() =>
>>> running export "f64.gt":
#0. 2104: V:0  | f64.const 1
#0. 2116: V:1  | f64.const 2
#0. 2128: V:2  | f64.gt 1, 2
#0. 2132: V:1  | drop
#0. 2136: V:0  | return
f64.gt() =>
>>> running export "f64.le":
#0. 2140: V:0  | f64.const 1
#0. 2152: V:1  | f64.const 2
#0. 2164: V:2  | f64.le 1, 2
#0. 2168: V:1  | drop
#0. 2172: V:0  | return
f64.le() =>
>>> running export "f64.ge":
#0. 2176: V:0  | f64.const 1
#0. 2188: V:1  | f64.const 2
#0. 2200: V:2  | f64.ge 1, 2
#0. 2204: V:1  | drop
#0. 2208: V:0  | return
f64.ge() =>
>>> running export "i32.clz":
#0. 2212: V:0  | i32.const 1
#0. 2220: V:1  | i32.clz 1
#0. 2224: V:1  | drop
#0. 2228: V:0  | return
i32.clz() =>
>>> running export "i32.ctz":
#0. 2232: V:0  | i32.const 1
#0. 2240: V:1  | i32.ctz 1
#0. 2244: V:1  | drop
#0. 2248: V:0  | return
i32.ctz() =>
>>> running export "i32.popcnt":
#0. 2252: V:0  | i32.const 1
#0. 2260: V:1  | i32.popcnt 1
#0. 2264: V:1  | drop
#0. 2268: V:0  | return
i32.popcnt() =>
>>> running export "i32.add":
#0. 2272: V:0  | i32.const 1
#0. 2280: V:1  | i32.const 2
#0. 2288: V:2  | i32.add 1, 2
#0. 2292: V:1  | drop
#0. 2296: V:0  | return
i32.add() =>
>>> running export "i32.sub":
#0. 2300: V:0  | i32.const 1
#0. 2308: V:1  | i32.const 2
#0. 2316: V:2  | i32.sub 1, 2
#0. 2320: V:1  | drop
#0. 2324: V:0  | return
i32.sub() =>
>>> running export "i32.mul":
#0. 2328: V:0  | i32.const 1
#0. 2336: V:1  | i32.const 2
#0. 2344: V:2  | i32.mul 1, 2
#0. 2348: V:1  | drop
#0. 2352: V:0  | return
i32.mul() =>
>>> running export "i32.div_s":
#0. 2356: V:0  | i32.const 1
#0. 2364: V:1  | i32.const 2
#0. 2372: V:2  | i32.div_s 1, 2
#0. 2376: V:1  | drop
#0. 2380: V:0  | return
i32.div_s() =>
>>> running export "i32.div_u":
#0. 2384: V:0  | i32.const 1
#0. 2392: V:1  | i32.const 2
#0. 2400: V:2  | i32.div_u 1, 2
#0. 2404: V:1  | drop
#0. 2408: V:0  | return
i32.div_u() =>
>>> running export "i32.rem_s":
#0. 2412: V:0  | i32.const 1
#0. 2420: V:1  | i32.const 2
#0. 2428: V:2  | i32.rem_s 1, 2
#0. 2432: V:1  | drop
#0. 2436: V:0  | return
i32.rem_s() =>
>>> running export "i32.rem_u":
#0. 2440: V:0  | i32.const 1
#0. 2448: V:1  | i32.const 2
#0. 2456: V:2  | i32.rem_u 1, 2
#0. 2460: V:1  | drop
#0. 2464: V:0  | return
i32.rem_u() =>
>>> running export "i32.and":
#0. 2468: V:0  | i32.const 1
#0. 2476: V:1  | i32.const 2
#0. 2484: V:2  | i32.and 1, 2
#0. 2488: V:1  | drop
#0. 2492: V:0  | return
i32.and() =>
>>> running export "i32.or":
#0. 2496: V:0  | i32.const 1
#0. 2504: V:1  | i32.const 2
#0. 2512: V:2  | i32.or 1, 2
#0. 2516: V:1  | drop
#0. 2520: V:0  | return
i32.or() =>
>>> running export "i32.xor":
#0. 2524: V:0  | i32.const 1
#0. 2532: V:1  | i32.const 2
#0. 2540: V:2  | i32.xor 1, 2
#0. 2544: V:1  | drop
#0. 2548: V:0  | return
i32.xor() =>
>>> running export "i32.shl":
#0. 2552: V:0  | i32.const 1
#0. 2560: V:1  | i32.const 2
#0. 2568: V:2  | i32.shl 1, 2
#0. 2572: V:1  | drop
#0. 2576: V:0  | return
i32.shl() =>
>>> running export "i32.shr_s":
#0. 2580: V:0  | i32.const 1
#0. 2588: V:1  | i32.const 2
#0. 2596: V:2  | i32.shr_s 1, 2
#0. 2600: V:1  | drop
#0. 2604: V:0  | return
i32.shr_s() =>
>>> running export "i32.shr_u":
#0. 2608: V:0  | i32.const 1
#0. 2616: V:1  | i32.const 2
#0. 2624: V:2  | i32.shr_u 1, 2
#0. 2628: V:1  | drop
#0. 2632: V:0  | return
i32.shr_u() =>
>>> running export "i32.rotl":
#0. 2636: V:0  | i32.const 1
#0. 2644: V:1  | i32.const 2
#0. 2652: V:2  | i32.rotl 1, 2
#0. 2656: V:1  | drop
#0. 2660: V:0  | return
i32.rotl() =>
>>> running export "i32.rotr":
#0. 2664: V:0  | i32.const 1
#0. 2672: V:1  | i32.const 2
#0. 2680: V:2  | i32.rotr 1, 2
#0. 2684: V:1  | drop
#0. 2688: V:0  | return
i32.rotr() =>
>>> running export "i64.clz":
#0. 2692: V:0  | i64.const 1
#0. 2704: V:1  | i64.clz 1
#0. 2708: V:1  | drop
#0. 2712: V:0  | return
i64.clz() =>
>>> running export "i64.ctz":
#0. 2716: V:0  | i64.const 1
#0. 2728: V:1  | i64.ctz 1
#0. 2732: V:1  | drop
#0. 2736: V:0  | return
i64.ctz() =>
>>> running export "i64.popcnt":
#0. 2740: V:0  | i64.const 1
#0. 2752: V:1  | i64.popcnt 1
#0. 2756: V:1  | drop
#0. 2760: V:0  | return
i64.popcnt() =>
>>> running export "i64.add":
#0. 2764: V:0  | i64.const 1
#0. 2776: V:1  | i64.const 2
#0. 2788: V:2  | i64.add 1, 2
#0. 2792: V:1  | drop
#0. 2796: V:0  | return
i64.add() =>
>>> running export "i64.sub":
#0. 2800: V:0  | i64.const 1
#0. 2812: V:1  | i64.const 2
#0. 2824: V:2  | i64.sub 1, 2
#0. 2828: V:1  | drop
#0. 2832: V:0  | return
i64.sub() =>
>>> running export "i64.mul":
#0. 2836: V:0  | i64.const 1
#0. 2848: V:1  | i64.const 2
#0. 2860: V:2  | i64.mul 1, 2
#0. 2864: V:1  | drop
#0. 2868: V:0  | return
i64.mul() =>
>>> running export "i64.div_s":
#0. 2872: V:0  | i64.const 1
#0. 2884: V:1  | i64.const 2
#0. 2896: V:2  | i64.div_s 1, 2
#0. 2900: V:1  | drop
#0. 2904: V:0  | return
i64.div_s() =>
>>> running export "i64.div_u":
#0. 2908: V:0  | i64.const 1
#0. 2920: V:1  | i64.const 2
#0. 2932: V:2  | i64.div_u 1, 2
#0. 2936: V:1  | drop
#0. 2940: V:0  | return
i64.div_u() =>
>>> running export "i64.rem_s":
#0. 2944: V:0  | i64.const 1
#0. 2956: V:1  | i64.const 2
#0. 2968: V:2  | i64.rem_s 1, 2
#0. 2972: V:1  | drop
#0. 2976: V:0  | return
i64.rem_s() =>
>>> running export "i64.rem_u":
#0. 2980: V:0  | i64.const 1
#0. 2992: V:1  | i64.const 2
#0. 3004: V:2  | i64.rem_u 1, 2
#0. 3008: V:1  | drop
#0. 3012: V:0  | return
i64.rem_u() =>
>>> running export "i64.and":
#0. 3016: V:0  | i64.const 1
#0. 3028: V:1  | i64.const 2
#0. 3040: V:2  | i64.and 1, 2
#0. 3044: V:1  | drop
#0. 3048: V:0  | return
i64.and() =>
>>> running export "i64.or":
#0. 3052: V:0  | i64.const 1
#0. 3064: V:1  | i64.const 2
#0. 3076: V:2  | i64.or 1, 2
#0. 3080: V:1  | drop
#0. 3084: V:0  | return
i64.or() =>
>>> running export "i64.xor":
#0. 3088: V:0  | i64.const 1
#0. 3100: V:1  | i64.const 2
#0. 3112: V:2  | i64.xor 1, 2
#0. 3116: V:1  | drop
#0. 3120: V:0  | return
i64.xor() =>
>>> running export "i64.shl":
#0. 3124: V:0  | i64.const 1
#0. 3136: V:1  | i64.const 2
#0. 3148: V:2  | i64.shl 1, 2
#0. 3152: V:1  | drop
#0. 3156: V:0  | return
i64.shl() =>
>>> running export "i64.shr_s":
#0. 3160: V:0  | i64.const 1
#0. 3172: V:1  | i64.const 2
#0. 3184: V:2  | i64.shr_s 1, 2
#0. 3188: V:1  | drop
#0. 3192: V:0  | return
i64.shr_s() =>
>>> running export "i64.shr_u":
#0. 3196: V:0  | i64.const 1
#0. 3208: V:1  | i64.const 2
#0. 3220: V:2  | i64.shr_u 1, 2
#0. 3224: V:1  | drop
#0. 3228: V:0  | return
i64.shr_u() =>
>>> running export "i64.rotl":
#0. 3232: V:0  | i64.const 1
#0. 3244: V:1  | i64.const 2
#0. 3256: V:2  | i64.rotl 1, 2
#0. 3260: V:1  | drop
#0. 3264: V:0  | return
i64.rotl() =>
>>> running export "i64.rotr":
#0. 3268: V:0  | i64.const 1
#0. 3280: V:1  | i64.const 2
#0. 3292: V:2  | i64.rotr 1, 2
#0. 3296: V:1  | drop
#0. 3300: V:0  | return
i64.rotr() =>
>>> running export "f32.abs":
#0. 3304: V:0  | f32.const 1
#0. 3312: V:1  | f32.abs 1
#0. 3316: V:1  | drop
#0. 3320: V:0  | return
f32.abs() =>
>>> running export "f32.neg":
#0. 3324: V:0  | f32.const 1
#0. 3332: V:1  | f32.neg 1
#0. 3336: V:1  | drop
#0. 3340: V:0  | return
f32.neg() =>
>>> running export "f32.ceil":
#0. 3344: V:0  | f32.const 1
#0. 3352: V:1  | f32.ceil 1
#0. 3356: V:1  | drop
#0. 3360: V:0  | return
f32.ceil() =>
>>> running export "f32.floor":
#0. 3364: V:0  | f32.const 1
#0. 3372: V:1  | f32.floor 1
#0. 3376: V:1  | drop
#0. 3380: V:0  | return
f32.floor() =>
>>> running export "f32.trunc":
#0. 3384: V:0  | f32.const 1
#0. 3392: V:1  | f32.trunc 1
#0. 3396: V:1  | drop
#0. 3400: V:0  | return
f32.trunc() =>
>>> running export "f32.nearest":
#0. 3404: V:0  | f32.const 1
#0. 3412: V:1  | f32.nearest 1
#0. 3416: V:1  | drop
#0. 3420: V:0  | return
f32.nearest() =>
>>> running export "f32.sqrt":
#0. 3424: V:0  | f32.const 1
#0. 3432: V:1  | f32.sqrt 1
#0. 3436: V:1  | drop
#0. 3440: V:0  | return
f32.sqrt() =>
>>> running export "f32.add":
#0. 3444: V:0  | f32.const 1
#0. 3452: V:1  | f32.const 2
#0. 3460: V:2  | f32.add 1, 2
#0. 3464: V:1  | drop
#0. 3468: V:0  | return
f32.add() =>
>>> running export "f32.sub":
#0. 3472: V:0  | f32.const 1
#0. 3480: V:1  | f32.const 2
#0. 3488: V:2  | f32.sub 1, 2
#0. 3492: V:1  | drop
#0. 3496: V:0  | return
f32.sub() =>
>>> running export "f32.mul":
#0. 3500: V:0  | f32.const 1
#0. 3508: V:1  | f32.const 2
#0. 3516: V:2  | f32.mul 1, 2
#0. 3520: V:1  | drop
#0. 3524: V:0  | return
f32.mul() =>
>>> running export "f32.div":
#0. 3528: V:0  | f32.const 1
#0. 3536: V:1  | f32.const 2
#0. 3544: V:2  | f32.div 1, 2
#0. 3548: V:1  | drop
#0. 3552: V:0  | return
f32.div() =>
>>> running export "f32.min":
#0. 3556: V:0  | f32.const 1
#0. 3564: V:1  | f32.const 2
#0. 3572: V:2  | f32.min 1, 2
#0. 3576: V:1  | drop
#0. 3580: V:0  | return
f32.min() =>
>>> running export "f32.max":
#0. 3584: V:0  | f32.const 1
#0. 3592: V:1  | f32.const 2
#0. 3600: V:2  | f32.max 1, 2
#0. 3604: V:1  | drop
#0. 3608: V:0  | return
f32.max() =>
>>> running export "f32.copysign":
#0. 3612: V:0  | f32.const 1
#0. 3620: V:1  | f32.const 2
#0. 3628: V:2  | f32.copysign 1, 2
#0. 3632: V:1  | drop
#0. 3636: V:0  | return
f32.copysign() =>
>>> running export "f64.abs":
#0. 3640: V:0  | f64.const 1
#0. 3652: V:1  | f64.abs 1
#0. 3656: V:1  | drop
#0. 3660: V:0  | return
f64.abs() =>
>>> running export "f64.neg":
#0. 3664: V:0  | f64.const 1
#0. 3676: V:1  | f64.neg 1
#0. 3680: V:1  | drop
#0. 3684: V:0  | return
f64.neg() =>
>>> running export "f64.ceil":
#0. 3688: V:0  | f64.const 1
#0. 3700: V:1  | f64.ceil 1
#0. 3704: V:1  | drop
#0. 3708: V:0  | return
f64.ceil() =>
>>> running export "f64.floor":
#0. 3712: V:0  | f64.const 1
#0. 3724: V:1  | f64.floor 1
#0. 3728: V:1  | drop
#0. 3732: V:0  | return
f64.floor() =>
>>> running export "f64.trunc":
#0. 3736: V:0  | f64.const 1
#0. 3748: V:1  | f64.trunc 1
#0. 3752: V:1  | drop
#0. 3756: V:0  | return
f64.trunc() =>
>>> running export "f64.nearest":
#0. 3760: V:0  | f64.const 1
#0. 3772: V:1  | f64.nearest 1
#0. 3776: V:1  | drop
#0. 3780: V:0  | return
f64.nearest() =>
>>> running export "f64.sqrt":
#0. 3784: V:0  | f64.const 1
#0. 3796: V:1  | f64.sqrt 1
#0. 3800: V:1  | drop
#0. 3804: V:0  | return
f64.sqrt() =>
>>> running export "f64.add":
#0. 3808: V:0  | f64.const 1
#0. 3820: V:1  | f64.const 2
#0. 3832: V:2  | f64.add 1, 2
#0. 3836: V:1  | drop
#0. 3840: V:0  | return
f64.add() =>
>>> running export "f64.sub":
#0. 3844: V:0  | f64.const 1
#0. 3856: V:1  | f64.const 2
#0. 3868: V:2  | f64.sub 1, 2
#0. 3872: V:1  | drop
#0. 3876: V:0  | return
f64.sub() =>
>>> running export "f64.mul":
#0. 3880: V:0  | f64.const 1
#0. 3892: V:1  | f64.const 2
#0. 3904: V:2  | f64.mul 1, 2
#0. 3908: V:1  | drop
#0. 3912: V:0  | return
f64.mul() =>
>>> running export "f64.div":
#0. 3916: V:0  | f64.const 1
#0. 3928: V:1  | f64.const 2
#0. 3940: V:2  | f64.div 1, 2
#0. 3944: V:1  | drop
#0. 3948: V:0  | return
f64.div() =>
>>> running export "f64.min":
#0. 3952: V:0  | f64.const 1
#0. 3964: V:1  | f64.const 2
#0. 3976: V:2  | f64.min 1, 2
#0. 3980: V:1  | drop
#0. 3984: V:0  | return
f64.min() =>
>>> running export "f64.max":
#0. 3988: V:0  | f64.const 1
#0. 4000: V:1  | f64.const 2
#0. 4012: V:2  | f64.max 1, 2
#0. 4016: V:1  | drop
#0. 4020: V:0  | return
f64.max() =>
>>> running export "f64.copysign":
#0. 4024: V:0  | f64.const 1
#0. 4036: V:1  | f64.const 2
#0. 4048: V:2  | f64.copysign 1, 2
#0. 4052: V:1  | drop
#0. 4056: V:0  | return
f64.copysign() =>
>>> running export "i32.wrap/i64":
#0. 4060: V:0  | i64.const 1
#0. 4072: V:1  | i32.wrap_i64 1
#0. 4076: V:1  | drop
#0. 4080: V:0  | return
i32.wrap/i64() =>
>>> running export "i32.trunc_s/f32":
#0. 4084: V:0  | f32.const 1
#0. 4092: V:1  | i32.trunc_f32_s 1
#0. 4096: V:1  | drop
#0. 4100: V:0  | return
i32.trunc_s/f32() =>
>>> running export "i32.trunc_u/f32":
#0. 4104: V:0  | f32.const 1
#0. 4112: V:1  | i32.trunc_f32_u 1
#0. 4116: V:1  | drop
#0. 4120: V:0  | return
i32.trunc_u/f32() =>
>>> running export "i32.trunc_s/f64":
#0. 4124: V:0  | f64.const 1
#0. 4136: V:1  | i32.trunc_f64_s 1
#0. 4140: V:1  | drop
#0. 4144: V:0  | return
i32.trunc_s/f64() =>
>>> running export "i32.trunc_u/f64":
#0. 4148: V:0  | f64.const 1
#0. 4160: V:1  | i32.trunc_f64_u 1
#0. 4164: V:1  | drop
#0. 4168: V:0  | return
i32.trunc_u/f64() =>
>>> running export "i64.extend_s/i32":
#0. 4172: V:0  | i32.const 1
#0. 4180: V:1  | i64.extend_i32_s 1
#0. 4184: V:1  | drop
#0. 4188: V:0  | return
i64.extend_s/i32() =>
>>> running export "i64.extend_u/i32":
#0. 4192: V:0  | i32.const 1
#0. 4200: V:1  | i64.extend_i32_u 1
#0. 4204: V:1  | drop
#0. 4208: V:0  | return
i64.extend_u/i32() =>
>>> running export "i64.trunc_s/f32":
#0. 4212: V:0  | f32.const 1
#0. 4220: V:1  | i64.trunc_f32_s 1
#0. 4224: V:1  | drop
#0. 4228: V:0  | return
i64.trunc_s/f32() =>
>>> running export "i64.trunc_u/f32":
#0. 4232: V:0  | f32.const 1
#0. 4240: V:1  | i64.trunc_f32_u 1
#0. 4244: V:1  | drop
#0. 4248: V:0  | return
i64.trunc_u/f32() =>
>>> running export "i64.trunc_s/f64":
#0. 4252: V:0  | f64.const 1
#0. 4264: V:1  | i64.trunc_f64_s 1
#0. 4268: V:1  | drop
#0. 4272: V:0  | return
i64.trunc_s/f64() =>
>>> running export "i64.trunc_u/f64":
#0. 4276: V:0  | f64.const 1
#0. 4288: V:1  | i64.trunc_f64_u 1
#0. 4292: V:1  | drop
#0. 4296: V:0  | return
i64.trunc_u/f64() =>
>>> running export "f32.convert_s/i32":
#0. 4300: V:0  | i32.const 1
#0. 4308: V:1  | f32.convert_i32_s 1
#0. 4312: V:1  | drop
#0. 4316: V:0  | return
f32.convert_s/i32() =>
>>> running export "f32.convert_u/i32":
#0. 4320: V:0  | i32.const 1
#0. 4328: V:1  | f32.convert_i32_u 1
#0. 4332: V:1  | drop
#0. 4336: V:0  | return
f32.convert_u/i32() =>
>>> running export "f32.convert_s/i64":
#0. 4340: V:0  | i64.const 1
#0. 4352: V:1  | f32.convert_i64_s 1
#0. 4356: V:1  | drop
#0. 4360: V:0  | return
f32.convert_s/i64() =>
>>> running export "f32.convert_u/i64":
#0. 4364: V:0  | i64.const 1
#0. 4376: V:1  | f32.convert_i64_u 1
#0. 4380: V:1  | drop
#0. 4384: V:0  | return
f32.convert_u/i64() =>
>>> running export "f32.demote/f64":
#0. 4388: V:0  | f64.const 1
#0. 4400: V:1  | f32.demote_f64 1
#0. 4404: V:1  | drop
#0. 4408: V:0  | return
f32.demote/f64() =>
>>> running export "f64.convert_s/i32":
#0. 4412: V:0  | i32.const 1
#0. 4420: V:1  | f64.convert_i32_s 1
#0. 4424: V:1  | drop
#0. 4428: V:0  | return
f64.convert_s/i32() =>
>>> running export "f64.convert_u/i32":
#0. 4432: V:0  | i32.const 1
#0. 4440: V:1  | f64.convert_i32_u 1
#0. 4444: V:1  | drop
#0. 4448: V:0  | return
f64.convert_u/i32() =>
>>> running export "f64.convert_s/i64":
#0. 4452: V:0  | i64.const 1
#0. 4464: V:1  | f64.convert_i64_s 1
#0. 4468: V:1  | drop
#0. 4472: V:0  | return
f64.convert_s/i64() =>
>>> running export "f64.convert_u/i64":
#0. 4476: V:0  | i64.const 1
#0. 4488: V:1  | f64.convert_i64_u 1
#0. 4492: V:1  | drop
#0. 4496: V:0  | return
f64.convert_u/i64() =>
>>> running export "f64.promote/f32":
#0. 4500: V:0  | f32.const 1
#0. 4508: V:1  | f64.promote_f32 1
#0. 4512: V:1  | drop
#0. 4516: V:0  | return
f64.promote/f32() =>
>>> running export "i32.reinterpret/f32":
#0. 4520: V:0  | i32.const 1
#0. 4528: V:1  | f32.reinterpret_i32 1
#0. 4532: V:1  | drop
#0. 4536: V:0  | return
i32.reinterpret/f32() =>
>>> running export "f32.reinterpret/i32":
#0. 4540: V:0  | f32.const 1
#0. 4548: V:1  | i32.reinterpret_f32 1
#0. 4552: V:1  | drop
#0. 4556: V:0  | return
f32.reinterpret/i32() =>
>>> running export "i64.reinterpret/f64":
#0. 4560: V:0  | i64.const 1
#0. 4572: V:1  | f64.reinterpret_i64 1
#0. 4576: V:1  | drop
#0. 4580: V:0  | return
i64.reinterpret/f64() =>
>>> running export "f64.reinterpret/i64":
#0. 4584: V:0  | f64.const 1
#0. 4596: V:1  | i64.reinterpret_f64 1
#0. 4600: V:1  | drop
#0. 4604: V:0  | return
f64.reinterpret/i64() =>
>>> running export "i32.extend8_s":
#0. 4608: V:0  | i32.const 1
#0. 4616: V:1  | i32.extend8_s 1
#0. 4620: V:1  | drop
#0. 4624: V:0  | return
i32.extend8_s() =>
>>> running export "i32.extend16_s":
#0. 4628: V:0  | i32.const 1
#0. 4636: V:1  | i32.extend16_s 1
#0. 4640: V:1  | drop
#0. 4644: V:0  | return
i32.extend16_s() =>
>>> running export "i64.extend8_s":
#0. 4648: V:0  | i64.const 1
#0. 4660: V:1  | i64.extend8_s 1
#0. 4664: V:1  | drop
#0. 4668: V:0  | return
i64.extend8_s() =>
>>> running export "i64.extend16_s":
#0. 4672: V:0  | i64.const 1
#0. 4684: V:1  | i64.extend16_s 1
#0. 4688: V:1  | drop
#0. 4692: V:0  | return
i64.extend16_s() =>
>>> running export "i64.extend32_s":
#0. 4696: V:0  | i64.const 1
#0. 4708: V:1  | i64.extend32_s 1
#0. 4712: V:1  | drop
#0. 4716: V:0  | return
i64.extend32_s() =>
>>> running export "alloca":
#0. 4720: V:0  | alloca $1
#0. 4728: V:1  | drop
#0. 4732: V:0  | return
alloca() =>
>>> running export "br_unless":
#0. 4736: V:0  | i32.const 1
#0. 4744: V:1  | br_unless @4760, 1
#0. 4752: V:0  | br @4760
#0. 4760: V:0  | return
br_unless() =>
>>> running export "call_host":
#0. 4764: V:0  | i32.const 1
#0. 4772: V:1  | call_host $0
called host host.print(i32:1) =>
#0. 4780: V:0  | return
call_host() =>
>>> running export "drop_keep":
#0. 4784: V:0  | i32.const 1
#0. 4792: V:1  | i32.const 2
#0. 4800: V:2  | drop_keep $1 $1
#0. 4812: V:1  | br @4820
#0. 4820: V:1  | drop
#0. 4824: V:0  | return
drop_keep() =>
>>> running export "i32.trunc_s:sat/f32":
#0. 4828: V:0  | f32.const 1
#0. 4836: V:1  | i32.trunc_sat_f32_s 1
#0. 4840: V:1  | drop
#0. 4844: V:0  | return
i32.trunc_s:sat/f32() =>
>>> running export "i32.trunc_u:sat/f32":
#0. 4848: V:0  | f32.const 1
#0. 4856: V:1  | i32.trunc_sat_f32_u 1
#0. 4860: V:1  | drop
#0. 4864: V:0  | return
i32.trunc_u:sat/f32() =>
>>> running export "i32.trunc_s:sat/f64":
#0. 4868: V:0  | f64.const 1
#0. 4880: V:1  | i32.trunc_sat_f64_s 1
#0. 4884: V:1  | drop
#0. 4888: V:0  | return
i32.trunc_s:sat/f64() =>
>>> running export "i32.trunc_u:sat/f64":
#0. 4892: V:0  | f64.const 1
#0. 4904: V:1  | i32.trunc_sat_f64_u 1
#0. 4908: V:1  | drop
#0. 4912: V:0  | return
i32.trunc_u:sat/f64() =>
>>> running export "i64.trunc_s:sat/f32":
#0. 4916: V:0  | f32.const 1
#0. 4924: V:1  | i64.trunc_sat_f32_s 1
#0. 4928: V:1  | drop
#0. 4932: V:0  | return
i64.trunc_s:sat/f32() =>
>>> running export "i64.trunc_u:sat/f32":
#0. 4936: V:0  | f32.const 1
#0. 4944: V:1  | i64.trunc_sat_f32_u 1
#0. 4948: V:1  | drop
#0. 4952: V:0  | return
i64.trunc_u:sat/f32() =>
>>> running export "i64.trunc_s:sat/f64":
#0. 4956: V:0  | f64.const 1
#0. 4968: V:1  | i64.trunc_sat_f64_s 1
#0. 4972: V:1  | drop
#0. 4976: V:0  | return
i64.trunc_s:sat/f64() =>
>>> running export "i64.trunc_u:sat/f64":
#0. 4980: V:0  | f64.const 1
#0. 4992: V:1  | i64.trunc_sat_f64_u 1
#0. 4996: V:1  | drop
#0. 5000: V:0  | return
i64.trunc_u:sat/f64() =>
>>> running export "v128.load":
#0. 5004: V:0  | i32.const 1
#0. 5012: V:1  | v128.load $0:1+$3
#0. 5024: V:1  | drop
#0. 5028: V:0  | return
v128.load() =>
>>> running export "v128.store":
#0. 5032: V:0  | i32.const 1
#0. 5040: V:1  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5060: V:2  | v128.store $0:1+$3, $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5072: V:0  | return
v128.store() =>
>>> running export "v128.const":
#0. 5076: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5096: V:1  | drop
#0. 5100: V:0  | return
v128.const() =>
>>> running export "v8x16.shuffle":
#0. 5104: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5124: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 5144: V:2  | v8x16.shuffle $0x00000001 00000001 00000001 00000001 $0x00000002 00000002 00000002 00000002 : with i5x16 imm: $1 $1 $1 $1 $1 $1 $1 $1 $1 $1 $1 $1 $1 $1 $1 $1
#0. 5158: V:1  | drop
#0. 5162: V:0  | return
v8x16.shuffle() =>
>>> running export "i8x16.splat":
#0. 5166: V:0  | i32.const 1
#0. 5174: V:1  | i8x16.splat 1
#0. 5178: V:1  | drop
#0. 5182: V:0  | return
i8x16.splat() =>
>>> running export "i8x16.extract_lane_s":
#0. 5186: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5206: V:1  | i8x16.extract_lane_s : LaneIdx 15 From $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5211: V:1  | drop
#0. 5215: V:0  | return
i8x16.extract_lane_s() =>
>>> running export "i8x16.extract_lane_u":
#0. 5219: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5239: V:1  | i8x16.extract_lane_u : LaneIdx 15 From $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5244: V:1  | drop
#0. 5248: V:0  | return
i8x16.extract_lane_u() =>
>>> running export "i8x16.replace_lane":
#0. 5252: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5272: V:1  | i32.const 0
#0. 5280: V:2  | i8x16.replace_lane : Set 0 to LaneIdx 15 In $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5285: V:1  | drop
#0. 5289: V:0  | return
i8x16.replace_lane() =>
>>> running export "i16x8.splat":
#0. 5293: V:0  | i32.const 1
#0. 5301: V:1  | i16x8.splat 1
#0. 5305: V:1  | drop
#0. 5309: V:0  | return
i16x8.splat() =>
>>> running export "i16x8.extract_lane_s":
#0. 5313: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5333: V:1  | i16x8.extract_lane_s : LaneIdx 7 From $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5338: V:1  | drop
#0. 5342: V:0  | return
i16x8.extract_lane_s() =>
>>> running export "i16x8.extract_lane_u":
#0. 5346: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5366: V:1  | i16x8.extract_lane_u : LaneIdx 7 From $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5371: V:1  | drop
#0. 5375: V:0  | return
i16x8.extract_lane_u() =>
>>> running export "i16x8.replace_lane":
#0. 5379: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5399: V:1  | i32.const 0
#0. 5407: V:2  | i16x8.replace_lane : Set 0 to LaneIdx 7 In $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5412: V:1  | drop
#0. 5416: V:0  | return
i16x8.replace_lane() =>
>>> running export "i32x4.splat":
#0. 5420: V:0  | i32.const 1
#0. 5428: V:1  | i32x4.splat 1
#0. 5432: V:1  | drop
#0. 5436: V:0  | return
i32x4.splat() =>
>>> running export "i32x4.extract_lane":
#0. 5440: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5460: V:1  | i32x4.extract_lane : LaneIdx 3 From $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5465: V:1  | drop
#0. 5469: V:0  | return
i32x4.extract_lane() =>
>>> running export "i32x4.replace_lane":
#0. 5473: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5493: V:1  | i32.const 0
#0. 5501: V:2  | i32x4.replace_lane : Set 0 to LaneIdx 3 In $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5506: V:1  | drop
#0. 5510: V:0  | return
i32x4.replace_lane() =>
>>> running export "i64x2.splat":
#0. 5514: V:0  | i64.const 1
#0. 5526: V:1  | i64x2.splat 1
#0. 5530: V:1  | drop
#0. 5534: V:0  | return
i64x2.splat() =>
>>> running export "i64x2.extract_lane":
#0. 5538: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5558: V:1  | i64x2.extract_lane : LaneIdx 1 From $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5563: V:1  | drop
#0. 5567: V:0  | return
i64x2.extract_lane() =>
>>> running export "i64x2.replace_lane":
#0. 5571: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5591: V:1  | i64.const 0
#0. 5603: V:2  | i64x2.replace_lane : Set 0 to LaneIdx 1 In $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5608: V:1  | drop
#0. 5612: V:0  | return
i64x2.replace_lane() =>
>>> running export "f32x4.splat":
#0. 5616: V:0  | f32.const 1
#0. 5624: V:1  | f32x4.splat 1
#0. 5628: V:1  | drop
#0. 5632: V:0  | return
f32x4.splat() =>
>>> running export "f32x4.extract_lane":
#0. 5636: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5656: V:1  | f32x4.extract_lane : LaneIdx 3 From $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5661: V:1  | drop
#0. 5665: V:0  | return
f32x4.extract_lane() =>
>>> running export "f32x4.replace_lane":
#0. 5669: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5689: V:1  | f32.const 0
#0. 5697: V:2  | f32x4.replace_lane : Set 0 to LaneIdx 3 In $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5702: V:1  | drop
#0. 5706: V:0  | return
f32x4.replace_lane() =>
>>> running export "f64x2.splat":
#0. 5710: V:0  | f64.const 1
#0. 5722: V:1  | f64x2.splat 1
#0. 5726: V:1  | drop
#0. 5730: V:0  | return
f64x2.splat() =>
>>> running export "f64x2.extract_lane":
#0. 5734: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5754: V:1  | f64x2.extract_lane : LaneIdx 1 From $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5759: V:1  | drop
#0. 5763: V:0  | return
f64x2.extract_lane() =>
>>> running export "f64x2.replace_lane":
#0. 5767: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5787: V:1  | f64.const 0
#0. 5799: V:2  | f64x2.replace_lane : Set 0 to LaneIdx 1 In $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5804: V:1  | drop
#0. 5808: V:0  | return
f64x2.replace_lane() =>
>>> running export "i8x16.eq":
#0. 5812: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5832: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 5852: V:2  | i8x16.eq $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5856: V:1  | drop
#0. 5860: V:0  | return
i8x16.eq() =>
>>> running export "i8x16.ne":
#0. 5864: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5884: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 5904: V:2  | i8x16.ne $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5908: V:1  | drop
#0. 5912: V:0  | return
i8x16.ne() =>
>>> running export "i8x16.lt_s":
#0. 5916: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5936: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 5956: V:2  | i8x16.lt_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 5960: V:1  | drop
#0. 5964: V:0  | return
i8x16.lt_s() =>
>>> running export "i8x16.lt_u":
#0. 5968: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5988: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6008: V:2  | i8x16.lt_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6012: V:1  | drop
#0. 6016: V:0  | return
i8x16.lt_u() =>
>>> running export "i8x16.gt_s":
#0. 6020: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6040: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6060: V:2  | i8x16.gt_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6064: V:1  | drop
#0. 6068: V:0  | return
i8x16.gt_s() =>
>>> running export "i8x16.gt_u":
#0. 6072: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6092: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6112: V:2  | i8x16.gt_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6116: V:1  | drop
#0. 6120: V:0  | return
i8x16.gt_u() =>
>>> running export "i8x16.le_s":
#0. 6124: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6144: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6164: V:2  | i8x16.le_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6168: V:1  | drop
#0. 6172: V:0  | return
i8x16.le_s() =>
>>> running export "i8x16.le_u":
#0. 6176: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6196: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6216: V:2  | i8x16.le_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6220: V:1  | drop
#0. 6224: V:0  | return
i8x16.le_u() =>
>>> running export "i8x16.ge_s":
#0. 6228: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6248: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6268: V:2  | i8x16.ge_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6272: V:1  | drop
#0. 6276: V:0  | return
i8x16.ge_s() =>
>>> running export "i8x16.ge_u":
#0. 6280: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6300: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6320: V:2  | i8x16.ge_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6324: V:1  | drop
#0. 6328: V:0  | return
i8x16.ge_u() =>
>>> running export "i16x8.eq":
#0. 6332: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6352: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6372: V:2  | i16x8.eq $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6376: V:1  | drop
#0. 6380: V:0  | return
i16x8.eq() =>
>>> running export "i16x8.ne":
#0. 6384: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6404: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6424: V:2  | i16x8.ne $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6428: V:1  | drop
#0. 6432: V:0  | return
i16x8.ne() =>
>>> running export "i16x8.lt_s":
#0. 6436: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6456: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6476: V:2  | i16x8.lt_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6480: V:1  | drop
#0. 6484: V:0  | return
i16x8.lt_s() =>
>>> running export "i16x8.lt_u":
#0. 6488: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6508: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6528: V:2  | i16x8.lt_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6532: V:1  | drop
#0. 6536: V:0  | return
i16x8.lt_u() =>
>>> running export "i16x8.gt_s":
#0. 6540: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6560: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6580: V:2  | i16x8.gt_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6584: V:1  | drop
#0. 6588: V:0  | return
i16x8.gt_s() =>
>>> running export "i16x8.gt_u":
#0. 6592: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6612: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6632: V:2  | i16x8.gt_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6636: V:1  | drop
#0. 6640: V:0  | return
i16x8.gt_u() =>
>>> running export "i16x8.le_s":
#0. 6644: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6664: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6684: V:2  | i16x8.le_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6688: V:1  | drop
#0. 6692: V:0  | return
i16x8.le_s() =>
>>> running export "i16x8.le_u":
#0. 6696: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6716: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6736: V:2  | i16x8.le_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6740: V:1  | drop
#0. 6744: V:0  | return
i16x8.le_u() =>
>>> running export "i16x8.ge_s":
#0. 6748: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6768: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6788: V:2  | i16x8.ge_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6792: V:1  | drop
#0. 6796: V:0  | return
i16x8.ge_s() =>
>>> running export "i16x8.ge_u":
#0. 6800: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6820: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6840: V:2  | i16x8.ge_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6844: V:1  | drop
#0. 6848: V:0  | return
i16x8.ge_u() =>
>>> running export "i32x4.eq":
#0. 6852: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6872: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6892: V:2  | i32x4.eq $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6896: V:1  | drop
#0. 6900: V:0  | return
i32x4.eq() =>
>>> running export "i32x4.ne":
#0. 6904: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6924: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6944: V:2  | i32x4.ne $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6948: V:1  | drop
#0. 6952: V:0  | return
i32x4.ne() =>
>>> running export "i32x4.lt_s":
#0. 6956: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6976: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6996: V:2  | i32x4.lt_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7000: V:1  | drop
#0. 7004: V:0  | return
i32x4.lt_s() =>
>>> running export "i32x4.lt_u":
#0. 7008: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7028: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7048: V:2  | i32x4.lt_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7052: V:1  | drop
#0. 7056: V:0  | return
i32x4.lt_u() =>
>>> running export "i32x4.gt_s":
#0. 7060: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7080: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7100: V:2  | i32x4.gt_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7104: V:1  | drop
#0. 7108: V:0  | return
i32x4.gt_s() =>
>>> running export "i32x4.gt_u":
#0. 7112: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7132: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7152: V:2  | i32x4.gt_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7156: V:1  | drop
#0. 7160: V:0  | return
i32x4.gt_u() =>
>>> running export "i32x4.le_s":
#0. 7164: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7184: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7204: V:2  | i32x4.le_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7208: V:1  | drop
#0. 7212: V:0  | return
i32x4.le_s() =>
>>> running export "i32x4.le_u":
#0. 7216: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7236: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7256: V:2  | i32x4.le_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7260: V:1  | drop
#0. 7264: V:0  | return
i32x4.le_u() =>
>>> running export "i32x4.ge_s":
#0. 7268: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7288: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7308: V:2  | i32x4.ge_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7312: V:1  | drop
#0. 7316: V:0  | return
i32x4.ge_s() =>
>>> running export "i32x4.ge_u":
#0. 7320: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7340: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7360: V:2  | i32x4.ge_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7364: V:1  | drop
#0. 7368: V:0  | return
i32x4.ge_u() =>
>>> running export "f32x4.eq":
#0. 7372: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7392: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7412: V:2  | f32x4.eq $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7416: V:1  | drop
#0. 7420: V:0  | return
f32x4.eq() =>
>>> running export "f32x4.ne":
#0. 7424: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7444: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7464: V:2  | f32x4.ne $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7468: V:1  | drop
#0. 7472: V:0  | return
f32x4.ne() =>
>>> running export "f32x4.lt":
#0. 7476: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7496: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7516: V:2  | f32x4.lt $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7520: V:1  | drop
#0. 7524: V:0  | return
f32x4.lt() =>
>>> running export "f32x4.gt":
#0. 7528: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7548: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7568: V:2  | f32x4.gt $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7572: V:1  | drop
#0. 7576: V:0  | return
f32x4.gt() =>
>>> running export "f32x4.le":
#0. 7580: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7600: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7620: V:2  | f32x4.le $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7624: V:1  | drop
#0. 7628: V:0  | return
f32x4.le() =>
>>> running export "f32x4.ge":
#0. 7632: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7652: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7672: V:2  | f32x4.ge $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7676: V:1  | drop
#0. 7680: V:0  | return
f32x4.ge() =>
>>> running export "f64x2.eq":
#0. 7684: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7704: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7724: V:2  | f64x2.eq $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7728: V:1  | drop
#0. 7732: V:0  | return
f64x2.eq() =>
>>> running export "f64x2.ne":
#0. 7736: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7756: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7776: V:2  | f64x2.ne $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7780: V:1  | drop
#0. 7784: V:0  | return
f64x2.ne() =>
>>> running export "f64x2.lt":
#0. 7788: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7808: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7828: V:2  | f64x2.lt $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7832: V:1  | drop
#0. 7836: V:0  | return
f64x2.lt() =>
>>> running export "f64x2.gt":
#0. 7840: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7860: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7880: V:2  | f64x2.gt $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7884: V:1  | drop
#0. 7888: V:0  | return
f64x2.gt() =>
>>> running export "f64x2.le":
#0. 7892: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7912: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7932: V:2  | f64x2.le $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7936: V:1  | drop
#0. 7940: V:0  | return
f64x2.le() =>
>>> running export "f64x2.ge":
#0. 7944: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7964: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7984: V:2  | f64x2.ge $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7988: V:1  | drop
#0. 7992: V:0  | return
f64x2.ge() =>
>>> running export "v128.not":
#0. 7996: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8016: V:1  | v128.not $0x00000001 0x00000001 0x00000001 0x00000001
#0. 8020: V:1  | drop
#0. 8024: V:0  | return
v128.not() =>
>>> running export "v128.and":
#0. 8028: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8048: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 8068: V:2  | v128.and $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 8072: V:1  | drop
#0. 8076: V:0  | return
v128.and() =>
>>> running export "v128.or":
#0. 8080: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8100: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 8120: V:2  | v128.or $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 8124: V:1  | drop
#0. 8128: V:0  | return
v128.or() =>
>>> running export "v128.xor":
#0. 8132: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8152: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 8172: V:2  | v128.xor $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 8176: V:1  | drop
#0. 8180: V:0  | return
v128.xor() =>
>>> running export "v128.bitselect":
#0. 8184: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8204: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 8224: V:2  | v128.const 0x00000003 0x00000003 0x00000003 0x00000003
#0. 8244: V:3  | v128.bitselect $0x00000001 00000001 00000001 00000001 $0x00000002 00000002 00000002 00000002 $0x00000003 00000003 00000003 00000003
#0. 8248: V:1  | drop
#0. 8252: V:0  | return
v128.bitselect() =>
>>> running export "i8x16.neg":
#0. 8256: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8276: V:1  | i8x16.neg $0x00000001 0x00000001 0x00000001 0x00000001
#0. 8280: V:1  | drop
#0. 8284: V:0  | return
i8x16.neg() =>
>>> running export "i8x16.any_true":
#0. 8288: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8308: V:1  | i8x16.any_true $0x00000001 0x00000001 0x00000001 0x00000001
#0. 8312: V:1  | drop
#0. 8316: V:0  | return
i8x16.any_true() =>
>>> running export "i8x16.all_true":
#0. 8320: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8340: V:1  | i8x16.all_true $0x00000001 0x00000001 0x00000001 0x00000001
#0. 8344: V:1  | drop
#0. 8348: V:0  | return
i8x16.all_true() =>
>>> running export "i8x16.shl":
#0. 8352: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8372: V:1  | i32.const 0
#0. 8380: V:2  | i8x16.shl $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 8384: V:1  | drop
#0. 8388: V:0  | return
i8x16.shl() =>
>>> running export "i8x16.shr_s":
#0. 8392: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8412: V:1  | i32.const 0
#0. 8420: V:2  | i8x16.shr_s $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 8424: V:1  | drop
#0. 8428: V:0  | return
i8x16.shr_s() =>
>>> running export "i8x16.shr_u":
#0. 8432: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8452: V:1  | i32.const 0
#0. 8460: V:2  | i8x16.shr_u $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 8464: V:1  | drop
#0. 8468: V:0  | return
i8x16.shr_u() =>
>>> running export "i8x16.add":
#0. 8472: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8492: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 8512: V:2  | i8x16.add $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 8516: V:1  | drop
#0. 8520: V:0  | return
i8x16.add() =>
>>> running export "i8x16.add_saturate_s":
#0. 8524: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8544: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 8564: V:2  | i8x16.add_saturate_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 8568: V:1  | drop
#0. 8572: V:0  | return
i8x16.add_saturate_s() =>
>>> running export "i8x16.add_saturate_u":
#0. 8576: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8596: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 8616: V:2  | i8x16.add_saturate_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 8620: V:1  | drop
#0. 8624: V:0  | return
i8x16.add_saturate_u() =>
>>> running export "i8x16.sub":
#0. 8628: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8648: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 8668: V:2  | i8x16.sub $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 8672: V:1  | drop
#0. 8676: V:0  | return
i8x16.sub() =>
>>> running export "i8x16.sub_saturate_s":
#0. 8680: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8700: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 8720: V:2  | i8x16.sub_saturate_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 8724: V:1  | drop
#0. 8728: V:0  | return
i8x16.sub_saturate_s() =>
>>> running export "i8x16.sub_saturate_u":
#0. 8732: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8752: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 8772: V:2  | i8x16.sub_saturate_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 8776: V:1  | drop
#0. 8780: V:0  | return
i8x16.sub_saturate_u() =>
>>> running export "i8x16.mul":
#0. 8784: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8804: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 8824: V:2  | i8x16.mul $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 8828: V:1  | drop
#0. 8832: V:0  | return
i8x16.mul() =>
>>> running export "i16x8.neg":
#0. 8836: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8856: V:1  | i16x8.neg $0x00000001 0x00000001 0x00000001 0x00000001
#0. 8860: V:1  | drop
#0. 8864: V:0  | return
i16x8.neg() =>
>>> running export "i16x8.any_true":
#0. 8868: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8888: V:1  | i16x8.any_true $0x00000001 0x00000001 0x00000001 0x00000001
#0. 8892: V:1  | drop
#0. 8896: V:0  | return
i16x8.any_true() =>
>>> running export "i16x8.all_true":
#0. 8900: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8920: V:1  | i16x8.all_true $0x00000001 0x00000001 0x00000001 0x00000001
#0. 8924: V:1  | drop
#0. 8928: V:0  | return
i16x8.all_true() =>
>>> running export "i16x8.shl":
#0. 8932: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8952: V:1  | i32.const 0
#0. 8960: V:2  | i16x8.shl $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 8964: V:1  | drop
#0. 8968: V:0  | return
i16x8.shl() =>
>>> running export "i16x8.shr_s":
#0. 8972: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8992: V:1  | i32.const 0
#0. 9000: V:2  | i16x8.shr_s $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 9004: V:1  | drop
#0. 9008: V:0  | return
i16x8.shr_s() =>
>>> running export "i16x8.shr_u":
#0. 9012: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9032: V:1  | i32.const 0
#0. 9040: V:2  | i16x8.shr_u $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 9044: V:1  | drop
#0. 9048: V:0  | return
i16x8.shr_u() =>
>>> running export "i16x8.add":
#0. 9052: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9072: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 9092: V:2  | i16x8.add $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 9096: V:1  | drop
#0. 9100: V:0  | return
i16x8.add() =>
>>> running export "i16x8.add_saturate_s":
#0. 9104: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9124: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 9144: V:2  | i16x8.add_saturate_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 9148: V:1  | drop
#0. 9152: V:0  | return
i16x8.add_saturate_s() =>
>>> running export "i16x8.add_saturate_u":
#0. 9156: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9176: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 9196: V:2  | i16x8.add_saturate_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 9200: V:1  | drop
#0. 9204: V:0  | return
i16x8.add_saturate_u() =>
>>> running export "i16x8.sub":
#0. 9208: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9228: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 9248: V:2  | i16x8.sub $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 9252: V:1  | drop
#0. 9256: V:0  | return
i16x8.sub() =>
>>> running export "i16x8.sub_saturate_s":
#0. 9260: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9280: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 9300: V:2  | i16x8.sub_saturate_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 9304: V:1  | drop
#0. 9308: V:0  | return
i16x8.sub_saturate_s() =>
>>> running export "i16x8.sub_saturate_u":
#0. 9312: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9332: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 9352: V:2  | i16x8.sub_saturate_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 9356: V:1  | drop
#0. 9360: V:0  | return
i16x8.sub_saturate_u() =>
>>> running export "i16x8.mul":
#0. 9364: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9384: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 9404: V:2  | i16x8.mul $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 9408: V:1  | drop
#0. 9412: V:0  | return
i16x8.mul() =>
>>> running export "i32x4.neg":
#0. 9416: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9436: V:1  | i32x4.neg $0x00000001 0x00000001 0x00000001 0x00000001
#0. 9440: V:1  | drop
#0. 9444: V:0  | return
i32x4.neg() =>
>>> running export "i32x4.any_true":
#0. 9448: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9468: V:1  | i32x4.any_true $0x00000001 0x00000001 0x00000001 0x00000001
#0. 9472: V:1  | drop
#0. 9476: V:0  | return
i32x4.any_true() =>
>>> running export "i32x4.all_true":
#0. 9480: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9500: V:1  | i32x4.all_true $0x00000001 0x00000001 0x00000001 0x00000001
#0. 9504: V:1  | drop
#0. 9508: V:0  | return
i32x4.all_true() =>
>>> running export "i32x4.shl":
#0. 9512: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9532: V:1  | i32.const 0
#0. 9540: V:2  | i32x4.shl $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 9544: V:1  | drop
#0. 9548: V:0  | return
i32x4.shl() =>
>>> running export "i32x4.shr_s":
#0. 9552: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9572: V:1  | i32.const 0
#0. 9580: V:2  | i32x4.shr_s $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 9584: V:1  | drop
#0. 9588: V:0  | return
i32x4.shr_s() =>
>>> running export "i32x4.shr_u":
#0. 9592: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9612: V:1  | i32.const 0
#0. 9620: V:2  | i32x4.shr_u $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 9624: V:1  | drop
#0. 9628: V:0  | return
i32x4.shr_u() =>
>>> running export "i32x4.add":
#0. 9632: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9652: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 9672: V:2  | i32x4.add $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 9676: V:1  | drop
#0. 9680: V:0  | return
i32x4.add() =>
>>> running export "i32x4.sub":
#0. 9684: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9704: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 9724: V:2  | i32x4.sub $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 9728: V:1  | drop
#0. 9732: V:0  | return
i32x4.sub() =>
>>> running export "i32x4.mul":
#0. 9736: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9756: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 9776: V:2  | i32x4.mul $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 9780: V:1  | drop
#0. 9784: V:0  | return
i32x4.mul() =>
>>> running export "i64x2.neg":
#0. 9788: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9808: V:1  | i64x2.neg $0x00000001 0x00000001 0x00000001 0x00000001
#0. 9812: V:1  | drop
#0. 9816: V:0  | return
i64x2.neg() =>
>>> running export "i64x2.any_true":
#0. 9820: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9840: V:1  | i64x2.any_true $0x00000001 0x00000001 0x00000001 0x00000001
#0. 9844: V:1  | drop
#0. 9848: V:0  | return
i64x2.any_true() =>
>>> running export "i64x2.all_true":
#0. 9852: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9872: V:1  | i64x2.all_true $0x00000001 0x00000001 0x00000001 0x00000001
#0. 9876: V:1  | drop
#0. 9880: V:0  | return
i64x2.all_true() =>
>>> running export "i64x2.shl":
#0. 9884: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9904: V:1  | i32.const 0
#0. 9912: V:2  | i64x2.shl $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 9916: V:1  | drop
#0. 9920: V:0  | return
i64x2.shl() =>
>>> running export "i64x2.shr_s":
#0. 9924: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9944: V:1  | i32.const 0
#0. 9952: V:2  | i64x2.shr_s $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 9956: V:1  | drop
#0. 9960: V:0  | return
i64x2.shr_s() =>
>>> running export "i64x2.shr_u":
#0. 9964: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9984: V:1  | i32.const 0
#0. 9992: V:2  | i64x2.shr_u $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 9996: V:1  | drop
#0. 10000: V:0  | return
i64x2.shr_u() =>
>>> running export "i64x2.add":
#0. 10004: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10024: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 10044: V:2  | i64x2.add $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10048: V:1  | drop
#0. 10052: V:0  | return
i64x2.add() =>
>>> running export "i64x2.sub":
#0. 10056: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10076: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 10096: V:2  | i64x2.sub $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10100: V:1  | drop
#0. 10104: V:0  | return
i64x2.sub() =>
>>> running export "f32x4.abs":
#0. 10108: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10128: V:1  | f32x4.abs $0x00000001 0x00000001 0x00000001 0x00000001
#0. 10132: V:1  | drop
#0. 10136: V:0  | return
f32x4.abs() =>
>>> running export "f32x4.neg":
#0. 10140: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10160: V:1  | f32x4.neg $0x00000001 0x00000001 0x00000001 0x00000001
#0. 10164: V:1  | drop
#0. 10168: V:0  | return
f32x4.neg() =>
>>> running export "f32x4.sqrt":
#0. 10172: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10192: V:1  | f32x4.sqrt $0x00000001 0x00000001 0x00000001 0x00000001
#0. 10196: V:1  | drop
#0. 10200: V:0  | return
f32x4.sqrt() =>
>>> running export "f32x4.add":
#0. 10204: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10224: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 10244: V:2  | f32x4.add $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10248: V:1  | drop
#0. 10252: V:0  | return
f32x4.add() =>
>>> running export "f32x4.sub":
#0. 10256: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10276: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 10296: V:2  | f32x4.sub $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10300: V:1  | drop
#0. 10304: V:0  | return
f32x4.sub() =>
>>> running export "f32x4.mul":
#0. 10308: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10328: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 10348: V:2  | f32x4.mul $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10352: V:1  | drop
#0. 10356: V:0  | return
f32x4.mul() =>
>>> running export "f32x4.div":
#0. 10360: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10380: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 10400: V:2  | f32x4.div $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10404: V:1  | drop
#0. 10408: V:0  | return
f32x4.div() =>
>>> running export "f32x4.min":
#0. 10412: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10432: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 10452: V:2  | f32x4.min $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10456: V:1  | drop
#0. 10460: V:0  | return
f32x4.min() =>
>>> running export "f32x4.max":
#0. 10464: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10484: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 10504: V:2  | f32x4.max $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10508: V:1  | drop
#0. 10512: V:0  | return
f32x4.max() =>
>>> running export "f64x2.abs":
#0. 10516: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10536: V:1  | f64x2.abs $0x00000001 0x00000001 0x00000001 0x00000001
#0. 10540: V:1  | drop
#0. 10544: V:0  | return
f64x2.abs() =>
>>> running export "f64x2.neg":
#0. 10548: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10568: V:1  | f64x2.neg $0x00000001 0x00000001 0x00000001 0x00000001
#0. 10572: V:1  | drop
#0. 10576: V:0  | return
f64x2.neg() =>
>>> running export "f64x2.sqrt":
#0. 10580: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10600: V:1  | f64x2.sqrt $0x00000001 0x00000001 0x00000001 0x00000001
#0. 10604: V:1  | drop
#0. 10608: V:0  | return
f64x2.sqrt() =>
>>> running export "f64x2.add":
#0. 10612: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10632: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 10652: V:2  | f64x2.add $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10656: V:1  | drop
#0. 10660: V:0  | return
f64x2.add() =>
>>> running export "f64x2.sub":
#0. 10664: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10684: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 10704: V:2  | f64x2.sub $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10708: V:1  | drop
#0. 10712: V:0  | return
f64x2.sub() =>
>>> running export "f64x2.mul":
#0. 10716: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10736: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 10756: V:2  | f64x2.mul $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10760: V:1  | drop
#0. 10764: V:0  | return
f64x2.mul() =>
>>> running export "f64x2.div":
#0. 10768: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10788: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 10808: V:2  | f64x2.div $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10812: V:1  | drop
#0. 10816: V:0  | return
f64x2.div() =>
>>> running export "f64x2.min":
#0. 10820: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10840: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 10860: V:2  | f64x2.min $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10864: V:1  | drop
#0. 10868: V:0  | return
f64x2.min() =>
>>> running export "f64x2.max":
#0. 10872: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10892: V:1  | v128.const 0x00000002 0x00000002 0x00000002 0x00000002
#0. 10912: V:2  | f64x2.max $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10916: V:1  | drop
#0. 10920: V:0  | return
f64x2.max() =>
>>> running export "i32x4.trunc_sat_f32x4_s":
#0. 10924: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10944: V:1  | i32x4.trunc_sat_f32x4_s $0x00000001 0x00000001 0x00000001 0x00000001
#0. 10948: V:1  | drop
#0. 10952: V:0  | return
i32x4.trunc_sat_f32x4_s() =>
>>> running export "i32x4.trunc_sat_f32x4_u":
#0. 10956: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10976: V:1  | i32x4.trunc_sat_f32x4_u $0x00000001 0x00000001 0x00000001 0x00000001
#0. 10980: V:1  | drop
#0. 10984: V:0  | return
i32x4.trunc_sat_f32x4_u() =>
>>> running export "i64x2.trunc_sat_f64x2_s":
#0. 10988: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 11008: V:1  | i64x2.trunc_sat_f64x2_s $0x00000001 0x00000001 0x00000001 0x00000001
#0. 11012: V:1  | drop
#0. 11016: V:0  | return
i64x2.trunc_sat_f64x2_s() =>
>>> running export "i64x2.trunc_sat_f64x2_u":
#0. 11020: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 11040: V:1  | i64x2.trunc_sat_f64x2_u $0x00000001 0x00000001 0x00000001 0x00000001
#0. 11044: V:1  | drop
#0. 11048: V:0  | return
i64x2.trunc_sat_f64x2_u() =>
>>> running export "f32x4.convert_i32x4_s":
#0. 11052: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 11072: V:1  | f32x4.convert_i32x4_s $0x00000001 0x00000001 0x00000001 0x00000001
#0. 11076: V:1  | drop
#0. 11080: V:0  | return
f32x4.convert_i32x4_s() =>
>>> running export "f32x4.convert_i32x4_u":
#0. 11084: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 11104: V:1  | f32x4.convert_i32x4_u $0x00000001 0x00000001 0x00000001 0x00000001
#0. 11108: V:1  | drop
#0. 11112: V:0  | return
f32x4.convert_i32x4_u() =>
>>> running export "f64x2.convert_i64x2_s":
#0. 11116: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 11136: V:1  | f64x2.convert_i64x2_s $0x00000001 0x00000001 0x00000001 0x00000001
#0. 11140: V:1  | drop
#0. 11144: V:0  | return
f64x2.convert_i64x2_s() =>
>>> running export "f64x2.convert_i64x2_u":
#0. 11148: V:0  | v128.const 0x00000001 0x00000001 0x00000001 0x00000001
#0. 11168: V:1  | f64x2.convert_i64x2_u $0x00000001 0x00000001 0x00000001 0x00000001
#0. 11172: V:1  | drop
#0. 11176: V:0  | return
f64x2.convert_i64x2_u() =>
>>> running export "atomic.notify":
#0. 11180: V:0  | i32.const 1
#0. 11188: V:1  | i32.const 2
#0. 11196: V:2  | atomic.notify $0:1+$3, 2
atomic.notify() => error: unreachable executed
>>> running export "i32.atomic.wait":
#0. 11216: V:0  | i32.const 1
#0. 11224: V:1  | i32.const 2
#0. 11232: V:2  | i64.const 3
#0. 11244: V:3  | i32.atomic.wait $0:1+$3, 2, 3
i32.atomic.wait() => error: unreachable executed
>>> running export "i64.atomic.wait":
#0. 11264: V:0  | i32.const 1
#0. 11272: V:1  | i64.const 2
#0. 11284: V:2  | i64.const 3
#0. 11296: V:3  | i64.atomic.wait $0:1+$3, 2, 3
i64.atomic.wait() => error: unreachable executed
>>> running export "i32.atomic.load":
#0. 11316: V:0  | i32.const 1
#0. 11324: V:1  | i32.atomic.load $0:1+$3
#0. 11336: V:1  | drop
#0. 11340: V:0  | return
i32.atomic.load() =>
>>> running export "i64.atomic.load":
#0. 11344: V:0  | i32.const 1
#0. 11352: V:1  | i64.atomic.load $0:1+$7
#0. 11364: V:1  | drop
#0. 11368: V:0  | return
i64.atomic.load() =>
>>> running export "i32.atomic.load8_u":
#0. 11372: V:0  | i32.const 1
#0. 11380: V:1  | i32.atomic.load8_u $0:1+$3
#0. 11392: V:1  | drop
#0. 11396: V:0  | return
i32.atomic.load8_u() =>
>>> running export "i32.atomic.load16_u":
#0. 11400: V:0  | i32.const 1
#0. 11408: V:1  | i32.atomic.load16_u $0:1+$3
#0. 11420: V:1  | drop
#0. 11424: V:0  | return
i32.atomic.load16_u() =>
>>> running export "i64.atomic.load8_u":
#0. 11428: V:0  | i32.const 1
#0. 11436: V:1  | i64.atomic.load8_u $0:1+$3
#0. 11448: V:1  | drop
#0. 11452: V:0  | return
i64.atomic.load8_u() =>
>>> running export "i64.atomic.load16_u":
#0. 11456: V:0  | i32.const 1
#0. 11464: V:1  | i64.atomic.load16_u $0:1+$3
#0. 11476: V:1  | drop
#0. 11480: V:0  | return
i64.atomic.load16_u() =>
>>> running export "i64.atomic.load32_u":
#0. 11484: V:0  | i32.const 1
#0. 11492: V:1  | i64.atomic.load32_u $0:1+$3
#0. 11504: V:1  | drop
#0. 11508: V:0  | return
i64.atomic.load32_u() =>
>>> running export "i32.atomic.store":
#0. 11512: V:0  | i32.const 1
#0. 11520: V:1  | i32.const 2
#0. 11528: V:2  | i32.atomic.store $0:1+$3, 2
#0. 11540: V:0  | return
i32.atomic.store() =>
>>> running export "i64.atomic.store":
#0. 11544: V:0  | i32.const 1
#0. 11552: V:1  | i64.const 2
#0. 11564: V:2  | i64.atomic.store $0:1+$7, 2
#0. 11576: V:0  | return
i64.atomic.store() =>
>>> running export "i32.atomic.store8":
#0. 11580: V:0  | i32.const 1
#0. 11588: V:1  | i32.const 2
#0. 11596: V:2  | i32.atomic.store8 $0:1+$3, 2
#0. 11608: V:0  | return
i32.atomic.store8() =>
>>> running export "i32.atomic.store16":
#0. 11612: V:0  | i32.const 1
#0. 11620: V:1  | i32.const 2
#0. 11628: V:2  | i32.atomic.store16 $0:1+$3, 2
#0. 11640: V:0  | return
i32.atomic.store16() =>
>>> running export "i64.atomic.store8":
#0. 11644: V:0  | i32.const 1
#0. 11652: V:1  | i64.const 2
#0. 11664: V:2  | i64.atomic.store8 $0:1+$3, 2
#0. 11676: V:0  | return
i64.atomic.store8() =>
>>> running export "i64.atomic.store16":
#0. 11680: V:0  | i32.const 1
#0. 11688: V:1  | i64.const 2
#0. 11700: V:2  | i64.atomic.store16 $0:1+$3, 2
#0. 11712: V:0  | return
i64.atomic.store16() =>
>>> running export "i64.atomic.store32":
#0. 11716: V:0  | i32.const 1
#0. 11724: V:1  | i64.const 2
#0. 11736: V:2  | i64.atomic.store32 $0:1+$3, 2
#0. 11748: V:0  | return
i64.atomic.store32() =>
>>> running export "i32.atomic.rmw.add":
#0. 11752: V:0  | i32.const 1
#0. 11760: V:1  | i32.const 2
#0. 11768: V:2  | i32.atomic.rmw.add $0:1+$3, 2
#0. 11780: V:1  | drop
#0. 11784: V:0  | return
i32.atomic.rmw.add() =>
>>> running export "i64.atomic.rmw.add":
#0. 11788: V:0  | i32.const 1
#0. 11796: V:1  | i64.const 2
#0. 11808: V:2  | i64.atomic.rmw.add $0:1+$7, 2
#0. 11820: V:1  | drop
#0. 11824: V:0  | return
i64.atomic.rmw.add() =>
>>> running export "i32.atomic.rmw8.add_u":
#0. 11828: V:0  | i32.const 1
#0. 11836: V:1  | i32.const 2
#0. 11844: V:2  | i32.atomic.rmw8.add_u $0:1+$3, 2
#0. 11856: V:1  | drop
#0. 11860: V:0  | return
i32.atomic.rmw8.add_u() =>
>>> running export "i32.atomic.rmw16.add_u":
#0. 11864: V:0  | i32.const 1
#0. 11872: V:1  | i32.const 2
#0. 11880: V:2  | i32.atomic.rmw16.add_u $0:1+$3, 2
#0. 11892: V:1  | drop
#0. 11896: V:0  | return
i32.atomic.rmw16.add_u() =>
>>> running export "i64.atomic.rmw8.add_u":
#0. 11900: V:0  | i32.const 1
#0. 11908: V:1  | i64.const 2
#0. 11920: V:2  | i64.atomic.rmw8.add_u $0:1+$3, 2
#0. 11932: V:1  | drop
#0. 11936: V:0  | return
i64.atomic.rmw8.add_u() =>
>>> running export "i64.atomic.rmw16.add_u":
#0. 11940: V:0  | i32.const 1
#0. 11948: V:1  | i64.const 2
#0. 11960: V:2  | i64.atomic.rmw16.add_u $0:1+$3, 2
#0. 11972: V:1  | drop
#0. 11976: V:0  | return
i64.atomic.rmw16.add_u() =>
>>> running export "i64.atomic.rmw32.add_u":
#0. 11980: V:0  | i32.const 1
#0. 11988: V:1  | i64.const 2
#0. 12000: V:2  | i64.atomic.rmw32.add_u $0:1+$3, 2
#0. 12012: V:1  | drop
#0. 12016: V:0  | return
i64.atomic.rmw32.add_u() =>
>>> running export "i32.atomic.rmw.sub":
#0. 12020: V:0  | i32.const 1
#0. 12028: V:1  | i32.const 2
#0. 12036: V:2  | i32.atomic.rmw.sub $0:1+$3, 2
#0. 12048: V:1  | drop
#0. 12052: V:0  | return
i32.atomic.rmw.sub() =>
>>> running export "i64.atomic.rmw.sub":
#0. 12056: V:0  | i32.const 1
#0. 12064: V:1  | i64.const 2
#0. 12076: V:2  | i64.atomic.rmw.sub $0:1+$7, 2
#0. 12088: V:1  | drop
#0. 12092: V:0  | return
i64.atomic.rmw.sub() =>
>>> running export "i32.atomic.rmw8.sub_u":
#0. 12096: V:0  | i32.const 1
#0. 12104: V:1  | i32.const 2
#0. 12112: V:2  | i32.atomic.rmw8.sub_u $0:1+$3, 2
#0. 12124: V:1  | drop
#0. 12128: V:0  | return
i32.atomic.rmw8.sub_u() =>
>>> running export "i32.atomic.rmw16.sub_u":
#0. 12132: V:0  | i32.const 1
#0. 12140: V:1  | i32.const 2
#0. 12148: V:2  | i32.atomic.rmw16.sub_u $0:1+$3, 2
#0. 12160: V:1  | drop
#0. 12164: V:0  | return
i32.atomic.rmw16.sub_u() =>
>>> running export "i64.atomic.rmw8.sub_u":
#0. 12168: V:0  | i32.const 1
#0. 12176: V:1  | i64.const 2
#0. 12188: V:2  | i64.atomic.rmw8.sub_u $0:1+$3, 2
#0. 12200: V:1  | drop
#0. 12204: V:0  | return
i64.atomic.rmw8.sub_u() =>
>>> running export "i64.atomic.rmw16.sub_u":
#0. 12208: V:0  | i32.const 1
#0. 12216: V:1  | i64.const 2
#0. 12228: V:2  | i64.atomic.rmw16.sub_u $0:1+$3, 2
#0. 12240: V:1  | drop
#0. 12244: V:0  | return
i64.atomic.rmw16.sub_u() =>
>>> running export "i64.atomic.rmw32.sub_u":
#0. 12248: V:0  | i32.const 1
#0. 12256: V:1  | i64.const 2
#0. 12268: V:2  | i64.atomic.rmw32.sub_u $0:1+$3, 2
#0. 12280: V:1  | drop
#0. 12284: V:0  | return
i64.atomic.rmw32.sub_u() =>
>>> running export "i32.atomic.rmw.and":
#0. 12288: V:0  | i32.const 1
#0. 12296: V:1  | i32.const 2
#0. 12304: V:2  | i32.atomic.rmw.and $0:1+$3, 2
#0. 12316: V:1  | drop
#0. 12320: V:0  | return
i32.atomic.rmw.and() =>
>>> running export "i64.atomic.rmw.and":
#0. 12324: V:0  | i32.const 1
#0. 12332: V:1  | i64.const 2
#0. 12344: V:2  | i64.atomic.rmw.and $0:1+$7, 2
#0. 12356: V:1  | drop
#0. 12360: V:0  | return
i64.atomic.rmw.and() =>
>>> running export "i32.atomic.rmw8.and_u":
#0. 12364: V:0  | i32.const 1
#0. 12372: V:1  | i32.const 2
#0. 12380: V:2  | i32.atomic.rmw8.and_u $0:1+$3, 2
#0. 12392: V:1  | drop
#0. 12396: V:0  | return
i32.atomic.rmw8.and_u() =>
>>> running export "i32.atomic.rmw16.and_u":
#0. 12400: V:0  | i32.const 1
#0. 12408: V:1  | i32.const 2
#0. 12416: V:2  | i32.atomic.rmw16.and_u $0:1+$3, 2
#0. 12428: V:1  | drop
#0. 12432: V:0  | return
i32.atomic.rmw16.and_u() =>
>>> running export "i64.atomic.rmw8.and_u":
#0. 12436: V:0  | i32.const 1
#0. 12444: V:1  | i64.const 2
#0. 12456: V:2  | i64.atomic.rmw8.and_u $0:1+$3, 2
#0. 12468: V:1  | drop
#0. 12472: V:0  | return
i64.atomic.rmw8.and_u() =>
>>> running export "i64.atomic.rmw16.and_u":
#0. 12476: V:0  | i32.const 1
#0. 12484: V:1  | i64.const 2
#0. 12496: V:2  | i64.atomic.rmw16.and_u $0:1+$3, 2
#0. 12508: V:1  | drop
#0. 12512: V:0  | return
i64.atomic.rmw16.and_u() =>
>>> running export "i64.atomic.rmw32.and_u":
#0. 12516: V:0  | i32.const 1
#0. 12524: V:1  | i64.const 2
#0. 12536: V:2  | i64.atomic.rmw32.and_u $0:1+$3, 2
#0. 12548: V:1  | drop
#0. 12552: V:0  | return
i64.atomic.rmw32.and_u() =>
>>> running export "i32.atomic.rmw.or":
#0. 12556: V:0  | i32.const 1
#0. 12564: V:1  | i32.const 2
#0. 12572: V:2  | i32.atomic.rmw.or $0:1+$3, 2
#0. 12584: V:1  | drop
#0. 12588: V:0  | return
i32.atomic.rmw.or() =>
>>> running export "i64.atomic.rmw.or":
#0. 12592: V:0  | i32.const 1
#0. 12600: V:1  | i64.const 2
#0. 12612: V:2  | i64.atomic.rmw.or $0:1+$7, 2
#0. 12624: V:1  | drop
#0. 12628: V:0  | return
i64.atomic.rmw.or() =>
>>> running export "i32.atomic.rmw8.or_u":
#0. 12632: V:0  | i32.const 1
#0. 12640: V:1  | i32.const 2
#0. 12648: V:2  | i32.atomic.rmw8.or_u $0:1+$3, 2
#0. 12660: V:1  | drop
#0. 12664: V:0  | return
i32.atomic.rmw8.or_u() =>
>>> running export "i32.atomic.rmw16.or_u":
#0. 12668: V:0  | i32.const 1
#0. 12676: V:1  | i32.const 2
#0. 12684: V:2  | i32.atomic.rmw16.or_u $0:1+$3, 2
#0. 12696: V:1  | drop
#0. 12700: V:0  | return
i32.atomic.rmw16.or_u() =>
>>> running export "i64.atomic.rmw8.or_u":
#0. 12704: V:0  | i32.const 1
#0. 12712: V:1  | i64.const 2
#0. 12724: V:2  | i64.atomic.rmw8.or_u $0:1+$3, 2
#0. 12736: V:1  | drop
#0. 12740: V:0  | return
i64.atomic.rmw8.or_u() =>
>>> running export "i64.atomic.rmw16.or_u":
#0. 12744: V:0  | i32.const 1
#0. 12752: V:1  | i64.const 2
#0. 12764: V:2  | i64.atomic.rmw16.or_u $0:1+$3, 2
#0. 12776: V:1  | drop
#0. 12780: V:0  | return
i64.atomic.rmw16.or_u() =>
>>> running export "i64.atomic.rmw32.or_u":
#0. 12784: V:0  | i32.const 1
#0. 12792: V:1  | i64.const 2
#0. 12804: V:2  | i64.atomic.rmw32.or_u $0:1+$3, 2
#0. 12816: V:1  | drop
#0. 12820: V:0  | return
i64.atomic.rmw32.or_u() =>
>>> running export "i32.atomic.rmw.xor":
#0. 12824: V:0  | i32.const 1
#0. 12832: V:1  | i32.const 2
#0. 12840: V:2  | i32.atomic.rmw.xor $0:1+$3, 2
#0. 12852: V:1  | drop
#0. 12856: V:0  | return
i32.atomic.rmw.xor() =>
>>> running export "i64.atomic.rmw.xor":
#0. 12860: V:0  | i32.const 1
#0. 12868: V:1  | i64.const 2
#0. 12880: V:2  | i64.atomic.rmw.xor $0:1+$7, 2
#0. 12892: V:1  | drop
#0. 12896: V:0  | return
i64.atomic.rmw.xor() =>
>>> running export "i32.atomic.rmw8.xor_u":
#0. 12900: V:0  | i32.const 1
#0. 12908: V:1  | i32.const 2
#0. 12916: V:2  | i32.atomic.rmw8.xor_u $0:1+$3, 2
#0. 12928: V:1  | drop
#0. 12932: V:0  | return
i32.atomic.rmw8.xor_u() =>
>>> running export "i32.atomic.rmw16.xor_u":
#0. 12936: V:0  | i32.const 1
#0. 12944: V:1  | i32.const 2
#0. 12952: V:2  | i32.atomic.rmw16.xor_u $0:1+$3, 2
#0. 12964: V:1  | drop
#0. 12968: V:0  | return
i32.atomic.rmw16.xor_u() =>
>>> running export "i64.atomic.rmw8.xor_u":
#0. 12972: V:0  | i32.const 1
#0. 12980: V:1  | i64.const 2
#0. 12992: V:2  | i64.atomic.rmw8.xor_u $0:1+$3, 2
#0. 13004: V:1  | drop
#0. 13008: V:0  | return
i64.atomic.rmw8.xor_u() =>
>>> running export "i64.atomic.rmw16.xor_u":
#0. 13012: V:0  | i32.const 1
#0. 13020: V:1  | i64.const 2
#0. 13032: V:2  | i64.atomic.rmw16.xor_u $0:1+$3, 2
#0. 13044: V:1  | drop
#0. 13048: V:0  | return
i64.atomic.rmw16.xor_u() =>
>>> running export "i64.atomic.rmw32.xor_u":
#0. 13052: V:0  | i32.const 1
#0. 13060: V:1  | i64.const 2
#0. 13072: V:2  | i64.atomic.rmw32.xor_u $0:1+$3, 2
#0. 13084: V:1  | drop
#0. 13088: V:0  | return
i64.atomic.rmw32.xor_u() =>
>>> running export "i32.atomic.rmw.xchg":
#0. 13092: V:0  | i32.const 1
#0. 13100: V:1  | i32.const 2
#0. 13108: V:2  | i32.atomic.rmw.xchg $0:1+$3, 2
#0. 13120: V:1  | drop
#0. 13124: V:0  | return
i32.atomic.rmw.xchg() =>
>>> running export "i64.atomic.rmw.xchg":
#0. 13128: V:0  | i32.const 1
#0. 13136: V:1  | i64.const 2
#0. 13148: V:2  | i64.atomic.rmw.xchg $0:1+$7, 2
#0. 13160: V:1  | drop
#0. 13164: V:0  | return
i64.atomic.rmw.xchg() =>
>>> running export "i32.atomic.rmw8.xchg_u":
#0. 13168: V:0  | i32.const 1
#0. 13176: V:1  | i32.const 2
#0. 13184: V:2  | i32.atomic.rmw8.xchg_u $0:1+$3, 2
#0. 13196: V:1  | drop
#0. 13200: V:0  | return
i32.atomic.rmw8.xchg_u() =>
>>> running export "i32.atomic.rmw16.xchg_u":
#0. 13204: V:0  | i32.const 1
#0. 13212: V:1  | i32.const 2
#0. 13220: V:2  | i32.atomic.rmw16.xchg_u $0:1+$3, 2
#0. 13232: V:1  | drop
#0. 13236: V:0  | return
i32.atomic.rmw16.xchg_u() =>
>>> running export "i64.atomic.rmw8.xchg_u":
#0. 13240: V:0  | i32.const 1
#0. 13248: V:1  | i64.const 2
#0. 13260: V:2  | i64.atomic.rmw8.xchg_u $0:1+$3, 2
#0. 13272: V:1  | drop
#0. 13276: V:0  | return
i64.atomic.rmw8.xchg_u() =>
>>> running export "i64.atomic.rmw16.xchg_u":
#0. 13280: V:0  | i32.const 1
#0. 13288: V:1  | i64.const 2
#0. 13300: V:2  | i64.atomic.rmw16.xchg_u $0:1+$3, 2
#0. 13312: V:1  | drop
#0. 13316: V:0  | return
i64.atomic.rmw16.xchg_u() =>
>>> running export "i64.atomic.rmw32.xchg_u":
#0. 13320: V:0  | i32.const 1
#0. 13328: V:1  | i64.const 2
#0. 13340: V:2  | i64.atomic.rmw32.xchg_u $0:1+$3, 2
#0. 13352: V:1  | drop
#0. 13356: V:0  | return
i64.atomic.rmw32.xchg_u() =>
>>> running export "i32.atomic.rmw.cmpxchg":
#0. 13360: V:0  | i32.const 1
#0. 13368: V:1  | i32.const 2
#0. 13376: V:2  | i32.const 3
#0. 13384: V:3  | i32.atomic.rmw.cmpxchg $0:1+$3, 2, 3
#0. 13396: V:1  | drop
#0. 13400: V:0  | return
i32.atomic.rmw.cmpxchg() =>
>>> running export "i64.atomic.rmw.cmpxchg":
#0. 13404: V:0  | i32.const 1
#0. 13412: V:1  | i64.const 2
#0. 13424: V:2  | i64.const 3
#0. 13436: V:3  | i64.atomic.rmw.cmpxchg $0:1+$7, 2, 3
#0. 13448: V:1  | drop
#0. 13452: V:0  | return
i64.atomic.rmw.cmpxchg() =>
>>> running export "i32.atomic.rmw8.cmpxchg_u":
#0. 13456: V:0  | i32.const 1
#0. 13464: V:1  | i32.const 2
#0. 13472: V:2  | i32.const 3
#0. 13480: V:3  | i32.atomic.rmw8.cmpxchg_u $0:1+$3, 2, 3
#0. 13492: V:1  | drop
#0. 13496: V:0  | return
i32.atomic.rmw8.cmpxchg_u() =>
>>> running export "i32.atomic.rmw16.cmpxchg_u":
#0. 13500: V:0  | i32.const 1
#0. 13508: V:1  | i32.const 2
#0. 13516: V:2  | i32.const 3
#0. 13524: V:3  | i32.atomic.rmw16.cmpxchg_u $0:1+$3, 2, 3
#0. 13536: V:1  | drop
#0. 13540: V:0  | return
i32.atomic.rmw16.cmpxchg_u() =>
>>> running export "i64.atomic.rmw8.cmpxchg_u":
#0. 13544: V:0  | i32.const 1
#0. 13552: V:1  | i64.const 2
#0. 13564: V:2  | i64.const 3
#0. 13576: V:3  | i64.atomic.rmw8.cmpxchg_u $0:1+$3, 2, 3
#0. 13588: V:1  | drop
#0. 13592: V:0  | return
i64.atomic.rmw8.cmpxchg_u() =>
>>> running export "i64.atomic.rmw16.cmpxchg_u":
#0. 13596: V:0  | i32.const 1
#0. 13604: V:1  | i64.const 2
#0. 13616: V:2  | i64.const 3
#0. 13628: V:3  | i64.atomic.rmw16.cmpxchg_u $0:1+$3, 2, 3
#0. 13640: V:1  | drop
#0. 13644: V:0  | return
i64.atomic.rmw16.cmpxchg_u() =>
>>> running export "i64.atomic.rmw32.cmpxchg_u":
#0. 13648: V:0  | i32.const 1
#0. 13656: V:1  | i64.const 2
#0. 13668: V:2  | i64.const 3
#0. 13680: V:3  | i64.atomic.rmw32.cmpxchg_u $0:1+$3, 2, 3
#0. 13692: V:1  | drop
#0. 13696: V:0  | return
i64.atomic.rmw32.cmpxchg_u() =>
;;; STDOUT ;;)
