;;; TOOL: run-interp
(module
  (type $v_i (func (result i32)))
  (func $zero (type $v_i) (i32.const 0))
  (func $one (type $v_i) (i32.const 1))

  (func $nullary (param i32) (result i32)
    (call_indirect $v_i (get_local 0)))

  (type $ii_i (func (param i32 i32) (result i32)))
  (func $add (type $ii_i) (i32.add (get_local 0) (get_local 1)))
  (func $sub (type $ii_i) (i32.sub (get_local 0) (get_local 1)))

  (func $binary (param i32 i32 i32) (result i32)
    (call_indirect $ii_i (get_local 0) (get_local 1) (get_local 2)))

  (table anyfunc (elem $zero $one $add $sub))

  (func (export "test_zero") (result i32)
    (call $nullary (i32.const 0)))

  (func (export "test_one") (result i32)
    (call $nullary (i32.const 1)))

  (func (export "test_add") (result i32)
    (call $binary (i32.const 10) (i32.const 4) (i32.const 2)))

  (func (export "test_sub") (result i32)
    (call $binary (i32.const 10) (i32.const 4) (i32.const 3)))

  (func (export "trap_oob") (result i32)
    (call $binary (i32.const 10) (i32.const 4) (i32.const 4)))

  (func (export "trap_sig_mismatch") (result i32)
    (call $binary (i32.const 10) (i32.const 4) (i32.const 0))))
(;; STDOUT ;;;
test_zero() => i32:0
test_one() => i32:1
test_add() => i32:14
test_sub() => i32:6
trap_oob() => error: undefined table index
trap_sig_mismatch() => error: indirect call signature mismatch
;;; STDOUT ;;)
