;;; TOOL: run-interp
(module
  (memory 1)
  (data (i32.const 0) "\ff\ff\ff\ff")
  (data (i32.const 4) "\00\00\ce\41")
  (data (i32.const 8) "\00\00\00\00\00\ff\8f\40")
  (data (i32.const 16) "\ff\ff\ff\ff\ff\ff\ff\ff")

  (export "i32_load8_s" $i32_load8_s)
  (func $i32_load8_s (result i32) (i32.load8_s (i32.const 0)))
  (export "i32_load16_s" $i32_load16_s)
  (func $i32_load16_s (result i32) (i32.load16_s (i32.const 0)))
  (export "i32_load" $i32_load)
  (func $i32_load (result i32) (i32.load (i32.const 0)))

  (export "i32_load8_u" $i32_load8_u)
  (func $i32_load8_u (result i32) (i32.load8_u (i32.const 0)))
  (export "i32_load16_u" $i32_load16_u)
  (func $i32_load16_u (result i32) (i32.load16_u (i32.const 0)))

  ;; The JavaScript host truncates if you try to return an i64, so we'll do a
  ;; comparison against the expected value instead.

  (export "i64_load8_s" $i64_load8_s)
  (func $i64_load8_s (result i32) (i64.eq (i64.load8_s (i32.const 0))
                                          (i64.const -1)))
  (export "i64_load16_s" $i64_load16_s)
  (func $i64_load16_s (result i32) (i64.eq (i64.load16_s (i32.const 0))
                                           (i64.const -1)))
  (export "i64_load32_s" $i64_load32_s)
  (func $i64_load32_s (result i32) (i64.eq (i64.load32_s (i32.const 0))
                                           (i64.const -1)))

  (export "i64_load" $i64_load)
  (func $i64_load (result i32) (i64.eq (i64.load (i32.const 16))
                                       (i64.const -1)))

  (export "i64_load8_u" $i64_load8_u)
  (func $i64_load8_u (result i32) (i64.eq (i64.load8_u (i32.const 0))
                                          (i64.const 255)))
  (export "i64_load16_u" $i64_load16_u)
  (func $i64_load16_u (result i32) (i64.eq (i64.load16_u (i32.const 0))
                                           (i64.const 65535)))
  (export "i64_load32_u" $i64_load32_u)
  (func $i64_load32_u (result i32) (i64.eq (i64.load32_u (i32.const 0))
                                           (i64.const 4294967295)))

  (export "f32_load" $f32_load)
  (func $f32_load (result f32) (f32.load (i32.const 4)))

  (export "f64_load" $f64_load)
  (func $f64_load (result f64) (f64.load (i32.const 8)))
)
(;; STDOUT ;;;
i32_load8_s() => i32:4294967295
i32_load16_s() => i32:4294967295
i32_load() => i32:4294967295
i32_load8_u() => i32:255
i32_load16_u() => i32:65535
i64_load8_s() => i32:1
i64_load16_s() => i32:1
i64_load32_s() => i32:1
i64_load() => i32:1
i64_load8_u() => i32:1
i64_load16_u() => i32:1
i64_load32_u() => i32:1
f32_load() => f32:25.75
f64_load() => f64:1023.88
;;; STDOUT ;;)
