;;; TOOL: run-objdump
;;; ARGS0: --enable-simd

(module
  ;; i8x16 extract lane signed/unsigned
  (func (export  "func_i8x16_extract_lane_s_0") (result i32)
    v128.const i32x4 0x00000001 0x0000000f 0x000000ff 0x0000017f
    i8x16.extract_lane_s 8)
  (func (export  "func_i8x16_extract_lane_u_0") (result i32)
    v128.const i32x4 0x00000001 0x0000000f 0x000000ff 0x0000017f
    i8x16.extract_lane_u 8)

  ;; i16x8 extract lane signed/unsigned
  (func (export  "func_i16x8_extract_lane_s_0") (result i32)
    v128.const i32x4 0x00000001 0x0000000f 0x0000ffff 0x0000017f
    i16x8.extract_lane_s 4)
  (func (export  "func_i16x8_extract_lane_u_0") (result i32)
    v128.const i32x4 0x00000001 0x0000000f 0x0000ffff 0x0000017f
    i16x8.extract_lane_u 4)

  ;; i32x4 extract lane
  (func (export  "func_i32x4_extract_lane_0") (result i32)
    v128.const i32x4 0x00000001 0x0000000f 0x0000ffff 0x0000017f
    i32x4.extract_lane 2)

  ;; i64x2 extract lane
  (func (export  "func_i64x2_extract_lane_0") (result i64)
    v128.const i32x4 0x0000000f 0x00000000 0x0000ffff 0x0000017f
    i64x2.extract_lane 0)

  ;; f32x4 extract lane
  ;; For Floating num:
  ;; 1.5 = 0x3fc00000
  (func (export  "func_f32x4_extract_lane_0") (result f32)
    v128.const i32x4 0x00000001 0x3fc00000 0x0000ffff 0x0000017f
    f32x4.extract_lane 1)

  ;; f64x2 extract lane
  ;; For Double num:
  ;; 4.5 = 0x4012000000000000
  (func (export  "func_f64x2_extract_lane_0") (result f64)
    v128.const i32x4 0x00000000 0x40120000 0x0000ffff 0x0000017f
    f64x2.extract_lane 0)

  ;; i8x16 replace lane
  (func (export  "func_i8x16_replace_lane_0") (result v128)
    v128.const i32x4 0x00000001 0x0000000f 0x000000ff 0x0000017f
    i32.const 0xe5
    i8x16.replace_lane 8)

  ;; i16x8 replace lane
  (func (export  "func_i16x8_replace_lane_0") (result v128)
    v128.const i32x4 0x00000001 0x0000000f 0x0000ffff 0x0000017f
    i32.const 0xe5e6
    i16x8.replace_lane 4)

  ;; i32x4 replace lane
  (func (export  "func_i32x4_replace_lane_0") (result v128)
    v128.const i32x4 0x00000001 0x0000000f 0x0000ffff 0x0000017f
    i32.const 0x12345678
    i32x4.replace_lane 2)

  ;; i64x2 replace lane
  (func (export  "func_i64x2_replace_lane_0") (result v128)
    v128.const i32x4 0x0000000f 0x00000000 0x0000ffff 0x0000017f
    i64.const 0x0000123400005678
    i64x2.replace_lane 0)

  ;; f32x4 replace lane
  (func (export  "func_f32x4_replace_lane_0") (result v128)
    v128.const i32x4 0x00000001 0x00000000 0x0000ffff 0x0000017f
    f32.const 1.5
    f32x4.replace_lane 1)

  ;; f64x2 replace lane
  (func (export  "func_f64x2_replace_lane_0") (result v128)
    v128.const i32x4 0x0000789a 0xff880330 0x0000ffff 0x0000017f
    f64.const 4.5
    f64x2.replace_lane 0)

  ;; v8x16 shuffle2_imm
  (func (export  "func_v8x16_shuffle2_imm_0") (result v128)
    v128.const i32x4 0xff00ff01 0xff00ff0f 0xff00ffff 0xff00ff7f
    v128.const i32x4 0x00550055 0x00550055 0x00550055 0x00550155
    v8x16.shuffle2_imm 16 1 18 3 20 5 22 7 24 9 26 11 28 13 30 15)
)
(;; STDOUT ;;;

simd-lane.wasm:	file format wasm 0x1

Code Disassembly:

0001e6 func[0] <func_i8x16_extract_lane_s_0>:
 0001e7: fd 02 01 00 00 00 0f 00 00 | v128.const 0x00000001 0x0000000f 0x000000ff 0x0000017f
 0001f0: 00 ff 00 00 00 7f 01 00 00 | 
 0001f9: fd 05 08                   | i8x16.extract_lane_s 8
 0001fc: 0b                         | end
0001fe func[1] <func_i8x16_extract_lane_u_0>:
 0001ff: fd 02 01 00 00 00 0f 00 00 | v128.const 0x00000001 0x0000000f 0x000000ff 0x0000017f
 000208: 00 ff 00 00 00 7f 01 00 00 | 
 000211: fd 06 08                   | i8x16.extract_lane_u 8
 000214: 0b                         | end
000216 func[2] <func_i16x8_extract_lane_s_0>:
 000217: fd 02 01 00 00 00 0f 00 00 | v128.const 0x00000001 0x0000000f 0x0000ffff 0x0000017f
 000220: 00 ff ff 00 00 7f 01 00 00 | 
 000229: fd 09 04                   | i16x8.extract_lane_s 4
 00022c: 0b                         | end
00022e func[3] <func_i16x8_extract_lane_u_0>:
 00022f: fd 02 01 00 00 00 0f 00 00 | v128.const 0x00000001 0x0000000f 0x0000ffff 0x0000017f
 000238: 00 ff ff 00 00 7f 01 00 00 | 
 000241: fd 0a 04                   | i16x8.extract_lane_u 4
 000244: 0b                         | end
000246 func[4] <func_i32x4_extract_lane_0>:
 000247: fd 02 01 00 00 00 0f 00 00 | v128.const 0x00000001 0x0000000f 0x0000ffff 0x0000017f
 000250: 00 ff ff 00 00 7f 01 00 00 | 
 000259: fd 0d 02                   | i32x4.extract_lane 2
 00025c: 0b                         | end
00025e func[5] <func_i64x2_extract_lane_0>:
 00025f: fd 02 0f 00 00 00 00 00 00 | v128.const 0x0000000f 0x00000000 0x0000ffff 0x0000017f
 000268: 00 ff ff 00 00 7f 01 00 00 | 
 000271: fd 10 00                   | i64x2.extract_lane 0
 000274: 0b                         | end
000276 func[6] <func_f32x4_extract_lane_0>:
 000277: fd 02 01 00 00 00 00 00 c0 | v128.const 0x00000001 0x3fc00000 0x0000ffff 0x0000017f
 000280: 3f ff ff 00 00 7f 01 00 00 | 
 000289: fd 13 01                   | f32x4.extract_lane 1
 00028c: 0b                         | end
00028e func[7] <func_f64x2_extract_lane_0>:
 00028f: fd 02 00 00 00 00 00 00 12 | v128.const 0x00000000 0x40120000 0x0000ffff 0x0000017f
 000298: 40 ff ff 00 00 7f 01 00 00 | 
 0002a1: fd 16 00                   | f64x2.extract_lane 0
 0002a4: 0b                         | end
0002a6 func[8] <func_i8x16_replace_lane_0>:
 0002a7: fd 02 01 00 00 00 0f 00 00 | v128.const 0x00000001 0x0000000f 0x000000ff 0x0000017f
 0002b0: 00 ff 00 00 00 7f 01 00 00 | 
 0002b9: 41 e5 01                   | i32.const 229
 0002bc: fd 07 08                   | i8x16.replace_lane 8
 0002bf: 0b                         | end
0002c1 func[9] <func_i16x8_replace_lane_0>:
 0002c2: fd 02 01 00 00 00 0f 00 00 | v128.const 0x00000001 0x0000000f 0x0000ffff 0x0000017f
 0002cb: 00 ff ff 00 00 7f 01 00 00 | 
 0002d4: 41 e6 cb 03                | i32.const 58854
 0002d8: fd 0b 04                   | i16x8.replace_lane 4
 0002db: 0b                         | end
0002dd func[10] <func_i32x4_replace_lane_0>:
 0002de: fd 02 01 00 00 00 0f 00 00 | v128.const 0x00000001 0x0000000f 0x0000ffff 0x0000017f
 0002e7: 00 ff ff 00 00 7f 01 00 00 | 
 0002f0: 41 f8 ac d1 91 01          | i32.const 305419896
 0002f6: fd 0e 02                   | i32x4.replace_lane 2
 0002f9: 0b                         | end
0002fb func[11] <func_i64x2_replace_lane_0>:
 0002fc: fd 02 0f 00 00 00 00 00 00 | v128.const 0x0000000f 0x00000000 0x0000ffff 0x0000017f
 000305: 00 ff ff 00 00 7f 01 00 00 | 
 00030e: 42 f8 ac 81 80 c0 c6 04    | i64.const 20014547621496
 000316: fd 11 00                   | i64x2.replace_lane 0
 000319: 0b                         | end
00031b func[12] <func_f32x4_replace_lane_0>:
 00031c: fd 02 01 00 00 00 00 00 00 | v128.const 0x00000001 0x00000000 0x0000ffff 0x0000017f
 000325: 00 ff ff 00 00 7f 01 00 00 | 
 00032e: 43 00 00 c0 3f             | f32.const 0x1.8p+0
 000333: fd 14 01                   | f32x4.replace_lane 1
 000336: 0b                         | end
000338 func[13] <func_f64x2_replace_lane_0>:
 000339: fd 02 9a 78 00 00 30 03 88 | v128.const 0x0000789a 0xff880330 0x0000ffff 0x0000017f
 000342: ff ff ff 00 00 7f 01 00 00 | 
 00034b: 44 00 00 00 00 00 00 12 40 | f64.const 0x1.2p+2
 000354: fd 17 00                   | f64x2.replace_lane 0
 000357: 0b                         | end
000359 func[14] <func_v8x16_shuffle2_imm_0>:
 00035a: fd 02 01 ff 00 ff 0f ff 00 | v128.const 0xff00ff01 0xff00ff0f 0xff00ffff 0xff00ff7f
 000363: ff ff ff 00 ff 7f ff 00 ff | 
 00036c: fd 02 55 00 55 00 55 00 55 | v128.const 0x00550055 0x00550055 0x00550055 0x00550155
 000375: 00 55 00 55 00 55 01 55 00 | 
 00037e: fd 03 10 01 12 03 14 05 16 | v8x16.shuffle2_imm 0x03120110 0x07160514 0x0b1a0918 0x0f1e0d1c
 000387: 07 18 09 1a 0b 1c 0d 1e 0f | 
 000390: 0b                         | end
;;; STDOUT ;;)
