;;; FLAGS: -dv
(module
  (func
    (drop
      (i32.add
        (i32.sub
          (i32.mul
            (i32.div_s
              (i32.div_u
                (i32.rem_s
                  (i32.rem_u
                    (i32.and
                      (i32.or
                        (i32.xor
                          (i32.shl
                            (i32.shr_u
                              (i32.shr_s
                                (i32.rotl
                                  (i32.rotr
                                    (i32.const 0)
                                    (i32.const 0))
                                  (i32.const 0))
                                (i32.const 0))
                              (i32.const 0))
                            (i32.const 0))
                          (i32.const 0))
                        (i32.const 0))
                      (i32.const 0))
                    (i32.const 0))
                  (i32.const 0))
                (i32.const 0))
              (i32.const 0))
            (i32.const 0))
          (i32.const 0))
        (i32.const 0)))

    (drop
      (i64.add
        (i64.sub
          (i64.mul
            (i64.div_s
              (i64.div_u
                (i64.rem_s
                  (i64.rem_u
                    (i64.and
                      (i64.or
                        (i64.xor
                          (i64.shl
                            (i64.shr_u
                              (i64.shr_s
                                (i64.rotl
                                  (i64.rotr
                                    (i64.const 0)
                                    (i64.const 0))
                                  (i64.const 0))
                                (i64.const 0))
                              (i64.const 0))
                            (i64.const 0))
                          (i64.const 0))
                        (i64.const 0))
                      (i64.const 0))
                    (i64.const 0))
                  (i64.const 0))
                (i64.const 0))
              (i64.const 0))
            (i64.const 0))
          (i64.const 0))
        (i64.const 0)))

    (drop
      (f32.add
        (f32.sub
          (f32.mul
            (f32.div
              (f32.min
                (f32.max
                  (f32.copysign
                    (f32.const 0)
                    (f32.const 0))
                  (f32.const 0))
                (f32.const 0))
              (f32.const 0))
            (f32.const 0))
          (f32.const 0))
        (f32.const 0)))

    (drop
      (f64.add
        (f64.sub
          (f64.mul
            (f64.div
              (f64.min
                (f64.max
                  (f64.copysign
                    (f64.const 0)
                    (f64.const 0))
                  (f64.const 0))
                (f64.const 0))
              (f64.const 0))
            (f64.const 0))
          (f64.const 0))
        (f64.const 0)))

))

(;; STDOUT ;;;
0000000: 0061 736d                                  ; WASM_BINARY_MAGIC
0000004: 0c00 0000                                  ; WASM_BINARY_VERSION
; section "TYPE" (1)
0000008: 01                                         ; section code
0000009: 00                                         ; section size (guess)
000000a: 01                                         ; num types
; type 0
000000b: 40                                         ; function form
000000c: 00                                         ; num params
000000d: 00                                         ; num results
0000009: 04                                         ; FIXUP section size
; section "FUNCTION" (3)
000000e: 03                                         ; section code
000000f: 00                                         ; section size (guess)
0000010: 01                                         ; num functions
0000011: 00                                         ; function 0 signature index
000000f: 02                                         ; FIXUP section size
; section "CODE" (10)
0000012: 0a                                         ; section code
0000013: 00                                         ; section size (guess)
0000014: 01                                         ; num functions
; function body 0
0000015: 00                                         ; func body size (guess)
0000016: 00                                         ; local decl count
0000017: 10                                         ; OPCODE_I32_CONST
0000018: 00                                         ; i32 literal
0000019: 10                                         ; OPCODE_I32_CONST
000001a: 00                                         ; i32 literal
000001b: b6                                         ; OPCODE_I32_ROTR
000001c: 10                                         ; OPCODE_I32_CONST
000001d: 00                                         ; i32 literal
000001e: b7                                         ; OPCODE_I32_ROTL
000001f: 10                                         ; OPCODE_I32_CONST
0000020: 00                                         ; i32 literal
0000021: 4c                                         ; OPCODE_I32_SHR_S
0000022: 10                                         ; OPCODE_I32_CONST
0000023: 00                                         ; i32 literal
0000024: 4b                                         ; OPCODE_I32_SHR_U
0000025: 10                                         ; OPCODE_I32_CONST
0000026: 00                                         ; i32 literal
0000027: 4a                                         ; OPCODE_I32_SHL
0000028: 10                                         ; OPCODE_I32_CONST
0000029: 00                                         ; i32 literal
000002a: 49                                         ; OPCODE_I32_XOR
000002b: 10                                         ; OPCODE_I32_CONST
000002c: 00                                         ; i32 literal
000002d: 48                                         ; OPCODE_I32_OR
000002e: 10                                         ; OPCODE_I32_CONST
000002f: 00                                         ; i32 literal
0000030: 47                                         ; OPCODE_I32_AND
0000031: 10                                         ; OPCODE_I32_CONST
0000032: 00                                         ; i32 literal
0000033: 46                                         ; OPCODE_I32_REM_U
0000034: 10                                         ; OPCODE_I32_CONST
0000035: 00                                         ; i32 literal
0000036: 45                                         ; OPCODE_I32_REM_S
0000037: 10                                         ; OPCODE_I32_CONST
0000038: 00                                         ; i32 literal
0000039: 44                                         ; OPCODE_I32_DIV_U
000003a: 10                                         ; OPCODE_I32_CONST
000003b: 00                                         ; i32 literal
000003c: 43                                         ; OPCODE_I32_DIV_S
000003d: 10                                         ; OPCODE_I32_CONST
000003e: 00                                         ; i32 literal
000003f: 42                                         ; OPCODE_I32_MUL
0000040: 10                                         ; OPCODE_I32_CONST
0000041: 00                                         ; i32 literal
0000042: 41                                         ; OPCODE_I32_SUB
0000043: 10                                         ; OPCODE_I32_CONST
0000044: 00                                         ; i32 literal
0000045: 40                                         ; OPCODE_I32_ADD
0000046: 0b                                         ; OPCODE_DROP
0000047: 11                                         ; OPCODE_I64_CONST
0000048: 00                                         ; i64 literal
0000049: 11                                         ; OPCODE_I64_CONST
000004a: 00                                         ; i64 literal
000004b: b8                                         ; OPCODE_I64_ROTR
000004c: 11                                         ; OPCODE_I64_CONST
000004d: 00                                         ; i64 literal
000004e: b9                                         ; OPCODE_I64_ROTL
000004f: 11                                         ; OPCODE_I64_CONST
0000050: 00                                         ; i64 literal
0000051: 67                                         ; OPCODE_I64_SHR_S
0000052: 11                                         ; OPCODE_I64_CONST
0000053: 00                                         ; i64 literal
0000054: 66                                         ; OPCODE_I64_SHR_U
0000055: 11                                         ; OPCODE_I64_CONST
0000056: 00                                         ; i64 literal
0000057: 65                                         ; OPCODE_I64_SHL
0000058: 11                                         ; OPCODE_I64_CONST
0000059: 00                                         ; i64 literal
000005a: 64                                         ; OPCODE_I64_XOR
000005b: 11                                         ; OPCODE_I64_CONST
000005c: 00                                         ; i64 literal
000005d: 63                                         ; OPCODE_I64_OR
000005e: 11                                         ; OPCODE_I64_CONST
000005f: 00                                         ; i64 literal
0000060: 62                                         ; OPCODE_I64_AND
0000061: 11                                         ; OPCODE_I64_CONST
0000062: 00                                         ; i64 literal
0000063: 61                                         ; OPCODE_I64_REM_U
0000064: 11                                         ; OPCODE_I64_CONST
0000065: 00                                         ; i64 literal
0000066: 60                                         ; OPCODE_I64_REM_S
0000067: 11                                         ; OPCODE_I64_CONST
0000068: 00                                         ; i64 literal
0000069: 5f                                         ; OPCODE_I64_DIV_U
000006a: 11                                         ; OPCODE_I64_CONST
000006b: 00                                         ; i64 literal
000006c: 5e                                         ; OPCODE_I64_DIV_S
000006d: 11                                         ; OPCODE_I64_CONST
000006e: 00                                         ; i64 literal
000006f: 5d                                         ; OPCODE_I64_MUL
0000070: 11                                         ; OPCODE_I64_CONST
0000071: 00                                         ; i64 literal
0000072: 5c                                         ; OPCODE_I64_SUB
0000073: 11                                         ; OPCODE_I64_CONST
0000074: 00                                         ; i64 literal
0000075: 5b                                         ; OPCODE_I64_ADD
0000076: 0b                                         ; OPCODE_DROP
0000077: 13                                         ; OPCODE_F32_CONST
0000078: 0000 0000                                  ; f32 literal
000007c: 13                                         ; OPCODE_F32_CONST
000007d: 0000 0000                                  ; f32 literal
0000081: 7d                                         ; OPCODE_F32_COPYSIGN
0000082: 13                                         ; OPCODE_F32_CONST
0000083: 0000 0000                                  ; f32 literal
0000087: 7a                                         ; OPCODE_F32_MAX
0000088: 13                                         ; OPCODE_F32_CONST
0000089: 0000 0000                                  ; f32 literal
000008d: 79                                         ; OPCODE_F32_MIN
000008e: 13                                         ; OPCODE_F32_CONST
000008f: 0000 0000                                  ; f32 literal
0000093: 78                                         ; OPCODE_F32_DIV
0000094: 13                                         ; OPCODE_F32_CONST
0000095: 0000 0000                                  ; f32 literal
0000099: 77                                         ; OPCODE_F32_MUL
000009a: 13                                         ; OPCODE_F32_CONST
000009b: 0000 0000                                  ; f32 literal
000009f: 76                                         ; OPCODE_F32_SUB
00000a0: 13                                         ; OPCODE_F32_CONST
00000a1: 0000 0000                                  ; f32 literal
00000a5: 75                                         ; OPCODE_F32_ADD
00000a6: 0b                                         ; OPCODE_DROP
00000a7: 12                                         ; OPCODE_F64_CONST
00000a8: 0000 0000 0000 0000                        ; f64 literal
00000b0: 12                                         ; OPCODE_F64_CONST
00000b1: 0000 0000 0000 0000                        ; f64 literal
00000b9: 91                                         ; OPCODE_F64_COPYSIGN
00000ba: 12                                         ; OPCODE_F64_CONST
00000bb: 0000 0000 0000 0000                        ; f64 literal
00000c3: 8e                                         ; OPCODE_F64_MAX
00000c4: 12                                         ; OPCODE_F64_CONST
00000c5: 0000 0000 0000 0000                        ; f64 literal
00000cd: 8d                                         ; OPCODE_F64_MIN
00000ce: 12                                         ; OPCODE_F64_CONST
00000cf: 0000 0000 0000 0000                        ; f64 literal
00000d7: 8c                                         ; OPCODE_F64_DIV
00000d8: 12                                         ; OPCODE_F64_CONST
00000d9: 0000 0000 0000 0000                        ; f64 literal
00000e1: 8b                                         ; OPCODE_F64_MUL
00000e2: 12                                         ; OPCODE_F64_CONST
00000e3: 0000 0000 0000 0000                        ; f64 literal
00000eb: 8a                                         ; OPCODE_F64_SUB
00000ec: 12                                         ; OPCODE_F64_CONST
00000ed: 0000 0000 0000 0000                        ; f64 literal
00000f5: 89                                         ; OPCODE_F64_ADD
00000f6: 0b                                         ; OPCODE_DROP
; move data: [16, f7) -> [17, f8)
0000015: e101                                       ; FIXUP func body size
; move data: [14, f8) -> [15, f9)
0000013: e401                                       ; FIXUP section size
;; dump
0000000: 0061 736d 0c00 0000 0104 0140 0000 0302  
0000010: 0100 0ae4 0101 e101 0010 0010 00b6 1000  
0000020: b710 004c 1000 4b10 004a 1000 4910 0048  
0000030: 1000 4710 0046 1000 4510 0044 1000 4310  
0000040: 0042 1000 4110 0040 0b11 0011 00b8 1100  
0000050: b911 0067 1100 6611 0065 1100 6411 0063  
0000060: 1100 6211 0061 1100 6011 005f 1100 5e11  
0000070: 005d 1100 5c11 005b 0b13 0000 0000 1300  
0000080: 0000 007d 1300 0000 007a 1300 0000 0079  
0000090: 1300 0000 0078 1300 0000 0077 1300 0000  
00000a0: 0076 1300 0000 0075 0b12 0000 0000 0000  
00000b0: 0000 1200 0000 0000 0000 0091 1200 0000  
00000c0: 0000 0000 008e 1200 0000 0000 0000 008d  
00000d0: 1200 0000 0000 0000 008c 1200 0000 0000  
00000e0: 0000 008b 1200 0000 0000 0000 008a 1200  
00000f0: 0000 0000 0000 0089 0b                   
;;; STDOUT ;;)
