;;; TOOL: run-objdump
;;; ARGS0: --enable-simd

(module
  ;; i8x16 add
  (func (export "i8x16_add_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.add)

  ;; i16x8 add
  (func (export "i16x8_add_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.add)

  ;; i32x4 add
  (func (export "i32x4_add_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.add)

  ;; i64x2 add
  (func (export "i64x2_add_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i64x2.add)

  ;; i8x16 sub
  (func (export "i8x16_sub_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.sub)

  ;; i16x8 sub
  (func (export "i16x8_sub_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.sub)

  ;; i32x4 sub
  (func (export "i32x4_sub_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.sub)

  ;; i64x2 sub
  (func (export "i64x2_sub_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i64x2.sub)

  ;; i8x16 mul
  (func (export "i8x16_mul_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.mul)

  ;; i16x8 mul
  (func (export "i16x8_mul_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.mul)

  ;; i32x4 mul
  (func (export "i32x4_mul_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.mul)

  ;; i8x16 saturating add (signed and unsigned)
  (func (export "i8x16_add_saturate_signed_0") (result v128)
    v128.const i32x4 0x00000001 0x0000007f 0x00000003 0x00000080
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x000000ff
    i8x16.add_saturate_s)
  (func (export "i8x16_add_saturate_unsigned_0") (result v128)
    v128.const i32x4 0x00ff0001 0x04000002 0x00000003 0x00000004
    v128.const i32x4 0x00020001 0xfe000002 0x00000003 0x00000004
    i8x16.add_saturate_u)

  ;; i16x8 saturating add (signed and unsigned)
  (func (export "i16x8_add_saturate_signed_0") (result v128)
    v128.const i32x4 0x00000001 0x00007fff 0x00000003 0x00008000
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x0000fffe
    i16x8.add_saturate_s)
  (func (export "i16x8_add_saturate_unsigned_0") (result v128)
    v128.const i32x4 0x00ffffff 0x0400ffff 0x00000003 0x00000004
    v128.const i32x4 0x00020001 0xfe000002 0x00000003 0x00000004
    i16x8.add_saturate_u)

  ;; i8x16 saturating sub (signed and unsigned)
  (func (export "i8x16_sub_saturate_signed_0") (result v128)
    v128.const i32x4 0x00000001 0x0000007f 0x000000fe 0x00000080
    v128.const i32x4 0x00000001 0x000000fe 0x0000007f 0x000000ff
    i8x16.sub_saturate_s)
  (func (export "i8x16_sub_saturate_unsigned_0") (result v128)
    v128.const i32x4 0x00ff0001 0x0400007f 0x0000fffe 0x00000004
    v128.const i32x4 0x00020001 0xfe00fffe 0x0000007f 0x00000004
    i8x16.sub_saturate_u)

  ;; i16x8 saturating sub (signed and unsigned)
  (func (export "i16x8_sub_saturate_signed_0") (result v128)
    v128.const i32x4 0x00000001 0x00007fff 0x0000fffe 0x00008000
    v128.const i32x4 0x00000001 0x0000fffe 0x00007fff 0x0000fffe
    i16x8.sub_saturate_s)
  (func (export "i16x8_sub_saturate_unsigned_0") (result v128)
    v128.const i32x4 0x00ffffff 0x0400ffff 0x00000003 0x00000004
    v128.const i32x4 0x00020001 0xfe000002 0x00000003 0x00000004
    i16x8.sub_saturate_u)

  ;; v128 and
  (func (export "v128_and_0") (result v128)
    v128.const i32x4 0x00ff0001 0x00040002 0x44000003 0x00000004
    v128.const i32x4 0x00020001 0x00fe0002 0x00000003 0x55000004
    v128.and)

  ;; v128 or
  (func (export "v128_or_0") (result v128)
    v128.const i32x4 0x00ff0001 0x00040002 0x44000003 0x00000004
    v128.const i32x4 0x00020001 0x00fe0002 0x00000003 0x55000004
    v128.or)

  ;; v128 xor
  (func (export "v128_xor_0") (result v128)
    v128.const i32x4 0x00ff0001 0x00040002 0x44000003 0x00000004
    v128.const i32x4 0x00020001 0x00fe0002 0x00000003 0x55000004
    v128.xor)

  ;; f32x4 min
  (func (export "f32x4_min_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xbf800000
    v128.const i32x4 0x00000000 0x3f800000 0x449a5000 0x3f800000
    f32x4.min)

  ;; f64x2 min
  (func (export "f64x2_min_0") (result v128)
    v128.const i32x4 0x00000000 0x00000000 0x00000000 0xfff80000
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.min)

  ;; f32x4 max
  (func (export "f32x4_max_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xbf800000
    v128.const i32x4 0x00000000 0x3f800000 0x449a5000 0x3f800000
    f32x4.max)

  ;; f64x2 max
  (func (export "f64x2_max_0") (result v128)
    v128.const i32x4 0x00000000 0x00000000 0x00000000 0xfff80000
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.max)

  ;; f32x4 add
  (func (export "f32x4_add_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xc49a5000
    v128.const i32x4 0x00000000 0x3f800000 0x3f800000 0x3fc00000
    f32x4.add)

  ;; f64x2 add
  (func (export "f64x2_add_0") (result v128)
    v128.const i32x4 0x00000000 0x3ff80000 0x00000000 0xfff80000
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.add)

  ;; f32x4 sub
  (func (export "f32x4_sub_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xc49a5000
    v128.const i32x4 0x00000000 0x3f800000 0x3f800000 0x3fc00000
    f32x4.sub)

  ;; f64x2 sub
  (func (export "f64x2_sub_0") (result v128)
    v128.const i32x4 0x00000000 0x3ff80000 0x00000000 0xfff80000
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.sub)

  ;; f32x4 div
  (func (export "f32x4_div_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x3fc00000 0xc0400000
    v128.const i32x4 0x00000000 0x3f800000 0x3f800000 0x3fc00000
    f32x4.div)

  ;; f64x2 div
  (func (export "f64x2_div_0") (result v128)
    v128.const i32x4 0x00000000 0x3ff80000 0x00000000 0xc0080000
    v128.const i32x4 0x00000000 0x3ff00000 0x00000000 0x3ff80000
    f64x2.div)

  ;; f32x4 mul
  (func (export "f32x4_mul_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x3fc00000 0xc0400000
    v128.const i32x4 0x00000000 0x3f800000 0x3f800000 0x3fc00000
    f32x4.mul)

  ;; f64x2 mul
  (func (export "f64x2_mul_0") (result v128)
    v128.const i32x4 0x00000000 0x3ff80000 0x00000000 0xc0080000
    v128.const i32x4 0x00000000 0x3ff00000 0x00000000 0x3ff80000
    f64x2.mul)

  ;; i8x16.narrow_i16x8_s
  (func (export "i8x16.narrow_i16x8_s") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.narrow_i16x8_s)

  ;; i8x16.narrow_i16x8_u
  (func (export "i8x16.narrow_i16x8_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.narrow_i16x8_u)

  ;; i16x8.narrow_i32x4_s
  (func (export "i16x8.narrow_i32x4_s") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.narrow_i32x4_s)

  ;; i16x8.narrow_i32x4_u
  (func (export "i16x8.narrow_i32x4_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.narrow_i32x4_u)

  ;; i16x8.widen_low_i8x16_s
  (func (export "i16x8.widen_low_i8x16_s") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.widen_low_i8x16_s)

  ;; i16x8.widen_high_i8x16_s
  (func (export "i16x8.widen_high_i8x16_s") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.widen_high_i8x16_s)

  ;; i16x8.widen_low_i8x16_u
  (func (export "i16x8.widen_low_i8x16_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.widen_low_i8x16_u)

  ;; i16x8.widen_high_i8x16_u
  (func (export "i16x8.widen_high_i8x16_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.widen_high_i8x16_u)

  ;; i32x4.widen_low_i16x8_s
  (func (export "i32x4.widen_low_i16x8_s") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.widen_low_i16x8_s)

  ;; i32x4.widen_high_i16x8_s
  (func (export "i32x4.widen_high_i16x8_s") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.widen_high_i16x8_s)

  ;; i32x4.widen_low_i16x8_u
  (func (export "i32x4.widen_low_i16x8_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.widen_low_i16x8_u)

  ;; i32x4.widen_high_i16x8_u
  (func (export "i32x4.widen_high_i16x8_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.widen_high_i16x8_u)
)

(;; STDOUT ;;;

simd-binary.wasm:	file format wasm 0x1

Code Disassembly:

0003d9 func[0] <i8x16_add_0>:
 0003da: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0003e3: 00 03 00 00 00 04 00 00 00 | 
 0003ec: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0003f5: 00 03 00 00 00 04 00 00 00 | 
 0003fe: fd 57                      | i8x16.add
 000400: 0b                         | end
000402 func[1] <i16x8_add_0>:
 000403: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00040c: 00 03 00 00 00 04 00 00 00 | 
 000415: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00041e: 00 03 00 00 00 04 00 00 00 | 
 000427: fd 68                      | i16x8.add
 000429: 0b                         | end
00042b func[2] <i32x4_add_0>:
 00042c: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000435: 00 03 00 00 00 04 00 00 00 | 
 00043e: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000447: 00 03 00 00 00 04 00 00 00 | 
 000450: fd 79                      | i32x4.add
 000452: 0b                         | end
000454 func[3] <i64x2_add_0>:
 000455: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00045e: 00 03 00 00 00 04 00 00 00 | 
 000467: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000470: 00 03 00 00 00 04 00 00 00 | 
 000479: fd 8a 01                   | i64x2.add
 00047c: 0b                         | end
00047e func[4] <i8x16_sub_0>:
 00047f: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000488: 00 03 00 00 00 04 00 00 00 | 
 000491: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00049a: 00 03 00 00 00 04 00 00 00 | 
 0004a3: fd 5a                      | i8x16.sub
 0004a5: 0b                         | end
0004a7 func[5] <i16x8_sub_0>:
 0004a8: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0004b1: 00 03 00 00 00 04 00 00 00 | 
 0004ba: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0004c3: 00 03 00 00 00 04 00 00 00 | 
 0004cc: fd 6b                      | i16x8.sub
 0004ce: 0b                         | end
0004d0 func[6] <i32x4_sub_0>:
 0004d1: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0004da: 00 03 00 00 00 04 00 00 00 | 
 0004e3: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0004ec: 00 03 00 00 00 04 00 00 00 | 
 0004f5: fd 7c                      | i32x4.sub
 0004f7: 0b                         | end
0004f9 func[7] <i64x2_sub_0>:
 0004fa: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000503: 00 03 00 00 00 04 00 00 00 | 
 00050c: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000515: 00 03 00 00 00 04 00 00 00 | 
 00051e: fd 8d 01                   | i64x2.sub
 000521: 0b                         | end
000523 func[8] <i8x16_mul_0>:
 000524: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00052d: 00 03 00 00 00 04 00 00 00 | 
 000536: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00053f: 00 03 00 00 00 04 00 00 00 | 
 000548: fd 5d                      | i8x16.mul
 00054a: 0b                         | end
00054c func[9] <i16x8_mul_0>:
 00054d: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000556: 00 03 00 00 00 04 00 00 00 | 
 00055f: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000568: 00 03 00 00 00 04 00 00 00 | 
 000571: fd 6e                      | i16x8.mul
 000573: 0b                         | end
000575 func[10] <i32x4_mul_0>:
 000576: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00057f: 00 03 00 00 00 04 00 00 00 | 
 000588: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000591: 00 03 00 00 00 04 00 00 00 | 
 00059a: fd 7f                      | i32x4.mul
 00059c: 0b                         | end
00059e func[11] <i8x16_add_saturate_signed_0>:
 00059f: fd 02 01 00 00 00 7f 00 00 | v128.const 0x00000001 0x0000007f 0x00000003 0x00000080
 0005a8: 00 03 00 00 00 80 00 00 00 | 
 0005b1: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x000000ff
 0005ba: 00 03 00 00 00 ff 00 00 00 | 
 0005c3: fd 58                      | i8x16.add_saturate_s
 0005c5: 0b                         | end
0005c7 func[12] <i8x16_add_saturate_unsigned_0>:
 0005c8: fd 02 01 00 ff 00 02 00 00 | v128.const 0x00ff0001 0x04000002 0x00000003 0x00000004
 0005d1: 04 03 00 00 00 04 00 00 00 | 
 0005da: fd 02 01 00 02 00 02 00 00 | v128.const 0x00020001 0xfe000002 0x00000003 0x00000004
 0005e3: fe 03 00 00 00 04 00 00 00 | 
 0005ec: fd 59                      | i8x16.add_saturate_u
 0005ee: 0b                         | end
0005f0 func[13] <i16x8_add_saturate_signed_0>:
 0005f1: fd 02 01 00 00 00 ff 7f 00 | v128.const 0x00000001 0x00007fff 0x00000003 0x00008000
 0005fa: 00 03 00 00 00 00 80 00 00 | 
 000603: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x0000fffe
 00060c: 00 03 00 00 00 fe ff 00 00 | 
 000615: fd 69                      | i16x8.add_saturate_s
 000617: 0b                         | end
000619 func[14] <i16x8_add_saturate_unsigned_0>:
 00061a: fd 02 ff ff ff 00 ff ff 00 | v128.const 0x00ffffff 0x0400ffff 0x00000003 0x00000004
 000623: 04 03 00 00 00 04 00 00 00 | 
 00062c: fd 02 01 00 02 00 02 00 00 | v128.const 0x00020001 0xfe000002 0x00000003 0x00000004
 000635: fe 03 00 00 00 04 00 00 00 | 
 00063e: fd 6a                      | i16x8.add_saturate_u
 000640: 0b                         | end
000642 func[15] <i8x16_sub_saturate_signed_0>:
 000643: fd 02 01 00 00 00 7f 00 00 | v128.const 0x00000001 0x0000007f 0x000000fe 0x00000080
 00064c: 00 fe 00 00 00 80 00 00 00 | 
 000655: fd 02 01 00 00 00 fe 00 00 | v128.const 0x00000001 0x000000fe 0x0000007f 0x000000ff
 00065e: 00 7f 00 00 00 ff 00 00 00 | 
 000667: fd 5b                      | i8x16.sub_saturate_s
 000669: 0b                         | end
00066b func[16] <i8x16_sub_saturate_unsigned_0>:
 00066c: fd 02 01 00 ff 00 7f 00 00 | v128.const 0x00ff0001 0x0400007f 0x0000fffe 0x00000004
 000675: 04 fe ff 00 00 04 00 00 00 | 
 00067e: fd 02 01 00 02 00 fe ff 00 | v128.const 0x00020001 0xfe00fffe 0x0000007f 0x00000004
 000687: fe 7f 00 00 00 04 00 00 00 | 
 000690: fd 5c                      | i8x16.sub_saturate_u
 000692: 0b                         | end
000694 func[17] <i16x8_sub_saturate_signed_0>:
 000695: fd 02 01 00 00 00 ff 7f 00 | v128.const 0x00000001 0x00007fff 0x0000fffe 0x00008000
 00069e: 00 fe ff 00 00 00 80 00 00 | 
 0006a7: fd 02 01 00 00 00 fe ff 00 | v128.const 0x00000001 0x0000fffe 0x00007fff 0x0000fffe
 0006b0: 00 ff 7f 00 00 fe ff 00 00 | 
 0006b9: fd 6c                      | i16x8.sub_saturate_s
 0006bb: 0b                         | end
0006bd func[18] <i16x8_sub_saturate_unsigned_0>:
 0006be: fd 02 ff ff ff 00 ff ff 00 | v128.const 0x00ffffff 0x0400ffff 0x00000003 0x00000004
 0006c7: 04 03 00 00 00 04 00 00 00 | 
 0006d0: fd 02 01 00 02 00 02 00 00 | v128.const 0x00020001 0xfe000002 0x00000003 0x00000004
 0006d9: fe 03 00 00 00 04 00 00 00 | 
 0006e2: fd 6d                      | i16x8.sub_saturate_u
 0006e4: 0b                         | end
0006e6 func[19] <v128_and_0>:
 0006e7: fd 02 01 00 ff 00 02 00 04 | v128.const 0x00ff0001 0x00040002 0x44000003 0x00000004
 0006f0: 00 03 00 00 44 04 00 00 00 | 
 0006f9: fd 02 01 00 02 00 02 00 fe | v128.const 0x00020001 0x00fe0002 0x00000003 0x55000004
 000702: 00 03 00 00 00 04 00 00 55 | 
 00070b: fd 4d                      | v128.and
 00070d: 0b                         | end
00070f func[20] <v128_or_0>:
 000710: fd 02 01 00 ff 00 02 00 04 | v128.const 0x00ff0001 0x00040002 0x44000003 0x00000004
 000719: 00 03 00 00 44 04 00 00 00 | 
 000722: fd 02 01 00 02 00 02 00 fe | v128.const 0x00020001 0x00fe0002 0x00000003 0x55000004
 00072b: 00 03 00 00 00 04 00 00 55 | 
 000734: fd 4e                      | v128.or
 000736: 0b                         | end
000738 func[21] <v128_xor_0>:
 000739: fd 02 01 00 ff 00 02 00 04 | v128.const 0x00ff0001 0x00040002 0x44000003 0x00000004
 000742: 00 03 00 00 44 04 00 00 00 | 
 00074b: fd 02 01 00 02 00 02 00 fe | v128.const 0x00020001 0x00fe0002 0x00000003 0x55000004
 000754: 00 03 00 00 00 04 00 00 55 | 
 00075d: fd 4f                      | v128.xor
 00075f: 0b                         | end
000761 func[22] <f32x4_min_0>:
 000762: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xbf800000
 00076b: ff 00 50 9a 44 00 00 80 bf | 
 000774: fd 02 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x449a5000 0x3f800000
 00077d: 3f 00 50 9a 44 00 00 80 3f | 
 000786: fd 9e 01                   | f32x4.min
 000789: 0b                         | end
00078b func[23] <f64x2_min_0>:
 00078c: fd 02 00 00 00 00 00 00 00 | v128.const 0x00000000 0x00000000 0x00000000 0xfff80000
 000795: 00 00 00 00 00 00 00 f8 ff | 
 00079e: fd 02 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 0007a7: c0 00 00 00 00 00 00 f0 3f | 
 0007b0: fd a9 01                   | f64x2.min
 0007b3: 0b                         | end
0007b5 func[24] <f32x4_max_0>:
 0007b6: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xbf800000
 0007bf: ff 00 50 9a 44 00 00 80 bf | 
 0007c8: fd 02 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x449a5000 0x3f800000
 0007d1: 3f 00 50 9a 44 00 00 80 3f | 
 0007da: fd 9f 01                   | f32x4.max
 0007dd: 0b                         | end
0007df func[25] <f64x2_max_0>:
 0007e0: fd 02 00 00 00 00 00 00 00 | v128.const 0x00000000 0x00000000 0x00000000 0xfff80000
 0007e9: 00 00 00 00 00 00 00 f8 ff | 
 0007f2: fd 02 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 0007fb: c0 00 00 00 00 00 00 f0 3f | 
 000804: fd aa 01                   | f64x2.max
 000807: 0b                         | end
000809 func[26] <f32x4_add_0>:
 00080a: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xc49a5000
 000813: ff 00 50 9a 44 00 50 9a c4 | 
 00081c: fd 02 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x3f800000 0x3fc00000
 000825: 3f 00 00 80 3f 00 00 c0 3f | 
 00082e: fd 9a 01                   | f32x4.add
 000831: 0b                         | end
000833 func[27] <f64x2_add_0>:
 000834: fd 02 00 00 00 00 00 00 f8 | v128.const 0x00000000 0x3ff80000 0x00000000 0xfff80000
 00083d: 3f 00 00 00 00 00 00 f8 ff | 
 000846: fd 02 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 00084f: c0 00 00 00 00 00 00 f0 3f | 
 000858: fd a5 01                   | f64x2.add
 00085b: 0b                         | end
00085d func[28] <f32x4_sub_0>:
 00085e: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xc49a5000
 000867: ff 00 50 9a 44 00 50 9a c4 | 
 000870: fd 02 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x3f800000 0x3fc00000
 000879: 3f 00 00 80 3f 00 00 c0 3f | 
 000882: fd 9b 01                   | f32x4.sub
 000885: 0b                         | end
000887 func[29] <f64x2_sub_0>:
 000888: fd 02 00 00 00 00 00 00 f8 | v128.const 0x00000000 0x3ff80000 0x00000000 0xfff80000
 000891: 3f 00 00 00 00 00 00 f8 ff | 
 00089a: fd 02 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 0008a3: c0 00 00 00 00 00 00 f0 3f | 
 0008ac: fd a6 01                   | f64x2.sub
 0008af: 0b                         | end
0008b1 func[30] <f32x4_div_0>:
 0008b2: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x3fc00000 0xc0400000
 0008bb: ff 00 00 c0 3f 00 00 40 c0 | 
 0008c4: fd 02 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x3f800000 0x3fc00000
 0008cd: 3f 00 00 80 3f 00 00 c0 3f | 
 0008d6: fd 9d 01                   | f32x4.div
 0008d9: 0b                         | end
0008db func[31] <f64x2_div_0>:
 0008dc: fd 02 00 00 00 00 00 00 f8 | v128.const 0x00000000 0x3ff80000 0x00000000 0xc0080000
 0008e5: 3f 00 00 00 00 00 00 08 c0 | 
 0008ee: fd 02 00 00 00 00 00 00 f0 | v128.const 0x00000000 0x3ff00000 0x00000000 0x3ff80000
 0008f7: 3f 00 00 00 00 00 00 f8 3f | 
 000900: fd a8 01                   | f64x2.div
 000903: 0b                         | end
000905 func[32] <f32x4_mul_0>:
 000906: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x3fc00000 0xc0400000
 00090f: ff 00 00 c0 3f 00 00 40 c0 | 
 000918: fd 02 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x3f800000 0x3fc00000
 000921: 3f 00 00 80 3f 00 00 c0 3f | 
 00092a: fd 9c 01                   | f32x4.mul
 00092d: 0b                         | end
00092f func[33] <f64x2_mul_0>:
 000930: fd 02 00 00 00 00 00 00 f8 | v128.const 0x00000000 0x3ff80000 0x00000000 0xc0080000
 000939: 3f 00 00 00 00 00 00 08 c0 | 
 000942: fd 02 00 00 00 00 00 00 f0 | v128.const 0x00000000 0x3ff00000 0x00000000 0x3ff80000
 00094b: 3f 00 00 00 00 00 00 f8 3f | 
 000954: fd a7 01                   | f64x2.mul
 000957: 0b                         | end
000959 func[34] <i8x16.narrow_i16x8_s>:
 00095a: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000963: 00 03 00 00 00 04 00 00 00 | 
 00096c: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000975: 00 03 00 00 00 04 00 00 00 | 
 00097e: fd c6 01                   | i8x16.narrow_i16x8_s
 000981: 0b                         | end
000983 func[35] <i8x16.narrow_i16x8_u>:
 000984: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00098d: 00 03 00 00 00 04 00 00 00 | 
 000996: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00099f: 00 03 00 00 00 04 00 00 00 | 
 0009a8: fd c7 01                   | i8x16.narrow_i16x8_u
 0009ab: 0b                         | end
0009ad func[36] <i16x8.narrow_i32x4_s>:
 0009ae: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0009b7: 00 03 00 00 00 04 00 00 00 | 
 0009c0: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0009c9: 00 03 00 00 00 04 00 00 00 | 
 0009d2: fd c8 01                   | i16x8.narrow_i32x4_s
 0009d5: 0b                         | end
0009d7 func[37] <i16x8.narrow_i32x4_u>:
 0009d8: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0009e1: 00 03 00 00 00 04 00 00 00 | 
 0009ea: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0009f3: 00 03 00 00 00 04 00 00 00 | 
 0009fc: fd c9 01                   | i16x8.narrow_i32x4_u
 0009ff: 0b                         | end
000a01 func[38] <i16x8.widen_low_i8x16_s>:
 000a02: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a0b: 00 03 00 00 00 04 00 00 00 | 
 000a14: fd ca 01                   | i16x8.widen_low_i8x16_s
 000a17: 0b                         | end
000a19 func[39] <i16x8.widen_high_i8x16_s>:
 000a1a: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a23: 00 03 00 00 00 04 00 00 00 | 
 000a2c: fd cb 01                   | i16x8.widen_high_i8x16_s
 000a2f: 0b                         | end
000a31 func[40] <i16x8.widen_low_i8x16_u>:
 000a32: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a3b: 00 03 00 00 00 04 00 00 00 | 
 000a44: fd cc 01                   | i16x8.widen_low_i8x16_u
 000a47: 0b                         | end
000a49 func[41] <i16x8.widen_high_i8x16_u>:
 000a4a: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a53: 00 03 00 00 00 04 00 00 00 | 
 000a5c: fd cd 01                   | i16x8.widen_high_i8x16_u
 000a5f: 0b                         | end
000a61 func[42] <i32x4.widen_low_i16x8_s>:
 000a62: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a6b: 00 03 00 00 00 04 00 00 00 | 
 000a74: fd ce 01                   | i16x8.widen_low_i16x8_s
 000a77: 0b                         | end
000a79 func[43] <i32x4.widen_high_i16x8_s>:
 000a7a: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a83: 00 03 00 00 00 04 00 00 00 | 
 000a8c: fd cf 01                   | i16x8.widen_high_i16x8_s
 000a8f: 0b                         | end
000a91 func[44] <i32x4.widen_low_i16x8_u>:
 000a92: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a9b: 00 03 00 00 00 04 00 00 00 | 
 000aa4: fd d0 01                   | i16x8.widen_low_i16x8_u
 000aa7: 0b                         | end
000aa9 func[45] <i32x4.widen_high_i16x8_u>:
 000aaa: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000ab3: 00 03 00 00 00 04 00 00 00 | 
 000abc: fd d1 01                   | i16x8.widen_high_i16x8_u
 000abf: 0b                         | end
;;; STDOUT ;;)
