;;; TOOL: run-objdump
;;; ARGS0: --enable-simd

(module
  ;; i8x16 add
  (func (export "i8x16_add_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.add)

  ;; i16x8 add
  (func (export "i16x8_add_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.add)

  ;; i32x4 add
  (func (export "i32x4_add_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.add)

  ;; i64x2 add
  (func (export "i64x2_add_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i64x2.add)

  ;; i8x16 sub
  (func (export "i8x16_sub_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.sub)

  ;; i16x8 sub
  (func (export "i16x8_sub_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.sub)

  ;; i32x4 sub
  (func (export "i32x4_sub_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.sub)

  ;; i64x2 sub
  (func (export "i64x2_sub_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i64x2.sub)

  ;; i8x16 mul
  (func (export "i8x16_mul_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.mul)

  ;; i16x8 mul
  (func (export "i16x8_mul_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.mul)

  ;; i32x4 mul
  (func (export "i32x4_mul_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.mul)

  ;; i8x16 saturating add (signed and unsigned)
  (func (export "i8x16_add_saturate_signed_0") (result v128)
    v128.const i32x4 0x00000001 0x0000007f 0x00000003 0x00000080
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x000000ff
    i8x16.add_saturate_s)
  (func (export "i8x16_add_saturate_unsigned_0") (result v128)
    v128.const i32x4 0x00ff0001 0x04000002 0x00000003 0x00000004
    v128.const i32x4 0x00020001 0xfe000002 0x00000003 0x00000004
    i8x16.add_saturate_u)

  ;; i16x8 saturating add (signed and unsigned)
  (func (export "i16x8_add_saturate_signed_0") (result v128)
    v128.const i32x4 0x00000001 0x00007fff 0x00000003 0x00008000
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x0000fffe
    i16x8.add_saturate_s)
  (func (export "i16x8_add_saturate_unsigned_0") (result v128)
    v128.const i32x4 0x00ffffff 0x0400ffff 0x00000003 0x00000004
    v128.const i32x4 0x00020001 0xfe000002 0x00000003 0x00000004
    i16x8.add_saturate_u)

  ;; i8x16 saturating sub (signed and unsigned)
  (func (export "i8x16_sub_saturate_signed_0") (result v128)
    v128.const i32x4 0x00000001 0x0000007f 0x000000fe 0x00000080
    v128.const i32x4 0x00000001 0x000000fe 0x0000007f 0x000000ff
    i8x16.sub_saturate_s)
  (func (export "i8x16_sub_saturate_unsigned_0") (result v128)
    v128.const i32x4 0x00ff0001 0x0400007f 0x0000fffe 0x00000004
    v128.const i32x4 0x00020001 0xfe00fffe 0x0000007f 0x00000004
    i8x16.sub_saturate_u)

  ;; i16x8 saturating sub (signed and unsigned)
  (func (export "i16x8_sub_saturate_signed_0") (result v128)
    v128.const i32x4 0x00000001 0x00007fff 0x0000fffe 0x00008000
    v128.const i32x4 0x00000001 0x0000fffe 0x00007fff 0x0000fffe
    i16x8.sub_saturate_s)
  (func (export "i16x8_sub_saturate_unsigned_0") (result v128)
    v128.const i32x4 0x00ffffff 0x0400ffff 0x00000003 0x00000004
    v128.const i32x4 0x00020001 0xfe000002 0x00000003 0x00000004
    i16x8.sub_saturate_u)

  ;; v128 and
  (func (export "v128_and_0") (result v128)
    v128.const i32x4 0x00ff0001 0x00040002 0x44000003 0x00000004
    v128.const i32x4 0x00020001 0x00fe0002 0x00000003 0x55000004
    v128.and)

  ;; v128 or
  (func (export "v128_or_0") (result v128)
    v128.const i32x4 0x00ff0001 0x00040002 0x44000003 0x00000004
    v128.const i32x4 0x00020001 0x00fe0002 0x00000003 0x55000004
    v128.or)

  ;; v128 xor
  (func (export "v128_xor_0") (result v128)
    v128.const i32x4 0x00ff0001 0x00040002 0x44000003 0x00000004
    v128.const i32x4 0x00020001 0x00fe0002 0x00000003 0x55000004
    v128.xor)

  ;; f32x4 min
  (func (export "f32x4_min_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xbf800000
    v128.const i32x4 0x00000000 0x3f800000 0x449a5000 0x3f800000
    f32x4.min)

  ;; f64x2 min
  (func (export "f64x2_min_0") (result v128)
    v128.const i32x4 0x00000000 0x00000000 0x00000000 0xfff80000
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.min)

  ;; f32x4 max
  (func (export "f32x4_max_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xbf800000
    v128.const i32x4 0x00000000 0x3f800000 0x449a5000 0x3f800000
    f32x4.max)

  ;; f64x2 max
  (func (export "f64x2_max_0") (result v128)
    v128.const i32x4 0x00000000 0x00000000 0x00000000 0xfff80000
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.max)

  ;; f32x4 add
  (func (export "f32x4_add_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xc49a5000
    v128.const i32x4 0x00000000 0x3f800000 0x3f800000 0x3fc00000
    f32x4.add)

  ;; f64x2 add
  (func (export "f64x2_add_0") (result v128)
    v128.const i32x4 0x00000000 0x3ff80000 0x00000000 0xfff80000
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.add)

  ;; f32x4 sub
  (func (export "f32x4_sub_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xc49a5000
    v128.const i32x4 0x00000000 0x3f800000 0x3f800000 0x3fc00000
    f32x4.sub)

  ;; f64x2 sub
  (func (export "f64x2_sub_0") (result v128)
    v128.const i32x4 0x00000000 0x3ff80000 0x00000000 0xfff80000
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.sub)

  ;; f32x4 div
  (func (export "f32x4_div_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x3fc00000 0xc0400000
    v128.const i32x4 0x00000000 0x3f800000 0x3f800000 0x3fc00000
    f32x4.div)

  ;; f64x2 div
  (func (export "f64x2_div_0") (result v128)
    v128.const i32x4 0x00000000 0x3ff80000 0x00000000 0xc0080000
    v128.const i32x4 0x00000000 0x3ff00000 0x00000000 0x3ff80000
    f64x2.div)

  ;; f32x4 mul
  (func (export "f32x4_mul_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x3fc00000 0xc0400000
    v128.const i32x4 0x00000000 0x3f800000 0x3f800000 0x3fc00000
    f32x4.mul)

  ;; f64x2 mul
  (func (export "f64x2_mul_0") (result v128)
    v128.const i32x4 0x00000000 0x3ff80000 0x00000000 0xc0080000
    v128.const i32x4 0x00000000 0x3ff00000 0x00000000 0x3ff80000
    f64x2.mul)
)

(;; STDOUT ;;;

simd-binary.wasm:	file format wasm 0x1

Code Disassembly:

00029d func[00] <i8x16_add_0>:
 00029e[001]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0002a7[001]: 00 03 00 00 00 04 00 00 00 | 
 0002b0[019]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0002b9[019]: 00 03 00 00 00 04 00 00 00 | 
 0002c2[037]: fd 57                      | i8x16.add
 0002c4[039]: 0b                         | end
0002c6 func[01] <i16x8_add_0>:
 0002c7[001]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0002d0[001]: 00 03 00 00 00 04 00 00 00 | 
 0002d9[019]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0002e2[019]: 00 03 00 00 00 04 00 00 00 | 
 0002eb[037]: fd 68                      | i16x8.add
 0002ed[039]: 0b                         | end
0002ef func[02] <i32x4_add_0>:
 0002f0[001]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0002f9[001]: 00 03 00 00 00 04 00 00 00 | 
 000302[019]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00030b[019]: 00 03 00 00 00 04 00 00 00 | 
 000314[037]: fd 79                      | i32x4.add
 000316[039]: 0b                         | end
000318 func[03] <i64x2_add_0>:
 000319[001]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000322[001]: 00 03 00 00 00 04 00 00 00 | 
 00032b[019]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000334[019]: 00 03 00 00 00 04 00 00 00 | 
 00033d[037]: fd 8a 01                   | i64x2.add
 000340[040]: 0b                         | end
000342 func[04] <i8x16_sub_0>:
 000343[001]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00034c[001]: 00 03 00 00 00 04 00 00 00 | 
 000355[019]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00035e[019]: 00 03 00 00 00 04 00 00 00 | 
 000367[037]: fd 5a                      | i8x16.sub
 000369[039]: 0b                         | end
00036b func[05] <i16x8_sub_0>:
 00036c[001]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000375[001]: 00 03 00 00 00 04 00 00 00 | 
 00037e[019]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000387[019]: 00 03 00 00 00 04 00 00 00 | 
 000390[037]: fd 6b                      | i16x8.sub
 000392[039]: 0b                         | end
000394 func[06] <i32x4_sub_0>:
 000395[001]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00039e[001]: 00 03 00 00 00 04 00 00 00 | 
 0003a7[019]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0003b0[019]: 00 03 00 00 00 04 00 00 00 | 
 0003b9[037]: fd 7c                      | i32x4.sub
 0003bb[039]: 0b                         | end
0003bd func[07] <i64x2_sub_0>:
 0003be[001]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0003c7[001]: 00 03 00 00 00 04 00 00 00 | 
 0003d0[019]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0003d9[019]: 00 03 00 00 00 04 00 00 00 | 
 0003e2[037]: fd 8d 01                   | i64x2.sub
 0003e5[040]: 0b                         | end
0003e7 func[08] <i8x16_mul_0>:
 0003e8[001]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0003f1[001]: 00 03 00 00 00 04 00 00 00 | 
 0003fa[019]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000403[019]: 00 03 00 00 00 04 00 00 00 | 
 00040c[037]: fd 5d                      | i8x16.mul
 00040e[039]: 0b                         | end
000410 func[09] <i16x8_mul_0>:
 000411[001]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00041a[001]: 00 03 00 00 00 04 00 00 00 | 
 000423[019]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00042c[019]: 00 03 00 00 00 04 00 00 00 | 
 000435[037]: fd 6e                      | i16x8.mul
 000437[039]: 0b                         | end
000439 func[10] <i32x4_mul_0>:
 00043a[001]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000443[001]: 00 03 00 00 00 04 00 00 00 | 
 00044c[019]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000455[019]: 00 03 00 00 00 04 00 00 00 | 
 00045e[037]: fd 7f                      | i32x4.mul
 000460[039]: 0b                         | end
000462 func[11] <i8x16_add_saturate_signed_0>:
 000463[001]: fd 02 01 00 00 00 7f 00 00 | v128.const 0x00000001 0x0000007f 0x00000003 0x00000080
 00046c[001]: 00 03 00 00 00 80 00 00 00 | 
 000475[019]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x000000ff
 00047e[019]: 00 03 00 00 00 ff 00 00 00 | 
 000487[037]: fd 58                      | i8x16.add_saturate_s
 000489[039]: 0b                         | end
00048b func[12] <i8x16_add_saturate_unsigned_0>:
 00048c[001]: fd 02 01 00 ff 00 02 00 00 | v128.const 0x00ff0001 0x04000002 0x00000003 0x00000004
 000495[001]: 04 03 00 00 00 04 00 00 00 | 
 00049e[019]: fd 02 01 00 02 00 02 00 00 | v128.const 0x00020001 0xfe000002 0x00000003 0x00000004
 0004a7[019]: fe 03 00 00 00 04 00 00 00 | 
 0004b0[037]: fd 59                      | i8x16.add_saturate_u
 0004b2[039]: 0b                         | end
0004b4 func[13] <i16x8_add_saturate_signed_0>:
 0004b5[001]: fd 02 01 00 00 00 ff 7f 00 | v128.const 0x00000001 0x00007fff 0x00000003 0x00008000
 0004be[001]: 00 03 00 00 00 00 80 00 00 | 
 0004c7[019]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x0000fffe
 0004d0[019]: 00 03 00 00 00 fe ff 00 00 | 
 0004d9[037]: fd 69                      | i16x8.add_saturate_s
 0004db[039]: 0b                         | end
0004dd func[14] <i16x8_add_saturate_unsigned_0>:
 0004de[001]: fd 02 ff ff ff 00 ff ff 00 | v128.const 0x00ffffff 0x0400ffff 0x00000003 0x00000004
 0004e7[001]: 04 03 00 00 00 04 00 00 00 | 
 0004f0[019]: fd 02 01 00 02 00 02 00 00 | v128.const 0x00020001 0xfe000002 0x00000003 0x00000004
 0004f9[019]: fe 03 00 00 00 04 00 00 00 | 
 000502[037]: fd 6a                      | i16x8.add_saturate_u
 000504[039]: 0b                         | end
000506 func[15] <i8x16_sub_saturate_signed_0>:
 000507[001]: fd 02 01 00 00 00 7f 00 00 | v128.const 0x00000001 0x0000007f 0x000000fe 0x00000080
 000510[001]: 00 fe 00 00 00 80 00 00 00 | 
 000519[019]: fd 02 01 00 00 00 fe 00 00 | v128.const 0x00000001 0x000000fe 0x0000007f 0x000000ff
 000522[019]: 00 7f 00 00 00 ff 00 00 00 | 
 00052b[037]: fd 5b                      | i8x16.sub_saturate_s
 00052d[039]: 0b                         | end
00052f func[16] <i8x16_sub_saturate_unsigned_0>:
 000530[001]: fd 02 01 00 ff 00 7f 00 00 | v128.const 0x00ff0001 0x0400007f 0x0000fffe 0x00000004
 000539[001]: 04 fe ff 00 00 04 00 00 00 | 
 000542[019]: fd 02 01 00 02 00 fe ff 00 | v128.const 0x00020001 0xfe00fffe 0x0000007f 0x00000004
 00054b[019]: fe 7f 00 00 00 04 00 00 00 | 
 000554[037]: fd 5c                      | i8x16.sub_saturate_u
 000556[039]: 0b                         | end
000558 func[17] <i16x8_sub_saturate_signed_0>:
 000559[001]: fd 02 01 00 00 00 ff 7f 00 | v128.const 0x00000001 0x00007fff 0x0000fffe 0x00008000
 000562[001]: 00 fe ff 00 00 00 80 00 00 | 
 00056b[019]: fd 02 01 00 00 00 fe ff 00 | v128.const 0x00000001 0x0000fffe 0x00007fff 0x0000fffe
 000574[019]: 00 ff 7f 00 00 fe ff 00 00 | 
 00057d[037]: fd 6c                      | i16x8.sub_saturate_s
 00057f[039]: 0b                         | end
000581 func[18] <i16x8_sub_saturate_unsigned_0>:
 000582[001]: fd 02 ff ff ff 00 ff ff 00 | v128.const 0x00ffffff 0x0400ffff 0x00000003 0x00000004
 00058b[001]: 04 03 00 00 00 04 00 00 00 | 
 000594[019]: fd 02 01 00 02 00 02 00 00 | v128.const 0x00020001 0xfe000002 0x00000003 0x00000004
 00059d[019]: fe 03 00 00 00 04 00 00 00 | 
 0005a6[037]: fd 6d                      | i16x8.sub_saturate_u
 0005a8[039]: 0b                         | end
0005aa func[19] <v128_and_0>:
 0005ab[001]: fd 02 01 00 ff 00 02 00 04 | v128.const 0x00ff0001 0x00040002 0x44000003 0x00000004
 0005b4[001]: 00 03 00 00 44 04 00 00 00 | 
 0005bd[019]: fd 02 01 00 02 00 02 00 fe | v128.const 0x00020001 0x00fe0002 0x00000003 0x55000004
 0005c6[019]: 00 03 00 00 00 04 00 00 55 | 
 0005cf[037]: fd 4d                      | v128.and
 0005d1[039]: 0b                         | end
0005d3 func[20] <v128_or_0>:
 0005d4[001]: fd 02 01 00 ff 00 02 00 04 | v128.const 0x00ff0001 0x00040002 0x44000003 0x00000004
 0005dd[001]: 00 03 00 00 44 04 00 00 00 | 
 0005e6[019]: fd 02 01 00 02 00 02 00 fe | v128.const 0x00020001 0x00fe0002 0x00000003 0x55000004
 0005ef[019]: 00 03 00 00 00 04 00 00 55 | 
 0005f8[037]: fd 4e                      | v128.or
 0005fa[039]: 0b                         | end
0005fc func[21] <v128_xor_0>:
 0005fd[001]: fd 02 01 00 ff 00 02 00 04 | v128.const 0x00ff0001 0x00040002 0x44000003 0x00000004
 000606[001]: 00 03 00 00 44 04 00 00 00 | 
 00060f[019]: fd 02 01 00 02 00 02 00 fe | v128.const 0x00020001 0x00fe0002 0x00000003 0x55000004
 000618[019]: 00 03 00 00 00 04 00 00 55 | 
 000621[037]: fd 4f                      | v128.xor
 000623[039]: 0b                         | end
000625 func[22] <f32x4_min_0>:
 000626[001]: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xbf800000
 00062f[001]: ff 00 50 9a 44 00 00 80 bf | 
 000638[019]: fd 02 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x449a5000 0x3f800000
 000641[019]: 3f 00 50 9a 44 00 00 80 3f | 
 00064a[037]: fd 9e 01                   | f32x4.min
 00064d[040]: 0b                         | end
00064f func[23] <f64x2_min_0>:
 000650[001]: fd 02 00 00 00 00 00 00 00 | v128.const 0x00000000 0x00000000 0x00000000 0xfff80000
 000659[001]: 00 00 00 00 00 00 00 f8 ff | 
 000662[019]: fd 02 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 00066b[019]: c0 00 00 00 00 00 00 f0 3f | 
 000674[037]: fd a9 01                   | f64x2.min
 000677[040]: 0b                         | end
000679 func[24] <f32x4_max_0>:
 00067a[001]: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xbf800000
 000683[001]: ff 00 50 9a 44 00 00 80 bf | 
 00068c[019]: fd 02 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x449a5000 0x3f800000
 000695[019]: 3f 00 50 9a 44 00 00 80 3f | 
 00069e[037]: fd 9f 01                   | f32x4.max
 0006a1[040]: 0b                         | end
0006a3 func[25] <f64x2_max_0>:
 0006a4[001]: fd 02 00 00 00 00 00 00 00 | v128.const 0x00000000 0x00000000 0x00000000 0xfff80000
 0006ad[001]: 00 00 00 00 00 00 00 f8 ff | 
 0006b6[019]: fd 02 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 0006bf[019]: c0 00 00 00 00 00 00 f0 3f | 
 0006c8[037]: fd aa 01                   | f64x2.max
 0006cb[040]: 0b                         | end
0006cd func[26] <f32x4_add_0>:
 0006ce[001]: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xc49a5000
 0006d7[001]: ff 00 50 9a 44 00 50 9a c4 | 
 0006e0[019]: fd 02 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x3f800000 0x3fc00000
 0006e9[019]: 3f 00 00 80 3f 00 00 c0 3f | 
 0006f2[037]: fd 9a 01                   | f32x4.add
 0006f5[040]: 0b                         | end
0006f7 func[27] <f64x2_add_0>:
 0006f8[001]: fd 02 00 00 00 00 00 00 f8 | v128.const 0x00000000 0x3ff80000 0x00000000 0xfff80000
 000701[001]: 3f 00 00 00 00 00 00 f8 ff | 
 00070a[019]: fd 02 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 000713[019]: c0 00 00 00 00 00 00 f0 3f | 
 00071c[037]: fd a5 01                   | f64x2.add
 00071f[040]: 0b                         | end
000721 func[28] <f32x4_sub_0>:
 000722[001]: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xc49a5000
 00072b[001]: ff 00 50 9a 44 00 50 9a c4 | 
 000734[019]: fd 02 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x3f800000 0x3fc00000
 00073d[019]: 3f 00 00 80 3f 00 00 c0 3f | 
 000746[037]: fd 9b 01                   | f32x4.sub
 000749[040]: 0b                         | end
00074b func[29] <f64x2_sub_0>:
 00074c[001]: fd 02 00 00 00 00 00 00 f8 | v128.const 0x00000000 0x3ff80000 0x00000000 0xfff80000
 000755[001]: 3f 00 00 00 00 00 00 f8 ff | 
 00075e[019]: fd 02 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 000767[019]: c0 00 00 00 00 00 00 f0 3f | 
 000770[037]: fd a6 01                   | f64x2.sub
 000773[040]: 0b                         | end
000775 func[30] <f32x4_div_0>:
 000776[001]: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x3fc00000 0xc0400000
 00077f[001]: ff 00 00 c0 3f 00 00 40 c0 | 
 000788[019]: fd 02 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x3f800000 0x3fc00000
 000791[019]: 3f 00 00 80 3f 00 00 c0 3f | 
 00079a[037]: fd 9d 01                   | f32x4.div
 00079d[040]: 0b                         | end
00079f func[31] <f64x2_div_0>:
 0007a0[001]: fd 02 00 00 00 00 00 00 f8 | v128.const 0x00000000 0x3ff80000 0x00000000 0xc0080000
 0007a9[001]: 3f 00 00 00 00 00 00 08 c0 | 
 0007b2[019]: fd 02 00 00 00 00 00 00 f0 | v128.const 0x00000000 0x3ff00000 0x00000000 0x3ff80000
 0007bb[019]: 3f 00 00 00 00 00 00 f8 3f | 
 0007c4[037]: fd a8 01                   | f64x2.div
 0007c7[040]: 0b                         | end
0007c9 func[32] <f32x4_mul_0>:
 0007ca[001]: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x3fc00000 0xc0400000
 0007d3[001]: ff 00 00 c0 3f 00 00 40 c0 | 
 0007dc[019]: fd 02 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x3f800000 0x3fc00000
 0007e5[019]: 3f 00 00 80 3f 00 00 c0 3f | 
 0007ee[037]: fd 9c 01                   | f32x4.mul
 0007f1[040]: 0b                         | end
0007f3 func[33] <f64x2_mul_0>:
 0007f4[001]: fd 02 00 00 00 00 00 00 f8 | v128.const 0x00000000 0x3ff80000 0x00000000 0xc0080000
 0007fd[001]: 3f 00 00 00 00 00 00 08 c0 | 
 000806[019]: fd 02 00 00 00 00 00 00 f0 | v128.const 0x00000000 0x3ff00000 0x00000000 0x3ff80000
 00080f[019]: 3f 00 00 00 00 00 00 f8 3f | 
 000818[037]: fd a7 01                   | f64x2.mul
 00081b[040]: 0b                         | end
;;; STDOUT ;;)
