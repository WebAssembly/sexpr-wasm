;;; TOOL: run-objdump
;;; ARGS0: --enable-simd

(module
  ;; i8x16 neg
  (func (export "i8x16_neg_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.neg)

  ;; i16x8 neg
  (func (export "i16x8_neg_0") (result v128)
    v128.const i32x4 0x0000ffff 0x00007fff 0x00000003 0x00000004
    i16x8.neg)

  ;; i32x4 neg
  (func (export "i32x4_neg_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.neg)

  ;; i64x2 neg
  (func (export "i64x2_neg_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i64x2.neg)

  ;; v128 not
  (func (export "v128_not_0") (result v128)
    v128.const i32x4 0x00ff0001 0x00550002 0x00000003 0x00000004
    v128.not)

  ;; i8x16 any_true
  (func (export "i8x16_any_true_0") (result i32)
    v128.const i32x4 0x00ff0001 0x00550002 0x00000003 0x00000004
    i8x16.any_true)

  ;; i16x8 any_true
  (func (export "i16x8_any_true_0") (result i32)
    v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000
    i16x8.any_true)

  ;; i32x4 any_true
  (func (export "i32x4_any_true_0") (result i32)
    v128.const i32x4 0x00ff0001 0x00550002 0x00000003 0x00000004
    i32x4.any_true)

  ;; i64x2 any_true
  (func (export "i64x2_any_true_0") (result i32)
    v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000
    i64x2.any_true)

  ;; i8x16 all_true
  (func (export "i8x16_all_true_0") (result i32)
    v128.const i32x4 0x01020304 0x01050706 0x10020403 0x20103004
    i8x16.all_true)

  ;; i16x8 all_true
  (func (export "i16x8_all_true_0") (result i32)
    v128.const i32x4 0x00040004 0x00030003 0x00020002 0x00010001
    i16x8.all_true)

  ;; i32x4 all_true
  (func (export "i32x4_all_true_0") (result i32)
    v128.const i32x4 0x00ff0001 0x00550002 0x00000003 0x00000004
    i32x4.all_true)

  ;; i64x2 all_true
  (func (export "i64x2_all_true_0") (result i32)
    v128.const i32x4 0x00000001 0x00000000 0x00000001 0x00000000
    i64x2.all_true)

  ;; f32x4 neg
  (func (export "f32x4_neg_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xbf800000
    f32x4.neg)

  ;; f64x2 neg
  (func (export "f64x2_neg_0") (result v128)
    v128.const i32x4 0x00000000 0x00000000 0x00000000 0xfff80000
    f64x2.neg)
  (func (export "f64x2_neg_1") (result v128)
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.neg)

  ;; f32x4 abs
  (func (export "f32x4_abs_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xbf800000
    f32x4.abs)

  ;; f64x2 abs
  (func (export "f64x2_abs_0") (result v128)
    v128.const i32x4 0x00000000 0x80000000 0x00000000 0xfff80000
    f64x2.abs)
  (func (export "f64x2_abs_1") (result v128)
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.abs)

  ;; f32x4 sqrt
  (func (export "f32x4_sqrt_0") (result v128)
    v128.const i32x4 0xbf800000 0xffc00000 0x40800000 0x41100000
    f32x4.sqrt)

  ;; f64x2 sqrt
  (func (export "f64x2_sqrt_0") (result v128)
    v128.const i32x4 0x00000000 0xbff00000 0x00000000 0xfff80000
    f64x2.sqrt)
  (func (export "f64x2_sqrt_1") (result v128)
    v128.const i32x4 0x00000000 0x40100000 0x00000000 0x40220000
    f64x2.sqrt)

  ;; f32x4 convert_i32x4_s
  (func (export "f32x4_convert_i32x4_s_0") (result v128)
    v128.const i32x4 0x00000001 0xffffffff 0x00000000 0x00000003
    f32x4.convert_i32x4_s)

  ;; f32x4 convert_i32x4_u
  (func (export "f32x4_convert_i32x4_u_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000000 0x00000003
    f32x4.convert_i32x4_u)

  ;; f64x2 convert_i64x2_s
  (func (export "f64x2_convert_i64x2_s_0") (result v128)
    v128.const i32x4 0x00000001 0x00000000 0xfffffffd 0xffffffff
    f64x2.convert_i64x2_s)

  ;; f64x2 convert_i64x2_u
  (func (export "f64x2_convert_i64x2_u_0") (result v128)
    v128.const i32x4 0x00000001 0x00000000 0x00000003 0x00000000
    f64x2.convert_i64x2_u)

  ;; i32x4 trunc_sat_f32x4_s
  (func (export "i32x4_trunc_sat_f32x4_s_0") (result v128)
    v128.const i32x4 0x3fc00000 0xc0900000 0xffc00000 0x449a599a
    i32x4.trunc_sat_f32x4_s)

  ;; i32x4 trunc_sat_f32x4_u
  (func (export "i32x4_trunc_sat_f32x4_u_0") (result v128)
    v128.const i32x4 0x3fc00000 0x40900000 0xffc00000 0x449a599a
    i32x4.trunc_sat_f32x4_u)

  ;; i64x2 trunc_sat_f64x2_s
  (func (export "i64x2_trunc_sat_f64x2_s_0") (result v128)
    v128.const i32x4 0x00000000 0xfff80000 0x00000000 0xc0120000
    i64x2.trunc_sat_f64x2_s)

  ;; i64x2 trunc_sat_f64x2_u
  (func (export "i64x2_trunc_sat_f64x2_u_0") (result v128)
    v128.const i32x4 0x00000000 0xfff80000 0x00000000 0x40120000
    i64x2.trunc_sat_f64x2_u)
)
(;; STDOUT ;;;

simd-unary.wasm:	file format wasm 0x1

Code Disassembly:

000273 func[00] <i8x16_neg_0>:
 000274[001]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00027d[001]: 00 03 00 00 00 04 00 00 00 | 
 000286[019]: fd 51                      | i8x16.neg
 000288[021]: 0b                         | end
00028a func[01] <i16x8_neg_0>:
 00028b[001]: fd 02 ff ff 00 00 ff 7f 00 | v128.const 0x0000ffff 0x00007fff 0x00000003 0x00000004
 000294[001]: 00 03 00 00 00 04 00 00 00 | 
 00029d[019]: fd 62                      | i16x8.neg
 00029f[021]: 0b                         | end
0002a1 func[02] <i32x4_neg_0>:
 0002a2[001]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0002ab[001]: 00 03 00 00 00 04 00 00 00 | 
 0002b4[019]: fd 73                      | i32x4.neg
 0002b6[021]: 0b                         | end
0002b8 func[03] <i64x2_neg_0>:
 0002b9[001]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0002c2[001]: 00 03 00 00 00 04 00 00 00 | 
 0002cb[019]: fd 84 01                   | i64x2.neg
 0002ce[022]: 0b                         | end
0002d0 func[04] <v128_not_0>:
 0002d1[001]: fd 02 01 00 ff 00 02 00 55 | v128.const 0x00ff0001 0x00550002 0x00000003 0x00000004
 0002da[001]: 00 03 00 00 00 04 00 00 00 | 
 0002e3[019]: fd 4c                      | v128.not
 0002e5[021]: 0b                         | end
0002e7 func[05] <i8x16_any_true_0>:
 0002e8[001]: fd 02 01 00 ff 00 02 00 55 | v128.const 0x00ff0001 0x00550002 0x00000003 0x00000004
 0002f1[001]: 00 03 00 00 00 04 00 00 00 | 
 0002fa[019]: fd 52                      | i8x16.any_true
 0002fc[021]: 0b                         | end
0002fe func[06] <i16x8_any_true_0>:
 0002ff[001]: fd 02 00 00 00 00 00 00 00 | v128.const 0x00000000 0x00000000 0x00000000 0x00000000
 000308[001]: 00 00 00 00 00 00 00 00 00 | 
 000311[019]: fd 63                      | i16x8.any_true
 000313[021]: 0b                         | end
000315 func[07] <i32x4_any_true_0>:
 000316[001]: fd 02 01 00 ff 00 02 00 55 | v128.const 0x00ff0001 0x00550002 0x00000003 0x00000004
 00031f[001]: 00 03 00 00 00 04 00 00 00 | 
 000328[019]: fd 74                      | i32x4.any_true
 00032a[021]: 0b                         | end
00032c func[08] <i64x2_any_true_0>:
 00032d[001]: fd 02 00 00 00 00 00 00 00 | v128.const 0x00000000 0x00000000 0x00000000 0x00000000
 000336[001]: 00 00 00 00 00 00 00 00 00 | 
 00033f[019]: fd 85 01                   | i64x2.any_true
 000342[022]: 0b                         | end
000344 func[09] <i8x16_all_true_0>:
 000345[001]: fd 02 04 03 02 01 06 07 05 | v128.const 0x01020304 0x01050706 0x10020403 0x20103004
 00034e[001]: 01 03 04 02 10 04 30 10 20 | 
 000357[019]: fd 53                      | i8x16.all_true
 000359[021]: 0b                         | end
00035b func[10] <i16x8_all_true_0>:
 00035c[001]: fd 02 04 00 04 00 03 00 03 | v128.const 0x00040004 0x00030003 0x00020002 0x00010001
 000365[001]: 00 02 00 02 00 01 00 01 00 | 
 00036e[019]: fd 64                      | i16x8.all_true
 000370[021]: 0b                         | end
000372 func[11] <i32x4_all_true_0>:
 000373[001]: fd 02 01 00 ff 00 02 00 55 | v128.const 0x00ff0001 0x00550002 0x00000003 0x00000004
 00037c[001]: 00 03 00 00 00 04 00 00 00 | 
 000385[019]: fd 75                      | i32x4.all_true
 000387[021]: 0b                         | end
000389 func[12] <i64x2_all_true_0>:
 00038a[001]: fd 02 01 00 00 00 00 00 00 | v128.const 0x00000001 0x00000000 0x00000001 0x00000000
 000393[001]: 00 01 00 00 00 00 00 00 00 | 
 00039c[019]: fd 86 01                   | i64x2.all_true
 00039f[022]: 0b                         | end
0003a1 func[13] <f32x4_neg_0>:
 0003a2[001]: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xbf800000
 0003ab[001]: ff 00 50 9a 44 00 00 80 bf | 
 0003b4[019]: fd 96 01                   | f32x4.neg
 0003b7[022]: 0b                         | end
0003b9 func[14] <f64x2_neg_0>:
 0003ba[001]: fd 02 00 00 00 00 00 00 00 | v128.const 0x00000000 0x00000000 0x00000000 0xfff80000
 0003c3[001]: 00 00 00 00 00 00 00 f8 ff | 
 0003cc[019]: fd a1 01                   | f64x2.neg
 0003cf[022]: 0b                         | end
0003d1 func[15] <f64x2_neg_1>:
 0003d2[001]: fd 02 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 0003db[001]: c0 00 00 00 00 00 00 f0 3f | 
 0003e4[019]: fd a1 01                   | f64x2.neg
 0003e7[022]: 0b                         | end
0003e9 func[16] <f32x4_abs_0>:
 0003ea[001]: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xbf800000
 0003f3[001]: ff 00 50 9a 44 00 00 80 bf | 
 0003fc[019]: fd 95 01                   | f32x4.abs
 0003ff[022]: 0b                         | end
000401 func[17] <f64x2_abs_0>:
 000402[001]: fd 02 00 00 00 00 00 00 00 | v128.const 0x00000000 0x80000000 0x00000000 0xfff80000
 00040b[001]: 80 00 00 00 00 00 00 f8 ff | 
 000414[019]: fd a0 01                   | f64x2.abs
 000417[022]: 0b                         | end
000419 func[18] <f64x2_abs_1>:
 00041a[001]: fd 02 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 000423[001]: c0 00 00 00 00 00 00 f0 3f | 
 00042c[019]: fd a0 01                   | f64x2.abs
 00042f[022]: 0b                         | end
000431 func[19] <f32x4_sqrt_0>:
 000432[001]: fd 02 00 00 80 bf 00 00 c0 | v128.const 0xbf800000 0xffc00000 0x40800000 0x41100000
 00043b[001]: ff 00 00 80 40 00 00 10 41 | 
 000444[019]: fd 97 01                   | f32x4.sqrt
 000447[022]: 0b                         | end
000449 func[20] <f64x2_sqrt_0>:
 00044a[001]: fd 02 00 00 00 00 00 00 f0 | v128.const 0x00000000 0xbff00000 0x00000000 0xfff80000
 000453[001]: bf 00 00 00 00 00 00 f8 ff | 
 00045c[019]: fd a2 01                   | f64x2.sqrt
 00045f[022]: 0b                         | end
000461 func[21] <f64x2_sqrt_1>:
 000462[001]: fd 02 00 00 00 00 00 00 10 | v128.const 0x00000000 0x40100000 0x00000000 0x40220000
 00046b[001]: 40 00 00 00 00 00 00 22 40 | 
 000474[019]: fd a2 01                   | f64x2.sqrt
 000477[022]: 0b                         | end
000479 func[22] <f32x4_convert_i32x4_s_0>:
 00047a[001]: fd 02 01 00 00 00 ff ff ff | v128.const 0x00000001 0xffffffff 0x00000000 0x00000003
 000483[001]: ff 00 00 00 00 03 00 00 00 | 
 00048c[019]: fd af 01                   | f32x4.convert_i32x4_s
 00048f[022]: 0b                         | end
000491 func[23] <f32x4_convert_i32x4_u_0>:
 000492[001]: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000000 0x00000003
 00049b[001]: 00 00 00 00 00 03 00 00 00 | 
 0004a4[019]: fd b0 01                   | f32x4.convert_i32x4_u
 0004a7[022]: 0b                         | end
0004a9 func[24] <f64x2_convert_i64x2_s_0>:
 0004aa[001]: fd 02 01 00 00 00 00 00 00 | v128.const 0x00000001 0x00000000 0xfffffffd 0xffffffff
 0004b3[001]: 00 fd ff ff ff ff ff ff ff | 
 0004bc[019]: fd b1 01                   | f64x2.convert_i64x2_s
 0004bf[022]: 0b                         | end
0004c1 func[25] <f64x2_convert_i64x2_u_0>:
 0004c2[001]: fd 02 01 00 00 00 00 00 00 | v128.const 0x00000001 0x00000000 0x00000003 0x00000000
 0004cb[001]: 00 03 00 00 00 00 00 00 00 | 
 0004d4[019]: fd b2 01                   | f64x2.convert_i64x2_u
 0004d7[022]: 0b                         | end
0004d9 func[26] <i32x4_trunc_sat_f32x4_s_0>:
 0004da[001]: fd 02 00 00 c0 3f 00 00 90 | v128.const 0x3fc00000 0xc0900000 0xffc00000 0x449a599a
 0004e3[001]: c0 00 00 c0 ff 9a 59 9a 44 | 
 0004ec[019]: fd ab 01                   | i32x4.trunc_sat_f32x4_s
 0004ef[022]: 0b                         | end
0004f1 func[27] <i32x4_trunc_sat_f32x4_u_0>:
 0004f2[001]: fd 02 00 00 c0 3f 00 00 90 | v128.const 0x3fc00000 0x40900000 0xffc00000 0x449a599a
 0004fb[001]: 40 00 00 c0 ff 9a 59 9a 44 | 
 000504[019]: fd ac 01                   | i32x4.trunc_sat_f32x4_u
 000507[022]: 0b                         | end
000509 func[28] <i64x2_trunc_sat_f64x2_s_0>:
 00050a[001]: fd 02 00 00 00 00 00 00 f8 | v128.const 0x00000000 0xfff80000 0x00000000 0xc0120000
 000513[001]: ff 00 00 00 00 00 00 12 c0 | 
 00051c[019]: fd ad 01                   | i64x2.trunc_sat_f64x2_s
 00051f[022]: 0b                         | end
000521 func[29] <i64x2_trunc_sat_f64x2_u_0>:
 000522[001]: fd 02 00 00 00 00 00 00 f8 | v128.const 0x00000000 0xfff80000 0x00000000 0x40120000
 00052b[001]: ff 00 00 00 00 00 00 12 40 | 
 000534[019]: fd ae 01                   | i64x2.trunc_sat_f64x2_u
 000537[022]: 0b                         | end
;;; STDOUT ;;)
