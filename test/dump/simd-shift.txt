;;; TOOL: run-objdump
;;; ARGS0: --enable-simd

(module
  ;; i8x16 shl
  (func (export "i8x16_shl_0") (result v128)
    v128.const i32x4 0xff000001 0xe0000002 0x00000003 0x00000004
    i32.const 3
    i8x16.shl)

  ;; i16x8 shl
  (func (export "i16x8_shl_0") (result v128)
    v128.const i32x4 0xff000071 0xe0000702 0x00000003 0x00000004
    i32.const 3
    i16x8.shl)

  ;; i32x4 shl
  (func (export "i32x4_shl_0") (result v128)
    v128.const i32x4 0xff0ff071 0xe0077702 0xe0004003 0x00002004
    i32.const 3
    i32x4.shl)

  ;; i64x2 shl
  (func (export "i64x2_shl_0") (result v128)
    v128.const i32x4 0xff000055 0xe0000702 0xe0004003 0x00002004
    i32.const 3
    i64x2.shl)

  ;; i8x16 shr (signed and unsigned)
  (func (export "i8x16_shr_s_0") (result v128)
    v128.const i32x4 0xff00000f 0xe00f7002 0x0f000003 0x000ff004
    i32.const 3
    i8x16.shr_s)
  (func (export "i8x16_shr_u_0") (result v128)
    v128.const i32x4 0xff00000f 0xe00f7002 0x0f000003 0x000ff004
    i32.const 3
    i8x16.shr_u)

  ;; i16x8 shr (signed and unsigned)
  (func (export "i16x8_shr_s_0") (result v128)
    v128.const i32x4 0xff00000f 0xe00f7002 0x0f000003 0x000ff004
    i32.const 3
    i16x8.shr_s)
  (func (export "i16x8_shr_u_0") (result v128)
    v128.const i32x4 0xff00000f 0xe00f7002 0x0f000003 0x000ff004
    i32.const 3
    i16x8.shr_u)

  ;; i32x4 shr (signed and unsigned)
  (func (export "i32x4_shr_s_0") (result v128)
    v128.const i32x4 0xff00000f 0xe00f7002 0x0f000003 0x000ff004
    i32.const 3
    i32x4.shr_s)
  (func (export "i32x4_shr_u_0") (result v128)
    v128.const i32x4 0xff00000f 0xe00f7002 0x0f000003 0x000ff004
    i32.const 3
    i32x4.shr_u)

  ;; i64x2 shr (signed and unsigned)
  (func (export "i64x2_shr_s_0") (result v128)
    v128.const i32x4 0xff00000f 0xe00f7002 0x0f000003 0x000ff004
    i32.const 3
    i64x2.shr_s)
  (func (export "i64x2_shr_u_0") (result v128)
    v128.const i32x4 0xff00000f 0xe00f7002 0x0f000003 0x000ff004
    i32.const 3
    i64x2.shr_u)
  )
(;; STDOUT ;;;

simd-shift.wasm:	file format wasm 0x1

Code Disassembly:

0000df func[00] <i8x16_shl_0>:
 0000e0[001]: fd 02 01 00 00 ff 02 00 00 | v128.const 0xff000001 0xe0000002 0x00000003 0x00000004
 0000e9[001]: e0 03 00 00 00 04 00 00 00 | 
 0000f2[019]: 41 03                      | i32.const 3
 0000f4[021]: fd 54                      | i8x16.shl
 0000f6[023]: 0b                         | end
0000f8 func[01] <i16x8_shl_0>:
 0000f9[001]: fd 02 71 00 00 ff 02 07 00 | v128.const 0xff000071 0xe0000702 0x00000003 0x00000004
 000102[001]: e0 03 00 00 00 04 00 00 00 | 
 00010b[019]: 41 03                      | i32.const 3
 00010d[021]: fd 65                      | i16x8.shl
 00010f[023]: 0b                         | end
000111 func[02] <i32x4_shl_0>:
 000112[001]: fd 02 71 f0 0f ff 02 77 07 | v128.const 0xff0ff071 0xe0077702 0xe0004003 0x00002004
 00011b[001]: e0 03 40 00 e0 04 20 00 00 | 
 000124[019]: 41 03                      | i32.const 3
 000126[021]: fd 76                      | i32x4.shl
 000128[023]: 0b                         | end
00012a func[03] <i64x2_shl_0>:
 00012b[001]: fd 02 55 00 00 ff 02 07 00 | v128.const 0xff000055 0xe0000702 0xe0004003 0x00002004
 000134[001]: e0 03 40 00 e0 04 20 00 00 | 
 00013d[019]: 41 03                      | i32.const 3
 00013f[021]: fd 87 01                   | i64x2.shl
 000142[024]: 0b                         | end
000144 func[04] <i8x16_shr_s_0>:
 000145[001]: fd 02 0f 00 00 ff 02 70 0f | v128.const 0xff00000f 0xe00f7002 0x0f000003 0x000ff004
 00014e[001]: e0 03 00 00 0f 04 f0 0f 00 | 
 000157[019]: 41 03                      | i32.const 3
 000159[021]: fd 55                      | i8x16.shr_s
 00015b[023]: 0b                         | end
00015d func[05] <i8x16_shr_u_0>:
 00015e[001]: fd 02 0f 00 00 ff 02 70 0f | v128.const 0xff00000f 0xe00f7002 0x0f000003 0x000ff004
 000167[001]: e0 03 00 00 0f 04 f0 0f 00 | 
 000170[019]: 41 03                      | i32.const 3
 000172[021]: fd 56                      | i8x16.shr_u
 000174[023]: 0b                         | end
000176 func[06] <i16x8_shr_s_0>:
 000177[001]: fd 02 0f 00 00 ff 02 70 0f | v128.const 0xff00000f 0xe00f7002 0x0f000003 0x000ff004
 000180[001]: e0 03 00 00 0f 04 f0 0f 00 | 
 000189[019]: 41 03                      | i32.const 3
 00018b[021]: fd 66                      | i16x8.shr_s
 00018d[023]: 0b                         | end
00018f func[07] <i16x8_shr_u_0>:
 000190[001]: fd 02 0f 00 00 ff 02 70 0f | v128.const 0xff00000f 0xe00f7002 0x0f000003 0x000ff004
 000199[001]: e0 03 00 00 0f 04 f0 0f 00 | 
 0001a2[019]: 41 03                      | i32.const 3
 0001a4[021]: fd 67                      | i16x8.shr_u
 0001a6[023]: 0b                         | end
0001a8 func[08] <i32x4_shr_s_0>:
 0001a9[001]: fd 02 0f 00 00 ff 02 70 0f | v128.const 0xff00000f 0xe00f7002 0x0f000003 0x000ff004
 0001b2[001]: e0 03 00 00 0f 04 f0 0f 00 | 
 0001bb[019]: 41 03                      | i32.const 3
 0001bd[021]: fd 77                      | i32x4.shr_s
 0001bf[023]: 0b                         | end
0001c1 func[09] <i32x4_shr_u_0>:
 0001c2[001]: fd 02 0f 00 00 ff 02 70 0f | v128.const 0xff00000f 0xe00f7002 0x0f000003 0x000ff004
 0001cb[001]: e0 03 00 00 0f 04 f0 0f 00 | 
 0001d4[019]: 41 03                      | i32.const 3
 0001d6[021]: fd 78                      | i32x4.shr_u
 0001d8[023]: 0b                         | end
0001da func[10] <i64x2_shr_s_0>:
 0001db[001]: fd 02 0f 00 00 ff 02 70 0f | v128.const 0xff00000f 0xe00f7002 0x0f000003 0x000ff004
 0001e4[001]: e0 03 00 00 0f 04 f0 0f 00 | 
 0001ed[019]: 41 03                      | i32.const 3
 0001ef[021]: fd 88 01                   | i64x2.shr_s
 0001f2[024]: 0b                         | end
0001f4 func[11] <i64x2_shr_u_0>:
 0001f5[001]: fd 02 0f 00 00 ff 02 70 0f | v128.const 0xff00000f 0xe00f7002 0x0f000003 0x000ff004
 0001fe[001]: e0 03 00 00 0f 04 f0 0f 00 | 
 000207[019]: 41 03                      | i32.const 3
 000209[021]: fd 89 01                   | i64x2.shr_u
 00020c[024]: 0b                         | end
;;; STDOUT ;;)
