;;; TOOL: run-js
(module
  ;; i32
  (export "i32_eq_true" $i32_eq_true)
  (func $i32_eq_true (result i32) (i32.eq (i32.const -1) (i32.const -1)))
  (export "i32_eq_false" $i32_eq_false)
  (func $i32_eq_false (result i32) (i32.eq (i32.const 1) (i32.const -1)))

  (export "i32_ne_true" $i32_ne_true)
  (func $i32_ne_true (result i32) (i32.ne (i32.const 1) (i32.const -1)))
  (export "i32_ne_false" $i32_ne_false)
  (func $i32_ne_false (result i32) (i32.ne (i32.const -1) (i32.const -1)))

  (export "i32_lt_s_less" $i32_lt_s_less)
  (func $i32_lt_s_less (result i32) (i32.lt_s (i32.const -1) (i32.const 1)))
  (export "i32_lt_s_equal" $i32_lt_s_equal)
  (func $i32_lt_s_equal (result i32) (i32.lt_s (i32.const -1) (i32.const -1)))
  (export "i32_lt_s_greater" $i32_lt_s_greater)
  (func $i32_lt_s_greater (result i32) (i32.lt_s (i32.const 1) (i32.const -1)))

  (export "i32_lt_u_less" $i32_lt_u_less)
  (func $i32_lt_u_less (result i32) (i32.lt_u (i32.const 1) (i32.const -1)))
  (export "i32_lt_u_equal" $i32_lt_u_equal)
  (func $i32_lt_u_equal (result i32) (i32.lt_u (i32.const 1) (i32.const 1)))
  (export "i32_lt_u_greater" $i32_lt_u_greater)
  (func $i32_lt_u_greater (result i32) (i32.lt_u (i32.const -1) (i32.const 1)))

  (export "i32_le_s_less" $i32_le_s_less)
  (func $i32_le_s_less (result i32) (i32.le_s (i32.const -1) (i32.const 1)))
  (export "i32_le_s_equal" $i32_le_s_equal)
  (func $i32_le_s_equal (result i32) (i32.le_s (i32.const -1) (i32.const -1)))
  (export "i32_le_s_greater" $i32_le_s_greater)
  (func $i32_le_s_greater (result i32) (i32.le_s (i32.const 1) (i32.const -1)))

  (export "i32_le_u_less" $i32_le_u_less)
  (func $i32_le_u_less (result i32) (i32.le_u (i32.const 1) (i32.const -1)))
  (export "i32_le_u_equal" $i32_le_u_equal)
  (func $i32_le_u_equal (result i32) (i32.le_u (i32.const 1) (i32.const 1)))
  (export "i32_le_u_greater" $i32_le_u_greater)
  (func $i32_le_u_greater (result i32) (i32.le_u (i32.const -1) (i32.const 1)))

  (export "i32_gt_s_less" $i32_gt_s_less)
  (func $i32_gt_s_less (result i32) (i32.gt_s (i32.const -1) (i32.const 1)))
  (export "i32_gt_s_equal" $i32_gt_s_equal)
  (func $i32_gt_s_equal (result i32) (i32.gt_s (i32.const -1) (i32.const -1)))
  (export "i32_gt_s_greater" $i32_gt_s_greater)
  (func $i32_gt_s_greater (result i32) (i32.gt_s (i32.const 1) (i32.const -1)))

  (export "i32_gt_u_less" $i32_gt_u_less)
  (func $i32_gt_u_less (result i32) (i32.gt_u (i32.const 1) (i32.const -1)))
  (export "i32_gt_u_equal" $i32_gt_u_equal)
  (func $i32_gt_u_equal (result i32) (i32.gt_u (i32.const 1) (i32.const 1)))
  (export "i32_gt_u_greater" $i32_gt_u_greater)
  (func $i32_gt_u_greater (result i32) (i32.gt_u (i32.const -1) (i32.const 1)))

  (export "i32_ge_s_less" $i32_ge_s_less)
  (func $i32_ge_s_less (result i32) (i32.ge_s (i32.const -1) (i32.const 1)))
  (export "i32_ge_s_equal" $i32_ge_s_equal)
  (func $i32_ge_s_equal (result i32) (i32.ge_s (i32.const -1) (i32.const -1)))
  (export "i32_ge_s_greater" $i32_ge_s_greater)
  (func $i32_ge_s_greater (result i32) (i32.ge_s (i32.const 1) (i32.const -1)))

  (export "i32_ge_u_less" $i32_ge_u_less)
  (func $i32_ge_u_less (result i32) (i32.ge_u (i32.const 1) (i32.const -1)))
  (export "i32_ge_u_equal" $i32_ge_u_equal)
  (func $i32_ge_u_equal (result i32) (i32.ge_u (i32.const 1) (i32.const 1)))
  (export "i32_ge_u_greater" $i32_ge_u_greater)
  (func $i32_ge_u_greater (result i32) (i32.ge_u (i32.const -1) (i32.const 1)))

  ;; i64
  (export "i64_eq_true" $i64_eq_true)
  (func $i64_eq_true (result i32) (i64.eq (i64.const -1) (i64.const -1)))
  (export "i64_eq_false" $i64_eq_false)
  (func $i64_eq_false (result i32) (i64.eq (i64.const 1) (i64.const -1)))

  (export "i64_ne_true" $i64_ne_true)
  (func $i64_ne_true (result i32) (i64.ne (i64.const 1) (i64.const -1)))
  (export "i64_ne_false" $i64_ne_false)
  (func $i64_ne_false (result i32) (i64.ne (i64.const -1) (i64.const -1)))

  (export "i64_lt_s_less" $i64_lt_s_less)
  (func $i64_lt_s_less (result i32) (i64.lt_s (i64.const -1) (i64.const 1)))
  (export "i64_lt_s_equal" $i64_lt_s_equal)
  (func $i64_lt_s_equal (result i32) (i64.lt_s (i64.const -1) (i64.const -1)))
  (export "i64_lt_s_greater" $i64_lt_s_greater)
  (func $i64_lt_s_greater (result i32) (i64.lt_s (i64.const 1) (i64.const -1)))

  (export "i64_lt_u_less" $i64_lt_u_less)
  (func $i64_lt_u_less (result i32) (i64.lt_u (i64.const 1) (i64.const -1)))
  (export "i64_lt_u_equal" $i64_lt_u_equal)
  (func $i64_lt_u_equal (result i32) (i64.lt_u (i64.const 1) (i64.const 1)))
  (export "i64_lt_u_greater" $i64_lt_u_greater)
  (func $i64_lt_u_greater (result i32) (i64.lt_u (i64.const -1) (i64.const 1)))

  (export "i64_le_s_less" $i64_le_s_less)
  (func $i64_le_s_less (result i32) (i64.le_s (i64.const -1) (i64.const 1)))
  (export "i64_le_s_equal" $i64_le_s_equal)
  (func $i64_le_s_equal (result i32) (i64.le_s (i64.const -1) (i64.const -1)))
  (export "i64_le_s_greater" $i64_le_s_greater)
  (func $i64_le_s_greater (result i32) (i64.le_s (i64.const 1) (i64.const -1)))

  (export "i64_le_u_less" $i64_le_u_less)
  (func $i64_le_u_less (result i32) (i64.le_u (i64.const 1) (i64.const -1)))
  (export "i64_le_u_equal" $i64_le_u_equal)
  (func $i64_le_u_equal (result i32) (i64.le_u (i64.const 1) (i64.const 1)))
  (export "i64_le_u_greater" $i64_le_u_greater)
  (func $i64_le_u_greater (result i32) (i64.le_u (i64.const -1) (i64.const 1)))

  (export "i64_gt_s_less" $i64_gt_s_less)
  (func $i64_gt_s_less (result i32) (i64.gt_s (i64.const -1) (i64.const 1)))
  (export "i64_gt_s_equal" $i64_gt_s_equal)
  (func $i64_gt_s_equal (result i32) (i64.gt_s (i64.const -1) (i64.const -1)))
  (export "i64_gt_s_greater" $i64_gt_s_greater)
  (func $i64_gt_s_greater (result i32) (i64.gt_s (i64.const 1) (i64.const -1)))

  (export "i64_gt_u_less" $i64_gt_u_less)
  (func $i64_gt_u_less (result i32) (i64.gt_u (i64.const 1) (i64.const -1)))
  (export "i64_gt_u_equal" $i64_gt_u_equal)
  (func $i64_gt_u_equal (result i32) (i64.gt_u (i64.const 1) (i64.const 1)))
  (export "i64_gt_u_greater" $i64_gt_u_greater)
  (func $i64_gt_u_greater (result i32) (i64.gt_u (i64.const -1) (i64.const 1)))

  (export "i64_ge_s_less" $i64_ge_s_less)
  (func $i64_ge_s_less (result i32) (i64.ge_s (i64.const -1) (i64.const 1)))
  (export "i64_ge_s_equal" $i64_ge_s_equal)
  (func $i64_ge_s_equal (result i32) (i64.ge_s (i64.const -1) (i64.const -1)))
  (export "i64_ge_s_greater" $i64_ge_s_greater)
  (func $i64_ge_s_greater (result i32) (i64.ge_s (i64.const 1) (i64.const -1)))

  (export "i64_ge_u_less" $i64_ge_u_less)
  (func $i64_ge_u_less (result i32) (i64.ge_u (i64.const 1) (i64.const -1)))
  (export "i64_ge_u_equal" $i64_ge_u_equal)
  (func $i64_ge_u_equal (result i32) (i64.ge_u (i64.const 1) (i64.const 1)))
  (export "i64_ge_u_greater" $i64_ge_u_greater)
  (func $i64_ge_u_greater (result i32) (i64.ge_u (i64.const -1) (i64.const 1)))

  ;; f32
  (export "f32_eq_true" $f32_eq_true)
  (func $f32_eq_true (result i32) (f32.eq (f32.const -1) (f32.const -1)))
  (export "f32_eq_false" $f32_eq_false)
  (func $f32_eq_false (result i32) (f32.eq (f32.const 1) (f32.const -1)))

  (export "f32_ne_true" $f32_ne_true)
  (func $f32_ne_true (result i32) (f32.ne (f32.const 1) (f32.const -1)))
  (export "f32_ne_false" $f32_ne_false)
  (func $f32_ne_false (result i32) (f32.ne (f32.const -1) (f32.const -1)))

  (export "f32_lt_less" $f32_lt_less)
  (func $f32_lt_less (result i32) (f32.lt (f32.const -1) (f32.const 1)))
  (export "f32_lt_equal" $f32_lt_equal)
  (func $f32_lt_equal (result i32) (f32.lt (f32.const -1) (f32.const -1)))
  (export "f32_lt_greater" $f32_lt_greater)
  (func $f32_lt_greater (result i32) (f32.lt (f32.const 1) (f32.const -1)))

  (export "f32_le_less" $f32_le_less)
  (func $f32_le_less (result i32) (f32.le (f32.const -1) (f32.const 1)))
  (export "f32_le_equal" $f32_le_equal)
  (func $f32_le_equal (result i32) (f32.le (f32.const -1) (f32.const -1)))
  (export "f32_le_greater" $f32_le_greater)
  (func $f32_le_greater (result i32) (f32.le (f32.const 1) (f32.const -1)))

  (export "f32_gt_less" $f32_gt_less)
  (func $f32_gt_less (result i32) (f32.gt (f32.const -1) (f32.const 1)))
  (export "f32_gt_equal" $f32_gt_equal)
  (func $f32_gt_equal (result i32) (f32.gt (f32.const -1) (f32.const -1)))
  (export "f32_gt_greater" $f32_gt_greater)
  (func $f32_gt_greater (result i32) (f32.gt (f32.const 1) (f32.const -1)))

  (export "f32_ge_less" $f32_ge_less)
  (func $f32_ge_less (result i32) (f32.ge (f32.const -1) (f32.const 1)))
  (export "f32_ge_equal" $f32_ge_equal)
  (func $f32_ge_equal (result i32) (f32.ge (f32.const -1) (f32.const -1)))
  (export "f32_ge_greater" $f32_ge_greater)
  (func $f32_ge_greater (result i32) (f32.ge (f32.const 1) (f32.const -1)))

  ;; f64
  (export "f64_eq_true" $f64_eq_true)
  (func $f64_eq_true (result i32) (f64.eq (f64.const -1) (f64.const -1)))
  (export "f64_eq_false" $f64_eq_false)
  (func $f64_eq_false (result i32) (f64.eq (f64.const 1) (f64.const -1)))

  (export "f64_ne_true" $f64_ne_true)
  (func $f64_ne_true (result i32) (f64.ne (f64.const 1) (f64.const -1)))
  (export "f64_ne_false" $f64_ne_false)
  (func $f64_ne_false (result i32) (f64.ne (f64.const -1) (f64.const -1)))

  (export "f64_lt_less" $f64_lt_less)
  (func $f64_lt_less (result i32) (f64.lt (f64.const -1) (f64.const 1)))
  (export "f64_lt_equal" $f64_lt_equal)
  (func $f64_lt_equal (result i32) (f64.lt (f64.const -1) (f64.const -1)))
  (export "f64_lt_greater" $f64_lt_greater)
  (func $f64_lt_greater (result i32) (f64.lt (f64.const 1) (f64.const -1)))

  (export "f64_le_less" $f64_le_less)
  (func $f64_le_less (result i32) (f64.le (f64.const -1) (f64.const 1)))
  (export "f64_le_equal" $f64_le_equal)
  (func $f64_le_equal (result i32) (f64.le (f64.const -1) (f64.const -1)))
  (export "f64_le_greater" $f64_le_greater)
  (func $f64_le_greater (result i32) (f64.le (f64.const 1) (f64.const -1)))

  (export "f64_gt_less" $f64_gt_less)
  (func $f64_gt_less (result i32) (f64.gt (f64.const -1) (f64.const 1)))
  (export "f64_gt_equal" $f64_gt_equal)
  (func $f64_gt_equal (result i32) (f64.gt (f64.const -1) (f64.const -1)))
  (export "f64_gt_greater" $f64_gt_greater)
  (func $f64_gt_greater (result i32) (f64.gt (f64.const 1) (f64.const -1)))

  (export "f64_ge_less" $f64_ge_less)
  (func $f64_ge_less (result i32) (f64.ge (f64.const -1) (f64.const 1)))
  (export "f64_ge_equal" $f64_ge_equal)
  (func $f64_ge_equal (result i32) (f64.ge (f64.const -1) (f64.const -1)))
  (export "f64_ge_greater" $f64_ge_greater)
  (func $f64_ge_greater (result i32) (f64.ge (f64.const 1) (f64.const -1)))
)
(;; STDOUT ;;;
i32_eq_true() = 1
i32_eq_false() = 0
i32_ne_true() = 1
i32_ne_false() = 0
i32_lt_s_less() = 1
i32_lt_s_equal() = 0
i32_lt_s_greater() = 0
i32_lt_u_less() = 1
i32_lt_u_equal() = 0
i32_lt_u_greater() = 0
i32_le_s_less() = 1
i32_le_s_equal() = 1
i32_le_s_greater() = 0
i32_le_u_less() = 1
i32_le_u_equal() = 1
i32_le_u_greater() = 0
i32_gt_s_less() = 0
i32_gt_s_equal() = 0
i32_gt_s_greater() = 1
i32_gt_u_less() = 0
i32_gt_u_equal() = 0
i32_gt_u_greater() = 1
i32_ge_s_less() = 0
i32_ge_s_equal() = 1
i32_ge_s_greater() = 1
i32_ge_u_less() = 0
i32_ge_u_equal() = 1
i32_ge_u_greater() = 1
i64_eq_true() = 1
i64_eq_false() = 0
i64_ne_true() = 1
i64_ne_false() = 0
i64_lt_s_less() = 1
i64_lt_s_equal() = 0
i64_lt_s_greater() = 0
i64_lt_u_less() = 1
i64_lt_u_equal() = 0
i64_lt_u_greater() = 0
i64_le_s_less() = 1
i64_le_s_equal() = 1
i64_le_s_greater() = 0
i64_le_u_less() = 1
i64_le_u_equal() = 1
i64_le_u_greater() = 0
i64_gt_s_less() = 0
i64_gt_s_equal() = 0
i64_gt_s_greater() = 1
i64_gt_u_less() = 0
i64_gt_u_equal() = 0
i64_gt_u_greater() = 1
i64_ge_s_less() = 0
i64_ge_s_equal() = 1
i64_ge_s_greater() = 1
i64_ge_u_less() = 0
i64_ge_u_equal() = 1
i64_ge_u_greater() = 1
f32_eq_true() = 1
f32_eq_false() = 0
f32_ne_true() = 1
f32_ne_false() = 0
f32_lt_less() = 1
f32_lt_equal() = 0
f32_lt_greater() = 0
f32_le_less() = 1
f32_le_equal() = 1
f32_le_greater() = 0
f32_gt_less() = 0
f32_gt_equal() = 0
f32_gt_greater() = 1
f32_ge_less() = 0
f32_ge_equal() = 1
f32_ge_greater() = 1
f64_eq_true() = 1
f64_eq_false() = 0
f64_ne_true() = 1
f64_ne_false() = 0
f64_lt_less() = 1
f64_lt_equal() = 0
f64_lt_greater() = 0
f64_le_less() = 1
f64_le_equal() = 1
f64_le_greater() = 0
f64_gt_less() = 0
f64_gt_equal() = 0
f64_gt_greater() = 1
f64_ge_less() = 0
f64_ge_equal() = 1
f64_ge_greater() = 1
;;; STDOUT ;;)
