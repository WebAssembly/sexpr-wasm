;;; TOOL: run-js
(module
  (func $i32 (param i32) (result i32)
    (select (i32.const 1) (i32.const 2) (get_local 0)))
  (func $i64 (param i32) (result i64)
    (select (i64.const 1) (i64.const 2) (get_local 0)))
  (func $f32 (param i32) (result f32)
    (select (f32.const 1) (f32.const 2) (get_local 0)))
  (func $f64 (param i32) (result f64)
    (select (f64.const 1) (f64.const 2) (get_local 0)))

  (export "test_i32_l" $test_i32_l)
  (export "test_i32_r" $test_i32_r)
  (export "test_i64_l" $test_i64_l)
  (export "test_i64_r" $test_i64_r)
  (export "test_f32_l" $test_f32_l)
  (export "test_f32_r" $test_f32_r)
  (export "test_f64_l" $test_f64_l)
  (export "test_f64_r" $test_f64_r)

  (func $test_i32_l (result i32) (call $i32 (i32.const 0)))
  (func $test_i32_r (result i32) (call $i32 (i32.const 1)))

  ;; The JavaScript host truncates if you try to return an i64, so we'll do a
  ;; comparison against the expected value instead.
  (func $test_i64_l (result i32)
    (i64.eq (call $i64 (i32.const 0)) (i64.const 2)))
  (func $test_i64_r (result i32)
    (i64.eq (call $i64 (i32.const 1)) (i64.const 1)))
  (func $test_f32_l (result f32) (call $f32 (i32.const 0)))
  (func $test_f32_r (result f32) (call $f32 (i32.const 1)))
  (func $test_f64_l (result f64) (call $f64 (i32.const 0)))
  (func $test_f64_r (result f64) (call $f64 (i32.const 1))))
(;; STDOUT ;;;
test_i32_l() = 2
test_i32_r() = 1
test_i64_l() = 1
test_i64_r() = 1
test_f32_l() = 2
test_f32_r() = 1
test_f64_l() = 2
test_f64_r() = 1
;;; STDOUT ;;)
